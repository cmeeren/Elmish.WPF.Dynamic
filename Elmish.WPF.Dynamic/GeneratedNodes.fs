namespace rec Elmish.WPF.Dynamic

#nowarn "66"  // "This upcast is unnecessary - the types are identical"
#nowarn "67"  // "This type test or downcast will always hold"


type DependencyObject(setProps: DependencyObject -> unit) as this =
  inherit Node()


  do setProps this

  new() = DependencyObject(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.DependencyObject voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.DependencyObject voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.DependencyObject> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.DependencyObject) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DependencyObject, v: System.Windows.DependencyObject) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.DependencyObject())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DependencyObject as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ContentElement(setProps: ContentElement -> unit) as this =
  inherit DependencyObject()

  static let _DefAllowDrop = System.Windows.ContentElement.AllowDropProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefFocusable = System.Windows.ContentElement.FocusableProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsEnabled = System.Windows.ContentElement.IsEnabledProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = ContentElement(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.ContentElement voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.ContentElement voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AllowDrop: bool voption
  member this.AllowDrop with set x = this._AllowDrop <- ValueSome x

  [<DefaultValue>] val mutable private _Focusable: bool voption
  member this.Focusable with set x = this._Focusable <- ValueSome x

  [<DefaultValue>] val mutable private _IsEnabled: bool voption
  member this.IsEnabled with set x = this._IsEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _DragEnter: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragEnter with set x = this._DragEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragLeave: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragLeave with set x = this._DragLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragOver: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragOver with set x = this._DragOver <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Drop: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.Drop with set x = this._Drop <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _FocusableChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.FocusableChanged with set x = this._FocusableChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GiveFeedback: EventHandlerWrapper<System.Windows.GiveFeedbackEventArgs> voption
  member this.GiveFeedback with set x = this._GiveFeedback <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotFocus: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.GotFocus with set x = this._GotFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.GotKeyboardFocus with set x = this._GotKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotMouseCapture: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.GotMouseCapture with set x = this._GotMouseCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotStylusCapture: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.GotStylusCapture with set x = this._GotStylusCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotTouchCapture: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.GotTouchCapture with set x = this._GotTouchCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsEnabledChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsEnabledChanged with set x = this._IsEnabledChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsKeyboardFocusWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsKeyboardFocusWithinChanged with set x = this._IsKeyboardFocusWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsKeyboardFocusedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsKeyboardFocusedChanged with set x = this._IsKeyboardFocusedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseCaptureWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseCaptureWithinChanged with set x = this._IsMouseCaptureWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseCapturedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseCapturedChanged with set x = this._IsMouseCapturedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseDirectlyOverChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseDirectlyOverChanged with set x = this._IsMouseDirectlyOverChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusCaptureWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusCaptureWithinChanged with set x = this._IsStylusCaptureWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusCapturedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusCapturedChanged with set x = this._IsStylusCapturedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusDirectlyOverChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusDirectlyOverChanged with set x = this._IsStylusDirectlyOverChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _KeyDown: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.KeyDown with set x = this._KeyDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _KeyUp: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.KeyUp with set x = this._KeyUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostFocus: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.LostFocus with set x = this._LostFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.LostKeyboardFocus with set x = this._LostKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostMouseCapture: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.LostMouseCapture with set x = this._LostMouseCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostStylusCapture: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.LostStylusCapture with set x = this._LostStylusCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostTouchCapture: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.LostTouchCapture with set x = this._LostTouchCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseDown with set x = this._MouseDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseEnter: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseEnter with set x = this._MouseEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeave: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseLeave with set x = this._MouseLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeftButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseLeftButtonDown with set x = this._MouseLeftButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeftButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseLeftButtonUp with set x = this._MouseLeftButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseMove: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseMove with set x = this._MouseMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseRightButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseRightButtonDown with set x = this._MouseRightButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseRightButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseRightButtonUp with set x = this._MouseRightButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseUp with set x = this._MouseUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseWheel: EventHandlerWrapper<System.Windows.Input.MouseWheelEventArgs> voption
  member this.MouseWheel with set x = this._MouseWheel <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragEnter: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragEnter with set x = this._PreviewDragEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragLeave: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragLeave with set x = this._PreviewDragLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragOver: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragOver with set x = this._PreviewDragOver <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDrop: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDrop with set x = this._PreviewDrop <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewGiveFeedback: EventHandlerWrapper<System.Windows.GiveFeedbackEventArgs> voption
  member this.PreviewGiveFeedback with set x = this._PreviewGiveFeedback <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewGotKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.PreviewGotKeyboardFocus with set x = this._PreviewGotKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewKeyDown: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.PreviewKeyDown with set x = this._PreviewKeyDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewKeyUp: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.PreviewKeyUp with set x = this._PreviewKeyUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewLostKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.PreviewLostKeyboardFocus with set x = this._PreviewLostKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseDown with set x = this._PreviewMouseDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseLeftButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseLeftButtonDown with set x = this._PreviewMouseLeftButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseLeftButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseLeftButtonUp with set x = this._PreviewMouseLeftButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseMove: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.PreviewMouseMove with set x = this._PreviewMouseMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseRightButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseRightButtonDown with set x = this._PreviewMouseRightButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseRightButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseRightButtonUp with set x = this._PreviewMouseRightButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseUp with set x = this._PreviewMouseUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseWheel: EventHandlerWrapper<System.Windows.Input.MouseWheelEventArgs> voption
  member this.PreviewMouseWheel with set x = this._PreviewMouseWheel <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewQueryContinueDrag: EventHandlerWrapper<System.Windows.QueryContinueDragEventArgs> voption
  member this.PreviewQueryContinueDrag with set x = this._PreviewQueryContinueDrag <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusButtonDown: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.PreviewStylusButtonDown with set x = this._PreviewStylusButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusButtonUp: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.PreviewStylusButtonUp with set x = this._PreviewStylusButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusDown: EventHandlerWrapper<System.Windows.Input.StylusDownEventArgs> voption
  member this.PreviewStylusDown with set x = this._PreviewStylusDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusInAirMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusInAirMove with set x = this._PreviewStylusInAirMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusInRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusInRange with set x = this._PreviewStylusInRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusMove with set x = this._PreviewStylusMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusOutOfRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusOutOfRange with set x = this._PreviewStylusOutOfRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusSystemGesture: EventHandlerWrapper<System.Windows.Input.StylusSystemGestureEventArgs> voption
  member this.PreviewStylusSystemGesture with set x = this._PreviewStylusSystemGesture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusUp: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusUp with set x = this._PreviewStylusUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTextInput: EventHandlerWrapper<System.Windows.Input.TextCompositionEventArgs> voption
  member this.PreviewTextInput with set x = this._PreviewTextInput <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchDown: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchDown with set x = this._PreviewTouchDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchMove: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchMove with set x = this._PreviewTouchMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchUp: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchUp with set x = this._PreviewTouchUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _QueryContinueDrag: EventHandlerWrapper<System.Windows.QueryContinueDragEventArgs> voption
  member this.QueryContinueDrag with set x = this._QueryContinueDrag <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _QueryCursor: EventHandlerWrapper<System.Windows.Input.QueryCursorEventArgs> voption
  member this.QueryCursor with set x = this._QueryCursor <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusButtonDown: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.StylusButtonDown with set x = this._StylusButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusButtonUp: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.StylusButtonUp with set x = this._StylusButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusDown: EventHandlerWrapper<System.Windows.Input.StylusDownEventArgs> voption
  member this.StylusDown with set x = this._StylusDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusEnter: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusEnter with set x = this._StylusEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusInAirMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusInAirMove with set x = this._StylusInAirMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusInRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusInRange with set x = this._StylusInRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusLeave: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusLeave with set x = this._StylusLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusMove with set x = this._StylusMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusOutOfRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusOutOfRange with set x = this._StylusOutOfRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusSystemGesture: EventHandlerWrapper<System.Windows.Input.StylusSystemGestureEventArgs> voption
  member this.StylusSystemGesture with set x = this._StylusSystemGesture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusUp: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusUp with set x = this._StylusUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TextInput: EventHandlerWrapper<System.Windows.Input.TextCompositionEventArgs> voption
  member this.TextInput with set x = this._TextInput <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchDown: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchDown with set x = this._TouchDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchEnter: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchEnter with set x = this._TouchEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchLeave: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchLeave with set x = this._TouchLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchMove: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchMove with set x = this._TouchMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchUp: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchUp with set x = this._TouchUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.ContentElement> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.ContentElement) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AllowDrop |> ValueOption.iter (fun x -> v.AllowDrop <- x)
    this._Focusable |> ValueOption.iter (fun x -> v.Focusable <- x)
    this._IsEnabled |> ValueOption.iter (fun x -> v.IsEnabled <- x)
    this._DragEnter |> ValueOption.iter (fun x -> x.Subscription <- v.DragEnter.Subscribe x.Fn)
    this._DragLeave |> ValueOption.iter (fun x -> x.Subscription <- v.DragLeave.Subscribe x.Fn)
    this._DragOver |> ValueOption.iter (fun x -> x.Subscription <- v.DragOver.Subscribe x.Fn)
    this._Drop |> ValueOption.iter (fun x -> x.Subscription <- v.Drop.Subscribe x.Fn)
    this._FocusableChanged |> ValueOption.iter (fun x -> x.Subscription <- v.FocusableChanged.Subscribe x.Fn)
    this._GiveFeedback |> ValueOption.iter (fun x -> x.Subscription <- v.GiveFeedback.Subscribe x.Fn)
    this._GotFocus |> ValueOption.iter (fun x -> x.Subscription <- v.GotFocus.Subscribe x.Fn)
    this._GotKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.GotKeyboardFocus.Subscribe x.Fn)
    this._GotMouseCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotMouseCapture.Subscribe x.Fn)
    this._GotStylusCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotStylusCapture.Subscribe x.Fn)
    this._GotTouchCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotTouchCapture.Subscribe x.Fn)
    this._IsEnabledChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsEnabledChanged.Subscribe x.Fn)
    this._IsKeyboardFocusWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsKeyboardFocusWithinChanged.Subscribe x.Fn)
    this._IsKeyboardFocusedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsKeyboardFocusedChanged.Subscribe x.Fn)
    this._IsMouseCaptureWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseCaptureWithinChanged.Subscribe x.Fn)
    this._IsMouseCapturedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseCapturedChanged.Subscribe x.Fn)
    this._IsMouseDirectlyOverChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseDirectlyOverChanged.Subscribe x.Fn)
    this._IsStylusCaptureWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusCaptureWithinChanged.Subscribe x.Fn)
    this._IsStylusCapturedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusCapturedChanged.Subscribe x.Fn)
    this._IsStylusDirectlyOverChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusDirectlyOverChanged.Subscribe x.Fn)
    this._KeyDown |> ValueOption.iter (fun x -> x.Subscription <- v.KeyDown.Subscribe x.Fn)
    this._KeyUp |> ValueOption.iter (fun x -> x.Subscription <- v.KeyUp.Subscribe x.Fn)
    this._LostFocus |> ValueOption.iter (fun x -> x.Subscription <- v.LostFocus.Subscribe x.Fn)
    this._LostKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.LostKeyboardFocus.Subscribe x.Fn)
    this._LostMouseCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostMouseCapture.Subscribe x.Fn)
    this._LostStylusCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostStylusCapture.Subscribe x.Fn)
    this._LostTouchCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostTouchCapture.Subscribe x.Fn)
    this._MouseDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseDown.Subscribe x.Fn)
    this._MouseEnter |> ValueOption.iter (fun x -> x.Subscription <- v.MouseEnter.Subscribe x.Fn)
    this._MouseLeave |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeave.Subscribe x.Fn)
    this._MouseLeftButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeftButtonDown.Subscribe x.Fn)
    this._MouseLeftButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeftButtonUp.Subscribe x.Fn)
    this._MouseMove |> ValueOption.iter (fun x -> x.Subscription <- v.MouseMove.Subscribe x.Fn)
    this._MouseRightButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseRightButtonDown.Subscribe x.Fn)
    this._MouseRightButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseRightButtonUp.Subscribe x.Fn)
    this._MouseUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseUp.Subscribe x.Fn)
    this._MouseWheel |> ValueOption.iter (fun x -> x.Subscription <- v.MouseWheel.Subscribe x.Fn)
    this._PreviewDragEnter |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragEnter.Subscribe x.Fn)
    this._PreviewDragLeave |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragLeave.Subscribe x.Fn)
    this._PreviewDragOver |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragOver.Subscribe x.Fn)
    this._PreviewDrop |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDrop.Subscribe x.Fn)
    this._PreviewGiveFeedback |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewGiveFeedback.Subscribe x.Fn)
    this._PreviewGotKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewGotKeyboardFocus.Subscribe x.Fn)
    this._PreviewKeyDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewKeyDown.Subscribe x.Fn)
    this._PreviewKeyUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewKeyUp.Subscribe x.Fn)
    this._PreviewLostKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewLostKeyboardFocus.Subscribe x.Fn)
    this._PreviewMouseDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseDown.Subscribe x.Fn)
    this._PreviewMouseLeftButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseLeftButtonDown.Subscribe x.Fn)
    this._PreviewMouseLeftButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseLeftButtonUp.Subscribe x.Fn)
    this._PreviewMouseMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseMove.Subscribe x.Fn)
    this._PreviewMouseRightButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseRightButtonDown.Subscribe x.Fn)
    this._PreviewMouseRightButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseRightButtonUp.Subscribe x.Fn)
    this._PreviewMouseUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseUp.Subscribe x.Fn)
    this._PreviewMouseWheel |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseWheel.Subscribe x.Fn)
    this._PreviewQueryContinueDrag |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewQueryContinueDrag.Subscribe x.Fn)
    this._PreviewStylusButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusButtonDown.Subscribe x.Fn)
    this._PreviewStylusButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusButtonUp.Subscribe x.Fn)
    this._PreviewStylusDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusDown.Subscribe x.Fn)
    this._PreviewStylusInAirMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusInAirMove.Subscribe x.Fn)
    this._PreviewStylusInRange |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusInRange.Subscribe x.Fn)
    this._PreviewStylusMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusMove.Subscribe x.Fn)
    this._PreviewStylusOutOfRange |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusOutOfRange.Subscribe x.Fn)
    this._PreviewStylusSystemGesture |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusSystemGesture.Subscribe x.Fn)
    this._PreviewStylusUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusUp.Subscribe x.Fn)
    this._PreviewTextInput |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTextInput.Subscribe x.Fn)
    this._PreviewTouchDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchDown.Subscribe x.Fn)
    this._PreviewTouchMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchMove.Subscribe x.Fn)
    this._PreviewTouchUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchUp.Subscribe x.Fn)
    this._QueryContinueDrag |> ValueOption.iter (fun x -> x.Subscription <- v.QueryContinueDrag.Subscribe x.Fn)
    this._QueryCursor |> ValueOption.iter (fun x -> x.Subscription <- v.QueryCursor.Subscribe x.Fn)
    this._StylusButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.StylusButtonDown.Subscribe x.Fn)
    this._StylusButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.StylusButtonUp.Subscribe x.Fn)
    this._StylusDown |> ValueOption.iter (fun x -> x.Subscription <- v.StylusDown.Subscribe x.Fn)
    this._StylusEnter |> ValueOption.iter (fun x -> x.Subscription <- v.StylusEnter.Subscribe x.Fn)
    this._StylusInAirMove |> ValueOption.iter (fun x -> x.Subscription <- v.StylusInAirMove.Subscribe x.Fn)
    this._StylusInRange |> ValueOption.iter (fun x -> x.Subscription <- v.StylusInRange.Subscribe x.Fn)
    this._StylusLeave |> ValueOption.iter (fun x -> x.Subscription <- v.StylusLeave.Subscribe x.Fn)
    this._StylusMove |> ValueOption.iter (fun x -> x.Subscription <- v.StylusMove.Subscribe x.Fn)
    this._StylusOutOfRange |> ValueOption.iter (fun x -> x.Subscription <- v.StylusOutOfRange.Subscribe x.Fn)
    this._StylusSystemGesture |> ValueOption.iter (fun x -> x.Subscription <- v.StylusSystemGesture.Subscribe x.Fn)
    this._StylusUp |> ValueOption.iter (fun x -> x.Subscription <- v.StylusUp.Subscribe x.Fn)
    this._TextInput |> ValueOption.iter (fun x -> x.Subscription <- v.TextInput.Subscribe x.Fn)
    this._TouchDown |> ValueOption.iter (fun x -> x.Subscription <- v.TouchDown.Subscribe x.Fn)
    this._TouchEnter |> ValueOption.iter (fun x -> x.Subscription <- v.TouchEnter.Subscribe x.Fn)
    this._TouchLeave |> ValueOption.iter (fun x -> x.Subscription <- v.TouchLeave.Subscribe x.Fn)
    this._TouchMove |> ValueOption.iter (fun x -> x.Subscription <- v.TouchMove.Subscribe x.Fn)
    this._TouchUp |> ValueOption.iter (fun x -> x.Subscription <- v.TouchUp.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ContentElement, v: System.Windows.ContentElement) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAllowDrop prev._AllowDrop this._AllowDrop id (fun x -> v.AllowDrop <- x)
    updateValue _DefFocusable prev._Focusable this._Focusable id (fun x -> v.Focusable <- x)
    updateValue _DefIsEnabled prev._IsEnabled this._IsEnabled id (fun x -> v.IsEnabled <- x)
    updateFn prev._DragEnter this._DragEnter v.DragEnter
    updateFn prev._DragLeave this._DragLeave v.DragLeave
    updateFn prev._DragOver this._DragOver v.DragOver
    updateFn prev._Drop this._Drop v.Drop
    updateFn prev._FocusableChanged this._FocusableChanged v.FocusableChanged
    updateFn prev._GiveFeedback this._GiveFeedback v.GiveFeedback
    updateFn prev._GotFocus this._GotFocus v.GotFocus
    updateFn prev._GotKeyboardFocus this._GotKeyboardFocus v.GotKeyboardFocus
    updateFn prev._GotMouseCapture this._GotMouseCapture v.GotMouseCapture
    updateFn prev._GotStylusCapture this._GotStylusCapture v.GotStylusCapture
    updateFn prev._GotTouchCapture this._GotTouchCapture v.GotTouchCapture
    updateFn prev._IsEnabledChanged this._IsEnabledChanged v.IsEnabledChanged
    updateFn prev._IsKeyboardFocusWithinChanged this._IsKeyboardFocusWithinChanged v.IsKeyboardFocusWithinChanged
    updateFn prev._IsKeyboardFocusedChanged this._IsKeyboardFocusedChanged v.IsKeyboardFocusedChanged
    updateFn prev._IsMouseCaptureWithinChanged this._IsMouseCaptureWithinChanged v.IsMouseCaptureWithinChanged
    updateFn prev._IsMouseCapturedChanged this._IsMouseCapturedChanged v.IsMouseCapturedChanged
    updateFn prev._IsMouseDirectlyOverChanged this._IsMouseDirectlyOverChanged v.IsMouseDirectlyOverChanged
    updateFn prev._IsStylusCaptureWithinChanged this._IsStylusCaptureWithinChanged v.IsStylusCaptureWithinChanged
    updateFn prev._IsStylusCapturedChanged this._IsStylusCapturedChanged v.IsStylusCapturedChanged
    updateFn prev._IsStylusDirectlyOverChanged this._IsStylusDirectlyOverChanged v.IsStylusDirectlyOverChanged
    updateFn prev._KeyDown this._KeyDown v.KeyDown
    updateFn prev._KeyUp this._KeyUp v.KeyUp
    updateFn prev._LostFocus this._LostFocus v.LostFocus
    updateFn prev._LostKeyboardFocus this._LostKeyboardFocus v.LostKeyboardFocus
    updateFn prev._LostMouseCapture this._LostMouseCapture v.LostMouseCapture
    updateFn prev._LostStylusCapture this._LostStylusCapture v.LostStylusCapture
    updateFn prev._LostTouchCapture this._LostTouchCapture v.LostTouchCapture
    updateFn prev._MouseDown this._MouseDown v.MouseDown
    updateFn prev._MouseEnter this._MouseEnter v.MouseEnter
    updateFn prev._MouseLeave this._MouseLeave v.MouseLeave
    updateFn prev._MouseLeftButtonDown this._MouseLeftButtonDown v.MouseLeftButtonDown
    updateFn prev._MouseLeftButtonUp this._MouseLeftButtonUp v.MouseLeftButtonUp
    updateFn prev._MouseMove this._MouseMove v.MouseMove
    updateFn prev._MouseRightButtonDown this._MouseRightButtonDown v.MouseRightButtonDown
    updateFn prev._MouseRightButtonUp this._MouseRightButtonUp v.MouseRightButtonUp
    updateFn prev._MouseUp this._MouseUp v.MouseUp
    updateFn prev._MouseWheel this._MouseWheel v.MouseWheel
    updateFn prev._PreviewDragEnter this._PreviewDragEnter v.PreviewDragEnter
    updateFn prev._PreviewDragLeave this._PreviewDragLeave v.PreviewDragLeave
    updateFn prev._PreviewDragOver this._PreviewDragOver v.PreviewDragOver
    updateFn prev._PreviewDrop this._PreviewDrop v.PreviewDrop
    updateFn prev._PreviewGiveFeedback this._PreviewGiveFeedback v.PreviewGiveFeedback
    updateFn prev._PreviewGotKeyboardFocus this._PreviewGotKeyboardFocus v.PreviewGotKeyboardFocus
    updateFn prev._PreviewKeyDown this._PreviewKeyDown v.PreviewKeyDown
    updateFn prev._PreviewKeyUp this._PreviewKeyUp v.PreviewKeyUp
    updateFn prev._PreviewLostKeyboardFocus this._PreviewLostKeyboardFocus v.PreviewLostKeyboardFocus
    updateFn prev._PreviewMouseDown this._PreviewMouseDown v.PreviewMouseDown
    updateFn prev._PreviewMouseLeftButtonDown this._PreviewMouseLeftButtonDown v.PreviewMouseLeftButtonDown
    updateFn prev._PreviewMouseLeftButtonUp this._PreviewMouseLeftButtonUp v.PreviewMouseLeftButtonUp
    updateFn prev._PreviewMouseMove this._PreviewMouseMove v.PreviewMouseMove
    updateFn prev._PreviewMouseRightButtonDown this._PreviewMouseRightButtonDown v.PreviewMouseRightButtonDown
    updateFn prev._PreviewMouseRightButtonUp this._PreviewMouseRightButtonUp v.PreviewMouseRightButtonUp
    updateFn prev._PreviewMouseUp this._PreviewMouseUp v.PreviewMouseUp
    updateFn prev._PreviewMouseWheel this._PreviewMouseWheel v.PreviewMouseWheel
    updateFn prev._PreviewQueryContinueDrag this._PreviewQueryContinueDrag v.PreviewQueryContinueDrag
    updateFn prev._PreviewStylusButtonDown this._PreviewStylusButtonDown v.PreviewStylusButtonDown
    updateFn prev._PreviewStylusButtonUp this._PreviewStylusButtonUp v.PreviewStylusButtonUp
    updateFn prev._PreviewStylusDown this._PreviewStylusDown v.PreviewStylusDown
    updateFn prev._PreviewStylusInAirMove this._PreviewStylusInAirMove v.PreviewStylusInAirMove
    updateFn prev._PreviewStylusInRange this._PreviewStylusInRange v.PreviewStylusInRange
    updateFn prev._PreviewStylusMove this._PreviewStylusMove v.PreviewStylusMove
    updateFn prev._PreviewStylusOutOfRange this._PreviewStylusOutOfRange v.PreviewStylusOutOfRange
    updateFn prev._PreviewStylusSystemGesture this._PreviewStylusSystemGesture v.PreviewStylusSystemGesture
    updateFn prev._PreviewStylusUp this._PreviewStylusUp v.PreviewStylusUp
    updateFn prev._PreviewTextInput this._PreviewTextInput v.PreviewTextInput
    updateFn prev._PreviewTouchDown this._PreviewTouchDown v.PreviewTouchDown
    updateFn prev._PreviewTouchMove this._PreviewTouchMove v.PreviewTouchMove
    updateFn prev._PreviewTouchUp this._PreviewTouchUp v.PreviewTouchUp
    updateFn prev._QueryContinueDrag this._QueryContinueDrag v.QueryContinueDrag
    updateFn prev._QueryCursor this._QueryCursor v.QueryCursor
    updateFn prev._StylusButtonDown this._StylusButtonDown v.StylusButtonDown
    updateFn prev._StylusButtonUp this._StylusButtonUp v.StylusButtonUp
    updateFn prev._StylusDown this._StylusDown v.StylusDown
    updateFn prev._StylusEnter this._StylusEnter v.StylusEnter
    updateFn prev._StylusInAirMove this._StylusInAirMove v.StylusInAirMove
    updateFn prev._StylusInRange this._StylusInRange v.StylusInRange
    updateFn prev._StylusLeave this._StylusLeave v.StylusLeave
    updateFn prev._StylusMove this._StylusMove v.StylusMove
    updateFn prev._StylusOutOfRange this._StylusOutOfRange v.StylusOutOfRange
    updateFn prev._StylusSystemGesture this._StylusSystemGesture v.StylusSystemGesture
    updateFn prev._StylusUp this._StylusUp v.StylusUp
    updateFn prev._TextInput this._TextInput v.TextInput
    updateFn prev._TouchDown this._TouchDown v.TouchDown
    updateFn prev._TouchEnter this._TouchEnter v.TouchEnter
    updateFn prev._TouchLeave this._TouchLeave v.TouchLeave
    updateFn prev._TouchMove this._TouchMove v.TouchMove
    updateFn prev._TouchUp this._TouchUp v.TouchUp
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.ContentElement())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ContentElement as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FrameworkContentElement(setProps: FrameworkContentElement -> unit) as this =
  inherit ContentElement()

  static let _DefContextMenu = System.Windows.FrameworkContentElement.ContextMenuProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ContextMenu
  static let _DefCursor = System.Windows.FrameworkContentElement.CursorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Input.Cursor
  static let _DefFocusVisualStyle = System.Windows.FrameworkContentElement.FocusVisualStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefForceCursor = System.Windows.FrameworkContentElement.ForceCursorProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefInputScope = System.Windows.FrameworkContentElement.InputScopeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Input.InputScope
  static let _DefOverridesDefaultStyle = System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefStyle = System.Windows.FrameworkContentElement.StyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefTag = System.Windows.FrameworkContentElement.TagProperty.DefaultMetadata.DefaultValue :?> obj
  static let _DefToolTip = System.Windows.FrameworkContentElement.ToolTipProperty.DefaultMetadata.DefaultValue :?> obj

  do setProps this

  new() = FrameworkContentElement(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.FrameworkContentElement voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.FrameworkContentElement voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ContextMenu: ContextMenu voption
  member this.ContextMenu with set x = this._ContextMenu <- ValueSome x

  [<DefaultValue>] val mutable private _Cursor: System.Windows.Input.Cursor voption
  member this.Cursor with set x = this._Cursor <- ValueSome x

  [<DefaultValue>] val mutable private _FocusVisualStyle: System.Windows.Style voption
  member this.FocusVisualStyle with set x = this._FocusVisualStyle <- ValueSome x

  [<DefaultValue>] val mutable private _ForceCursor: bool voption
  member this.ForceCursor with set x = this._ForceCursor <- ValueSome x

  [<DefaultValue>] val mutable private _InputScope: System.Windows.Input.InputScope voption
  member this.InputScope with set x = this._InputScope <- ValueSome x

  [<DefaultValue>] val mutable private _OverridesDefaultStyle: bool voption
  member this.OverridesDefaultStyle with set x = this._OverridesDefaultStyle <- ValueSome x

  [<DefaultValue>] val mutable private _Resources: System.Windows.ResourceDictionary voption
  member this.Resources with set x = this._Resources <- ValueSome x

  [<DefaultValue>] val mutable private _Style: System.Windows.Style voption
  member this.Style with set x = this._Style <- ValueSome x

  [<DefaultValue>] val mutable private _Tag: obj voption
  member this.Tag with set x = this._Tag <- ValueSome x

  [<DefaultValue>] val mutable private _ToolTip: obj voption
  member this.ToolTip with set x = this._ToolTip <- ValueSome x

  [<DefaultValue>] val mutable private _ContextMenuClosing: EventHandlerWrapper<System.Windows.Controls.ContextMenuEventArgs> voption
  member this.ContextMenuClosing with set x = this._ContextMenuClosing <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ContextMenuOpening: EventHandlerWrapper<System.Windows.Controls.ContextMenuEventArgs> voption
  member this.ContextMenuOpening with set x = this._ContextMenuOpening <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Initialized: EventHandlerWrapper<System.EventArgs> voption
  member this.Initialized with set x = this._Initialized <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Loaded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Loaded with set x = this._Loaded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SourceUpdated: EventHandlerWrapper<System.Windows.Data.DataTransferEventArgs> voption
  member this.SourceUpdated with set x = this._SourceUpdated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TargetUpdated: EventHandlerWrapper<System.Windows.Data.DataTransferEventArgs> voption
  member this.TargetUpdated with set x = this._TargetUpdated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ToolTipClosing: EventHandlerWrapper<System.Windows.Controls.ToolTipEventArgs> voption
  member this.ToolTipClosing with set x = this._ToolTipClosing <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ToolTipOpening: EventHandlerWrapper<System.Windows.Controls.ToolTipEventArgs> voption
  member this.ToolTipOpening with set x = this._ToolTipOpening <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Unloaded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Unloaded with set x = this._Unloaded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.FrameworkContentElement> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.FrameworkContentElement) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ContextMenu |> ValueOption.iter (fun x -> v.ContextMenu <- x.RenderNew () :?> System.Windows.Controls.ContextMenu)
    this._Cursor |> ValueOption.iter (fun x -> v.Cursor <- x)
    this._FocusVisualStyle |> ValueOption.iter (fun x -> v.FocusVisualStyle <- x)
    this._ForceCursor |> ValueOption.iter (fun x -> v.ForceCursor <- x)
    this._InputScope |> ValueOption.iter (fun x -> v.InputScope <- x)
    this._OverridesDefaultStyle |> ValueOption.iter (fun x -> v.OverridesDefaultStyle <- x)
    this._Resources |> ValueOption.iter (fun x -> v.Resources <- x)
    this._Style |> ValueOption.iter (fun x -> v.Style <- x)
    this._Tag |> ValueOption.iter (fun x -> v.Tag <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._ToolTip |> ValueOption.iter (fun x -> v.ToolTip <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._ContextMenuClosing |> ValueOption.iter (fun x -> x.Subscription <- v.ContextMenuClosing.Subscribe x.Fn)
    this._ContextMenuOpening |> ValueOption.iter (fun x -> x.Subscription <- v.ContextMenuOpening.Subscribe x.Fn)
    this._Initialized |> ValueOption.iter (fun x -> x.Subscription <- v.Initialized.Subscribe x.Fn)
    this._Loaded |> ValueOption.iter (fun x -> x.Subscription <- v.Loaded.Subscribe x.Fn)
    this._SourceUpdated |> ValueOption.iter (fun x -> x.Subscription <- v.SourceUpdated.Subscribe x.Fn)
    this._TargetUpdated |> ValueOption.iter (fun x -> x.Subscription <- v.TargetUpdated.Subscribe x.Fn)
    this._ToolTipClosing |> ValueOption.iter (fun x -> x.Subscription <- v.ToolTipClosing.Subscribe x.Fn)
    this._ToolTipOpening |> ValueOption.iter (fun x -> x.Subscription <- v.ToolTipOpening.Subscribe x.Fn)
    this._Unloaded |> ValueOption.iter (fun x -> x.Subscription <- v.Unloaded.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FrameworkContentElement, v: System.Windows.FrameworkContentElement) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefContextMenu prev._ContextMenu this._ContextMenu id (fun x -> v.ContextMenu <- x)
    updateValue _DefCursor prev._Cursor this._Cursor id (fun x -> v.Cursor <- x)
    updateValue _DefFocusVisualStyle prev._FocusVisualStyle this._FocusVisualStyle id (fun x -> v.FocusVisualStyle <- x)
    updateValue _DefForceCursor prev._ForceCursor this._ForceCursor id (fun x -> v.ForceCursor <- x)
    updateValue _DefInputScope prev._InputScope this._InputScope id (fun x -> v.InputScope <- x)
    updateValue _DefOverridesDefaultStyle prev._OverridesDefaultStyle this._OverridesDefaultStyle id (fun x -> v.OverridesDefaultStyle <- x)
    updateValue Unchecked.defaultof<System.Windows.ResourceDictionary> prev._Resources this._Resources id (fun x -> v.Resources <- x)
    updateValue _DefStyle prev._Style this._Style id (fun x -> v.Style <- x)
    updateValue _DefTag prev._Tag this._Tag id (fun x -> v.Tag <- x)
    updateValue _DefToolTip prev._ToolTip this._ToolTip id (fun x -> v.ToolTip <- x)
    updateFn prev._ContextMenuClosing this._ContextMenuClosing v.ContextMenuClosing
    updateFn prev._ContextMenuOpening this._ContextMenuOpening v.ContextMenuOpening
    updateFn prev._Initialized this._Initialized v.Initialized
    updateFn prev._Loaded this._Loaded v.Loaded
    updateFn prev._SourceUpdated this._SourceUpdated v.SourceUpdated
    updateFn prev._TargetUpdated this._TargetUpdated v.TargetUpdated
    updateFn prev._ToolTipClosing this._ToolTipClosing v.ToolTipClosing
    updateFn prev._ToolTipOpening this._ToolTipOpening v.ToolTipOpening
    updateFn prev._Unloaded this._Unloaded v.Unloaded
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.FrameworkContentElement())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FrameworkContentElement as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type DefinitionBase() =
  inherit FrameworkContentElement()

  static let _DefSharedSizeGroup = System.Windows.Controls.DefinitionBase.SharedSizeGroupProperty.DefaultMetadata.DefaultValue :?> string

  [<DefaultValue>] val mutable private _SharedSizeGroup: string voption
  member this.SharedSizeGroup with set x = this._SharedSizeGroup <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.DefinitionBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.DefinitionBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._SharedSizeGroup |> ValueOption.iter (fun x -> v.SharedSizeGroup <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DefinitionBase, v: System.Windows.Controls.DefinitionBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSharedSizeGroup prev._SharedSizeGroup this._SharedSizeGroup id (fun x -> v.SharedSizeGroup <- x)
    this.SilenceEvents <- false


type ColumnDefinition(setProps: ColumnDefinition -> unit) as this =
  inherit DefinitionBase()

  static let _DefMaxWidth = System.Windows.Controls.ColumnDefinition.MaxWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinWidth = System.Windows.Controls.ColumnDefinition.MinWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefWidth = System.Windows.Controls.ColumnDefinition.WidthProperty.DefaultMetadata.DefaultValue :?> System.Windows.GridLength

  do setProps this

  new() = ColumnDefinition(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ColumnDefinition voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ColumnDefinition voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _MaxWidth: float voption
  member this.MaxWidth with set x = this._MaxWidth <- ValueSome x

  [<DefaultValue>] val mutable private _MinWidth: float voption
  member this.MinWidth with set x = this._MinWidth <- ValueSome x

  [<DefaultValue>] val mutable private _Width: System.Windows.GridLength voption
  member this.Width with set x = this._Width <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ColumnDefinition> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ColumnDefinition) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._MaxWidth |> ValueOption.iter (fun x -> v.MaxWidth <- x)
    this._MinWidth |> ValueOption.iter (fun x -> v.MinWidth <- x)
    this._Width |> ValueOption.iter (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ColumnDefinition, v: System.Windows.Controls.ColumnDefinition) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefMaxWidth prev._MaxWidth this._MaxWidth id (fun x -> v.MaxWidth <- x)
    updateValue _DefMinWidth prev._MinWidth this._MinWidth id (fun x -> v.MinWidth <- x)
    updateValue _DefWidth prev._Width this._Width id (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ColumnDefinition())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ColumnDefinition as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RowDefinition(setProps: RowDefinition -> unit) as this =
  inherit DefinitionBase()

  static let _DefHeight = System.Windows.Controls.RowDefinition.HeightProperty.DefaultMetadata.DefaultValue :?> System.Windows.GridLength
  static let _DefMaxHeight = System.Windows.Controls.RowDefinition.MaxHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinHeight = System.Windows.Controls.RowDefinition.MinHeightProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = RowDefinition(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.RowDefinition voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.RowDefinition voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Height: System.Windows.GridLength voption
  member this.Height with set x = this._Height <- ValueSome x

  [<DefaultValue>] val mutable private _MaxHeight: float voption
  member this.MaxHeight with set x = this._MaxHeight <- ValueSome x

  [<DefaultValue>] val mutable private _MinHeight: float voption
  member this.MinHeight with set x = this._MinHeight <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.RowDefinition> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.RowDefinition) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Height |> ValueOption.iter (fun x -> v.Height <- x)
    this._MaxHeight |> ValueOption.iter (fun x -> v.MaxHeight <- x)
    this._MinHeight |> ValueOption.iter (fun x -> v.MinHeight <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RowDefinition, v: System.Windows.Controls.RowDefinition) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefHeight prev._Height this._Height id (fun x -> v.Height <- x)
    updateValue _DefMaxHeight prev._MaxHeight this._MaxHeight id (fun x -> v.MaxHeight <- x)
    updateValue _DefMinHeight prev._MinHeight this._MinHeight id (fun x -> v.MinHeight <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.RowDefinition())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RowDefinition as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FixedDocument(setProps: FixedDocument -> unit) as this =
  inherit FrameworkContentElement()

  static let _DefPrintTicket = System.Windows.Documents.FixedDocument.PrintTicketProperty.DefaultMetadata.DefaultValue :?> obj

  do setProps this

  new() = FixedDocument(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.FixedDocument voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.FixedDocument voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _PrintTicket: obj voption
  member this.PrintTicket with set x = this._PrintTicket <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.FixedDocument> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.FixedDocument) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._PrintTicket |> ValueOption.iter (fun x -> v.PrintTicket <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FixedDocument, v: System.Windows.Documents.FixedDocument) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPrintTicket prev._PrintTicket this._PrintTicket id (fun x -> v.PrintTicket <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.FixedDocument())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FixedDocument as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FixedDocumentSequence(setProps: FixedDocumentSequence -> unit) as this =
  inherit FrameworkContentElement()

  static let _DefPrintTicket = System.Windows.Documents.FixedDocumentSequence.PrintTicketProperty.DefaultMetadata.DefaultValue :?> obj

  do setProps this

  new() = FixedDocumentSequence(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.FixedDocumentSequence voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.FixedDocumentSequence voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _PrintTicket: obj voption
  member this.PrintTicket with set x = this._PrintTicket <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.FixedDocumentSequence> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.FixedDocumentSequence) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._PrintTicket |> ValueOption.iter (fun x -> v.PrintTicket <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FixedDocumentSequence, v: System.Windows.Documents.FixedDocumentSequence) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPrintTicket prev._PrintTicket this._PrintTicket id (fun x -> v.PrintTicket <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.FixedDocumentSequence())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FixedDocumentSequence as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FlowDocument(setProps: FlowDocument -> unit) as this =
  inherit FrameworkContentElement()

  static let _DefBackground = System.Windows.Documents.FlowDocument.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefColumnGap = System.Windows.Documents.FlowDocument.ColumnGapProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefColumnRuleBrush = System.Windows.Documents.FlowDocument.ColumnRuleBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefColumnRuleWidth = System.Windows.Documents.FlowDocument.ColumnRuleWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefColumnWidth = System.Windows.Documents.FlowDocument.ColumnWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFlowDirection = System.Windows.Documents.FlowDocument.FlowDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.FlowDirection
  static let _DefFontFamily = System.Windows.Documents.FlowDocument.FontFamilyProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FontFamily
  static let _DefFontSize = System.Windows.Documents.FlowDocument.FontSizeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontStretch = System.Windows.Documents.FlowDocument.FontStretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStretch
  static let _DefFontStyle = System.Windows.Documents.FlowDocument.FontStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStyle
  static let _DefFontWeight = System.Windows.Documents.FlowDocument.FontWeightProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontWeight
  static let _DefForeground = System.Windows.Documents.FlowDocument.ForegroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefIsColumnWidthFlexible = System.Windows.Documents.FlowDocument.IsColumnWidthFlexibleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsHyphenationEnabled = System.Windows.Documents.FlowDocument.IsHyphenationEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsOptimalParagraphEnabled = System.Windows.Documents.FlowDocument.IsOptimalParagraphEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefLineHeight = System.Windows.Documents.FlowDocument.LineHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLineStackingStrategy = System.Windows.Documents.FlowDocument.LineStackingStrategyProperty.DefaultMetadata.DefaultValue :?> System.Windows.LineStackingStrategy
  static let _DefMaxPageHeight = System.Windows.Documents.FlowDocument.MaxPageHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMaxPageWidth = System.Windows.Documents.FlowDocument.MaxPageWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinPageHeight = System.Windows.Documents.FlowDocument.MinPageHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinPageWidth = System.Windows.Documents.FlowDocument.MinPageWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPageHeight = System.Windows.Documents.FlowDocument.PageHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPagePadding = System.Windows.Documents.FlowDocument.PagePaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefPageWidth = System.Windows.Documents.FlowDocument.PageWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefTextAlignment = System.Windows.Documents.FlowDocument.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment
  static let _DefTextEffects = System.Windows.Documents.FlowDocument.TextEffectsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.TextEffectCollection

  do setProps this

  new() = FlowDocument(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.FlowDocument voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.FlowDocument voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _ColumnGap: float voption
  member this.ColumnGap with set x = this._ColumnGap <- ValueSome x

  [<DefaultValue>] val mutable private _ColumnRuleBrush: Brush voption
  member this.ColumnRuleBrush with set x = this._ColumnRuleBrush <- ValueSome x

  [<DefaultValue>] val mutable private _ColumnRuleWidth: float voption
  member this.ColumnRuleWidth with set x = this._ColumnRuleWidth <- ValueSome x

  [<DefaultValue>] val mutable private _ColumnWidth: float voption
  member this.ColumnWidth with set x = this._ColumnWidth <- ValueSome x

  [<DefaultValue>] val mutable private _FlowDirection: System.Windows.FlowDirection voption
  member this.FlowDirection with set x = this._FlowDirection <- ValueSome x

  [<DefaultValue>] val mutable private _FontFamily: System.Windows.Media.FontFamily voption
  member this.FontFamily with set x = this._FontFamily <- ValueSome x

  [<DefaultValue>] val mutable private _FontSize: float voption
  member this.FontSize with set x = this._FontSize <- ValueSome x

  [<DefaultValue>] val mutable private _FontStretch: System.Windows.FontStretch voption
  member this.FontStretch with set x = this._FontStretch <- ValueSome x

  [<DefaultValue>] val mutable private _FontStyle: System.Windows.FontStyle voption
  member this.FontStyle with set x = this._FontStyle <- ValueSome x

  [<DefaultValue>] val mutable private _FontWeight: System.Windows.FontWeight voption
  member this.FontWeight with set x = this._FontWeight <- ValueSome x

  [<DefaultValue>] val mutable private _Foreground: Brush voption
  member this.Foreground with set x = this._Foreground <- ValueSome x

  [<DefaultValue>] val mutable private _IsColumnWidthFlexible: bool voption
  member this.IsColumnWidthFlexible with set x = this._IsColumnWidthFlexible <- ValueSome x

  [<DefaultValue>] val mutable private _IsHyphenationEnabled: bool voption
  member this.IsHyphenationEnabled with set x = this._IsHyphenationEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsOptimalParagraphEnabled: bool voption
  member this.IsOptimalParagraphEnabled with set x = this._IsOptimalParagraphEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _LineHeight: float voption
  member this.LineHeight with set x = this._LineHeight <- ValueSome x

  [<DefaultValue>] val mutable private _LineStackingStrategy: System.Windows.LineStackingStrategy voption
  member this.LineStackingStrategy with set x = this._LineStackingStrategy <- ValueSome x

  [<DefaultValue>] val mutable private _MaxPageHeight: float voption
  member this.MaxPageHeight with set x = this._MaxPageHeight <- ValueSome x

  [<DefaultValue>] val mutable private _MaxPageWidth: float voption
  member this.MaxPageWidth with set x = this._MaxPageWidth <- ValueSome x

  [<DefaultValue>] val mutable private _MinPageHeight: float voption
  member this.MinPageHeight with set x = this._MinPageHeight <- ValueSome x

  [<DefaultValue>] val mutable private _MinPageWidth: float voption
  member this.MinPageWidth with set x = this._MinPageWidth <- ValueSome x

  [<DefaultValue>] val mutable private _PageHeight: float voption
  member this.PageHeight with set x = this._PageHeight <- ValueSome x

  [<DefaultValue>] val mutable private _PagePadding: System.Windows.Thickness voption
  member this.PagePadding with set x = this._PagePadding <- ValueSome x

  [<DefaultValue>] val mutable private _PageWidth: float voption
  member this.PageWidth with set x = this._PageWidth <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _TextEffects: TextEffectCollection voption
  member this.TextEffects with set x = this._TextEffects <- ValueSome x

  [<DefaultValue>] val mutable private _Blocks: Block list voption
  member this.Blocks with set x = this._Blocks <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.FlowDocument> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.FlowDocument) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._ColumnGap |> ValueOption.iter (fun x -> v.ColumnGap <- x)
    this._ColumnRuleBrush |> ValueOption.iter (fun x -> v.ColumnRuleBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._ColumnRuleWidth |> ValueOption.iter (fun x -> v.ColumnRuleWidth <- x)
    this._ColumnWidth |> ValueOption.iter (fun x -> v.ColumnWidth <- x)
    this._FlowDirection |> ValueOption.iter (fun x -> v.FlowDirection <- x)
    this._FontFamily |> ValueOption.iter (fun x -> v.FontFamily <- x)
    this._FontSize |> ValueOption.iter (fun x -> v.FontSize <- x)
    this._FontStretch |> ValueOption.iter (fun x -> v.FontStretch <- x)
    this._FontStyle |> ValueOption.iter (fun x -> v.FontStyle <- x)
    this._FontWeight |> ValueOption.iter (fun x -> v.FontWeight <- x)
    this._Foreground |> ValueOption.iter (fun x -> v.Foreground <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._IsColumnWidthFlexible |> ValueOption.iter (fun x -> v.IsColumnWidthFlexible <- x)
    this._IsHyphenationEnabled |> ValueOption.iter (fun x -> v.IsHyphenationEnabled <- x)
    this._IsOptimalParagraphEnabled |> ValueOption.iter (fun x -> v.IsOptimalParagraphEnabled <- x)
    this._LineHeight |> ValueOption.iter (fun x -> v.LineHeight <- x)
    this._LineStackingStrategy |> ValueOption.iter (fun x -> v.LineStackingStrategy <- x)
    this._MaxPageHeight |> ValueOption.iter (fun x -> v.MaxPageHeight <- x)
    this._MaxPageWidth |> ValueOption.iter (fun x -> v.MaxPageWidth <- x)
    this._MinPageHeight |> ValueOption.iter (fun x -> v.MinPageHeight <- x)
    this._MinPageWidth |> ValueOption.iter (fun x -> v.MinPageWidth <- x)
    this._PageHeight |> ValueOption.iter (fun x -> v.PageHeight <- x)
    this._PagePadding |> ValueOption.iter (fun x -> v.PagePadding <- x)
    this._PageWidth |> ValueOption.iter (fun x -> v.PageWidth <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._TextEffects |> ValueOption.iter (fun x -> v.TextEffects <- x.RenderNew () :?> System.Windows.Media.TextEffectCollection)
    this._Blocks |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Block |> v.Blocks.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FlowDocument, v: System.Windows.Documents.FlowDocument) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefColumnGap prev._ColumnGap this._ColumnGap id (fun x -> v.ColumnGap <- x)
    updateValue _DefColumnRuleBrush prev._ColumnRuleBrush this._ColumnRuleBrush id (fun x -> v.ColumnRuleBrush <- x)
    updateValue _DefColumnRuleWidth prev._ColumnRuleWidth this._ColumnRuleWidth id (fun x -> v.ColumnRuleWidth <- x)
    updateValue _DefColumnWidth prev._ColumnWidth this._ColumnWidth id (fun x -> v.ColumnWidth <- x)
    updateValue _DefFlowDirection prev._FlowDirection this._FlowDirection id (fun x -> v.FlowDirection <- x)
    updateValue _DefFontFamily prev._FontFamily this._FontFamily id (fun x -> v.FontFamily <- x)
    updateValue _DefFontSize prev._FontSize this._FontSize id (fun x -> v.FontSize <- x)
    updateValue _DefFontStretch prev._FontStretch this._FontStretch id (fun x -> v.FontStretch <- x)
    updateValue _DefFontStyle prev._FontStyle this._FontStyle id (fun x -> v.FontStyle <- x)
    updateValue _DefFontWeight prev._FontWeight this._FontWeight id (fun x -> v.FontWeight <- x)
    updateValue _DefForeground prev._Foreground this._Foreground id (fun x -> v.Foreground <- x)
    updateValue _DefIsColumnWidthFlexible prev._IsColumnWidthFlexible this._IsColumnWidthFlexible id (fun x -> v.IsColumnWidthFlexible <- x)
    updateValue _DefIsHyphenationEnabled prev._IsHyphenationEnabled this._IsHyphenationEnabled id (fun x -> v.IsHyphenationEnabled <- x)
    updateValue _DefIsOptimalParagraphEnabled prev._IsOptimalParagraphEnabled this._IsOptimalParagraphEnabled id (fun x -> v.IsOptimalParagraphEnabled <- x)
    updateValue _DefLineHeight prev._LineHeight this._LineHeight id (fun x -> v.LineHeight <- x)
    updateValue _DefLineStackingStrategy prev._LineStackingStrategy this._LineStackingStrategy id (fun x -> v.LineStackingStrategy <- x)
    updateValue _DefMaxPageHeight prev._MaxPageHeight this._MaxPageHeight id (fun x -> v.MaxPageHeight <- x)
    updateValue _DefMaxPageWidth prev._MaxPageWidth this._MaxPageWidth id (fun x -> v.MaxPageWidth <- x)
    updateValue _DefMinPageHeight prev._MinPageHeight this._MinPageHeight id (fun x -> v.MinPageHeight <- x)
    updateValue _DefMinPageWidth prev._MinPageWidth this._MinPageWidth id (fun x -> v.MinPageWidth <- x)
    updateValue _DefPageHeight prev._PageHeight this._PageHeight id (fun x -> v.PageHeight <- x)
    updateValue _DefPagePadding prev._PagePadding this._PagePadding id (fun x -> v.PagePadding <- x)
    updateValue _DefPageWidth prev._PageWidth this._PageWidth id (fun x -> v.PageWidth <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateValue _DefTextEffects prev._TextEffects this._TextEffects id (fun x -> v.TextEffects <- x)
    updateChildren prev._Blocks this._Blocks v.Blocks
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.FlowDocument())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FlowDocument as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TableColumn(setProps: TableColumn -> unit) as this =
  inherit FrameworkContentElement()

  static let _DefBackground = System.Windows.Documents.TableColumn.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefWidth = System.Windows.Documents.TableColumn.WidthProperty.DefaultMetadata.DefaultValue :?> System.Windows.GridLength

  do setProps this

  new() = TableColumn(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.TableColumn voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.TableColumn voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _Width: System.Windows.GridLength voption
  member this.Width with set x = this._Width <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.TableColumn> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.TableColumn) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Width |> ValueOption.iter (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TableColumn, v: System.Windows.Documents.TableColumn) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefWidth prev._Width this._Width id (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.TableColumn())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TableColumn as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type TextElement() =
  inherit FrameworkContentElement()

  static let _DefBackground = System.Windows.Documents.TextElement.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefFontFamily = System.Windows.Documents.TextElement.FontFamilyProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FontFamily
  static let _DefFontSize = System.Windows.Documents.TextElement.FontSizeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontStretch = System.Windows.Documents.TextElement.FontStretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStretch
  static let _DefFontStyle = System.Windows.Documents.TextElement.FontStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStyle
  static let _DefFontWeight = System.Windows.Documents.TextElement.FontWeightProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontWeight
  static let _DefForeground = System.Windows.Documents.TextElement.ForegroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefTextEffects = System.Windows.Documents.TextElement.TextEffectsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.TextEffectCollection

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _FontFamily: System.Windows.Media.FontFamily voption
  member this.FontFamily with set x = this._FontFamily <- ValueSome x

  [<DefaultValue>] val mutable private _FontSize: float voption
  member this.FontSize with set x = this._FontSize <- ValueSome x

  [<DefaultValue>] val mutable private _FontStretch: System.Windows.FontStretch voption
  member this.FontStretch with set x = this._FontStretch <- ValueSome x

  [<DefaultValue>] val mutable private _FontStyle: System.Windows.FontStyle voption
  member this.FontStyle with set x = this._FontStyle <- ValueSome x

  [<DefaultValue>] val mutable private _FontWeight: System.Windows.FontWeight voption
  member this.FontWeight with set x = this._FontWeight <- ValueSome x

  [<DefaultValue>] val mutable private _Foreground: Brush voption
  member this.Foreground with set x = this._Foreground <- ValueSome x

  [<DefaultValue>] val mutable private _TextEffects: TextEffectCollection voption
  member this.TextEffects with set x = this._TextEffects <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.TextElement> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.TextElement) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._FontFamily |> ValueOption.iter (fun x -> v.FontFamily <- x)
    this._FontSize |> ValueOption.iter (fun x -> v.FontSize <- x)
    this._FontStretch |> ValueOption.iter (fun x -> v.FontStretch <- x)
    this._FontStyle |> ValueOption.iter (fun x -> v.FontStyle <- x)
    this._FontWeight |> ValueOption.iter (fun x -> v.FontWeight <- x)
    this._Foreground |> ValueOption.iter (fun x -> v.Foreground <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._TextEffects |> ValueOption.iter (fun x -> v.TextEffects <- x.RenderNew () :?> System.Windows.Media.TextEffectCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextElement, v: System.Windows.Documents.TextElement) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefFontFamily prev._FontFamily this._FontFamily id (fun x -> v.FontFamily <- x)
    updateValue _DefFontSize prev._FontSize this._FontSize id (fun x -> v.FontSize <- x)
    updateValue _DefFontStretch prev._FontStretch this._FontStretch id (fun x -> v.FontStretch <- x)
    updateValue _DefFontStyle prev._FontStyle this._FontStyle id (fun x -> v.FontStyle <- x)
    updateValue _DefFontWeight prev._FontWeight this._FontWeight id (fun x -> v.FontWeight <- x)
    updateValue _DefForeground prev._Foreground this._Foreground id (fun x -> v.Foreground <- x)
    updateValue _DefTextEffects prev._TextEffects this._TextEffects id (fun x -> v.TextEffects <- x)
    this.SilenceEvents <- false


[<AbstractClass>]
type Block() =
  inherit TextElement()

  static let _DefBorderBrush = System.Windows.Documents.Block.BorderBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderThickness = System.Windows.Documents.Block.BorderThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefBreakColumnBefore = System.Windows.Documents.Block.BreakColumnBeforeProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefBreakPageBefore = System.Windows.Documents.Block.BreakPageBeforeProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefClearFloaters = System.Windows.Documents.Block.ClearFloatersProperty.DefaultMetadata.DefaultValue :?> System.Windows.WrapDirection
  static let _DefFlowDirection = System.Windows.Documents.Block.FlowDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.FlowDirection
  static let _DefIsHyphenationEnabled = System.Windows.Documents.Block.IsHyphenationEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefLineHeight = System.Windows.Documents.Block.LineHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLineStackingStrategy = System.Windows.Documents.Block.LineStackingStrategyProperty.DefaultMetadata.DefaultValue :?> System.Windows.LineStackingStrategy
  static let _DefMargin = System.Windows.Documents.Block.MarginProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefPadding = System.Windows.Documents.Block.PaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefTextAlignment = System.Windows.Documents.Block.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment

  [<DefaultValue>] val mutable private _BorderBrush: Brush voption
  member this.BorderBrush with set x = this._BorderBrush <- ValueSome x

  [<DefaultValue>] val mutable private _BorderThickness: System.Windows.Thickness voption
  member this.BorderThickness with set x = this._BorderThickness <- ValueSome x

  [<DefaultValue>] val mutable private _BreakColumnBefore: bool voption
  member this.BreakColumnBefore with set x = this._BreakColumnBefore <- ValueSome x

  [<DefaultValue>] val mutable private _BreakPageBefore: bool voption
  member this.BreakPageBefore with set x = this._BreakPageBefore <- ValueSome x

  [<DefaultValue>] val mutable private _ClearFloaters: System.Windows.WrapDirection voption
  member this.ClearFloaters with set x = this._ClearFloaters <- ValueSome x

  [<DefaultValue>] val mutable private _FlowDirection: System.Windows.FlowDirection voption
  member this.FlowDirection with set x = this._FlowDirection <- ValueSome x

  [<DefaultValue>] val mutable private _IsHyphenationEnabled: bool voption
  member this.IsHyphenationEnabled with set x = this._IsHyphenationEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _LineHeight: float voption
  member this.LineHeight with set x = this._LineHeight <- ValueSome x

  [<DefaultValue>] val mutable private _LineStackingStrategy: System.Windows.LineStackingStrategy voption
  member this.LineStackingStrategy with set x = this._LineStackingStrategy <- ValueSome x

  [<DefaultValue>] val mutable private _Margin: System.Windows.Thickness voption
  member this.Margin with set x = this._Margin <- ValueSome x

  [<DefaultValue>] val mutable private _Padding: System.Windows.Thickness voption
  member this.Padding with set x = this._Padding <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _SiblingBlocks: Block list voption
  member this.SiblingBlocks with set x = this._SiblingBlocks <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Block> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Block) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BorderBrush |> ValueOption.iter (fun x -> v.BorderBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderThickness |> ValueOption.iter (fun x -> v.BorderThickness <- x)
    this._BreakColumnBefore |> ValueOption.iter (fun x -> v.BreakColumnBefore <- x)
    this._BreakPageBefore |> ValueOption.iter (fun x -> v.BreakPageBefore <- x)
    this._ClearFloaters |> ValueOption.iter (fun x -> v.ClearFloaters <- x)
    this._FlowDirection |> ValueOption.iter (fun x -> v.FlowDirection <- x)
    this._IsHyphenationEnabled |> ValueOption.iter (fun x -> v.IsHyphenationEnabled <- x)
    this._LineHeight |> ValueOption.iter (fun x -> v.LineHeight <- x)
    this._LineStackingStrategy |> ValueOption.iter (fun x -> v.LineStackingStrategy <- x)
    this._Margin |> ValueOption.iter (fun x -> v.Margin <- x)
    this._Padding |> ValueOption.iter (fun x -> v.Padding <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._SiblingBlocks |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Block |> v.SiblingBlocks.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Block, v: System.Windows.Documents.Block) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBorderBrush prev._BorderBrush this._BorderBrush id (fun x -> v.BorderBrush <- x)
    updateValue _DefBorderThickness prev._BorderThickness this._BorderThickness id (fun x -> v.BorderThickness <- x)
    updateValue _DefBreakColumnBefore prev._BreakColumnBefore this._BreakColumnBefore id (fun x -> v.BreakColumnBefore <- x)
    updateValue _DefBreakPageBefore prev._BreakPageBefore this._BreakPageBefore id (fun x -> v.BreakPageBefore <- x)
    updateValue _DefClearFloaters prev._ClearFloaters this._ClearFloaters id (fun x -> v.ClearFloaters <- x)
    updateValue _DefFlowDirection prev._FlowDirection this._FlowDirection id (fun x -> v.FlowDirection <- x)
    updateValue _DefIsHyphenationEnabled prev._IsHyphenationEnabled this._IsHyphenationEnabled id (fun x -> v.IsHyphenationEnabled <- x)
    updateValue _DefLineHeight prev._LineHeight this._LineHeight id (fun x -> v.LineHeight <- x)
    updateValue _DefLineStackingStrategy prev._LineStackingStrategy this._LineStackingStrategy id (fun x -> v.LineStackingStrategy <- x)
    updateValue _DefMargin prev._Margin this._Margin id (fun x -> v.Margin <- x)
    updateValue _DefPadding prev._Padding this._Padding id (fun x -> v.Padding <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateChildren prev._SiblingBlocks this._SiblingBlocks v.SiblingBlocks
    this.SilenceEvents <- false


type BlockUIContainer(setProps: BlockUIContainer -> unit) as this =
  inherit Block()


  do setProps this

  new() = BlockUIContainer(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.BlockUIContainer voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.BlockUIContainer voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Child: UIElement voption
  member this.Child with set x = this._Child <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.BlockUIContainer> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.BlockUIContainer) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Child |> ValueOption.iter (fun x -> v.Child <- x.RenderNew () :?> System.Windows.UIElement)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BlockUIContainer, v: System.Windows.Documents.BlockUIContainer) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.UIElement> prev._Child this._Child id (fun x -> v.Child <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.BlockUIContainer())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BlockUIContainer as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type List(setProps: List -> unit) as this =
  inherit Block()

  static let _DefMarkerOffset = System.Windows.Documents.List.MarkerOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMarkerStyle = System.Windows.Documents.List.MarkerStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextMarkerStyle
  static let _DefStartIndex = System.Windows.Documents.List.StartIndexProperty.DefaultMetadata.DefaultValue :?> int

  do setProps this

  new() = List(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.List voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.List voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _MarkerOffset: float voption
  member this.MarkerOffset with set x = this._MarkerOffset <- ValueSome x

  [<DefaultValue>] val mutable private _MarkerStyle: System.Windows.TextMarkerStyle voption
  member this.MarkerStyle with set x = this._MarkerStyle <- ValueSome x

  [<DefaultValue>] val mutable private _StartIndex: int voption
  member this.StartIndex with set x = this._StartIndex <- ValueSome x

  [<DefaultValue>] val mutable private _ListItems: ListItem list voption
  member this.ListItems with set x = this._ListItems <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.List> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.List) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._MarkerOffset |> ValueOption.iter (fun x -> v.MarkerOffset <- x)
    this._MarkerStyle |> ValueOption.iter (fun x -> v.MarkerStyle <- x)
    this._StartIndex |> ValueOption.iter (fun x -> v.StartIndex <- x)
    this._ListItems |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.ListItem |> v.ListItems.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: List, v: System.Windows.Documents.List) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefMarkerOffset prev._MarkerOffset this._MarkerOffset id (fun x -> v.MarkerOffset <- x)
    updateValue _DefMarkerStyle prev._MarkerStyle this._MarkerStyle id (fun x -> v.MarkerStyle <- x)
    updateValue _DefStartIndex prev._StartIndex this._StartIndex id (fun x -> v.StartIndex <- x)
    updateChildren prev._ListItems this._ListItems v.ListItems
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.List())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? List as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Paragraph(setProps: Paragraph -> unit) as this =
  inherit Block()

  static let _DefKeepTogether = System.Windows.Documents.Paragraph.KeepTogetherProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefKeepWithNext = System.Windows.Documents.Paragraph.KeepWithNextProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMinOrphanLines = System.Windows.Documents.Paragraph.MinOrphanLinesProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefMinWidowLines = System.Windows.Documents.Paragraph.MinWidowLinesProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefTextDecorations = System.Windows.Documents.Paragraph.TextDecorationsProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationCollection
  static let _DefTextIndent = System.Windows.Documents.Paragraph.TextIndentProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Paragraph(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Paragraph voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Paragraph voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeepTogether: bool voption
  member this.KeepTogether with set x = this._KeepTogether <- ValueSome x

  [<DefaultValue>] val mutable private _KeepWithNext: bool voption
  member this.KeepWithNext with set x = this._KeepWithNext <- ValueSome x

  [<DefaultValue>] val mutable private _MinOrphanLines: int voption
  member this.MinOrphanLines with set x = this._MinOrphanLines <- ValueSome x

  [<DefaultValue>] val mutable private _MinWidowLines: int voption
  member this.MinWidowLines with set x = this._MinWidowLines <- ValueSome x

  [<DefaultValue>] val mutable private _TextDecorations: TextDecorationCollection voption
  member this.TextDecorations with set x = this._TextDecorations <- ValueSome x

  [<DefaultValue>] val mutable private _TextIndent: float voption
  member this.TextIndent with set x = this._TextIndent <- ValueSome x

  [<DefaultValue>] val mutable private _Inlines: Inline list voption
  member this.Inlines with set x = this._Inlines <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Paragraph> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Paragraph) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeepTogether |> ValueOption.iter (fun x -> v.KeepTogether <- x)
    this._KeepWithNext |> ValueOption.iter (fun x -> v.KeepWithNext <- x)
    this._MinOrphanLines |> ValueOption.iter (fun x -> v.MinOrphanLines <- x)
    this._MinWidowLines |> ValueOption.iter (fun x -> v.MinWidowLines <- x)
    this._TextDecorations |> ValueOption.iter (fun x -> v.TextDecorations <- x.RenderNew () :?> System.Windows.TextDecorationCollection)
    this._TextIndent |> ValueOption.iter (fun x -> v.TextIndent <- x)
    this._Inlines |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Inline |> v.Inlines.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Paragraph, v: System.Windows.Documents.Paragraph) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeepTogether prev._KeepTogether this._KeepTogether id (fun x -> v.KeepTogether <- x)
    updateValue _DefKeepWithNext prev._KeepWithNext this._KeepWithNext id (fun x -> v.KeepWithNext <- x)
    updateValue _DefMinOrphanLines prev._MinOrphanLines this._MinOrphanLines id (fun x -> v.MinOrphanLines <- x)
    updateValue _DefMinWidowLines prev._MinWidowLines this._MinWidowLines id (fun x -> v.MinWidowLines <- x)
    updateValue _DefTextDecorations prev._TextDecorations this._TextDecorations id (fun x -> v.TextDecorations <- x)
    updateValue _DefTextIndent prev._TextIndent this._TextIndent id (fun x -> v.TextIndent <- x)
    updateChildren prev._Inlines this._Inlines v.Inlines
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Paragraph())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Paragraph as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Section(setProps: Section -> unit) as this =
  inherit Block()


  do setProps this

  new() = Section(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Section voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Section voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _HasTrailingParagraphBreakOnPaste: bool voption
  member this.HasTrailingParagraphBreakOnPaste with set x = this._HasTrailingParagraphBreakOnPaste <- ValueSome x

  [<DefaultValue>] val mutable private _Blocks: Block list voption
  member this.Blocks with set x = this._Blocks <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Section> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Section) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._HasTrailingParagraphBreakOnPaste |> ValueOption.iter (fun x -> v.HasTrailingParagraphBreakOnPaste <- x)
    this._Blocks |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Block |> v.Blocks.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Section, v: System.Windows.Documents.Section) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._HasTrailingParagraphBreakOnPaste this._HasTrailingParagraphBreakOnPaste id (fun x -> v.HasTrailingParagraphBreakOnPaste <- x)
    updateChildren prev._Blocks this._Blocks v.Blocks
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Section())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Section as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Table(setProps: Table -> unit) as this =
  inherit Block()

  static let _DefCellSpacing = System.Windows.Documents.Table.CellSpacingProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Table(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Table voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Table voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CellSpacing: float voption
  member this.CellSpacing with set x = this._CellSpacing <- ValueSome x

  [<DefaultValue>] val mutable private _Columns: TableColumn list voption
  member this.Columns with set x = this._Columns <- ValueSome x

  [<DefaultValue>] val mutable private _RowGroups: TableRowGroup list voption
  member this.RowGroups with set x = this._RowGroups <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Table> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Table) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CellSpacing |> ValueOption.iter (fun x -> v.CellSpacing <- x)
    this._Columns |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.TableColumn |> v.Columns.Add |> ignore))
    this._RowGroups |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.TableRowGroup |> v.RowGroups.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Table, v: System.Windows.Documents.Table) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCellSpacing prev._CellSpacing this._CellSpacing id (fun x -> v.CellSpacing <- x)
    updateChildren prev._Columns this._Columns v.Columns
    updateChildren prev._RowGroups this._RowGroups v.RowGroups
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Table())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Table as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Inline() =
  inherit TextElement()

  static let _DefBaselineAlignment = System.Windows.Documents.Inline.BaselineAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.BaselineAlignment
  static let _DefFlowDirection = System.Windows.Documents.Inline.FlowDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.FlowDirection
  static let _DefTextDecorations = System.Windows.Documents.Inline.TextDecorationsProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationCollection

  [<DefaultValue>] val mutable private _BaselineAlignment: System.Windows.BaselineAlignment voption
  member this.BaselineAlignment with set x = this._BaselineAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _FlowDirection: System.Windows.FlowDirection voption
  member this.FlowDirection with set x = this._FlowDirection <- ValueSome x

  [<DefaultValue>] val mutable private _TextDecorations: TextDecorationCollection voption
  member this.TextDecorations with set x = this._TextDecorations <- ValueSome x

  [<DefaultValue>] val mutable private _SiblingInlines: Inline list voption
  member this.SiblingInlines with set x = this._SiblingInlines <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Inline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Inline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BaselineAlignment |> ValueOption.iter (fun x -> v.BaselineAlignment <- x)
    this._FlowDirection |> ValueOption.iter (fun x -> v.FlowDirection <- x)
    this._TextDecorations |> ValueOption.iter (fun x -> v.TextDecorations <- x.RenderNew () :?> System.Windows.TextDecorationCollection)
    this._SiblingInlines |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Inline |> v.SiblingInlines.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Inline, v: System.Windows.Documents.Inline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBaselineAlignment prev._BaselineAlignment this._BaselineAlignment id (fun x -> v.BaselineAlignment <- x)
    updateValue _DefFlowDirection prev._FlowDirection this._FlowDirection id (fun x -> v.FlowDirection <- x)
    updateValue _DefTextDecorations prev._TextDecorations this._TextDecorations id (fun x -> v.TextDecorations <- x)
    updateChildren prev._SiblingInlines this._SiblingInlines v.SiblingInlines
    this.SilenceEvents <- false


[<AbstractClass>]
type AnchoredBlock() =
  inherit Inline()

  static let _DefBorderBrush = System.Windows.Documents.AnchoredBlock.BorderBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderThickness = System.Windows.Documents.AnchoredBlock.BorderThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefLineHeight = System.Windows.Documents.AnchoredBlock.LineHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLineStackingStrategy = System.Windows.Documents.AnchoredBlock.LineStackingStrategyProperty.DefaultMetadata.DefaultValue :?> System.Windows.LineStackingStrategy
  static let _DefMargin = System.Windows.Documents.AnchoredBlock.MarginProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefPadding = System.Windows.Documents.AnchoredBlock.PaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefTextAlignment = System.Windows.Documents.AnchoredBlock.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment

  [<DefaultValue>] val mutable private _BorderBrush: Brush voption
  member this.BorderBrush with set x = this._BorderBrush <- ValueSome x

  [<DefaultValue>] val mutable private _BorderThickness: System.Windows.Thickness voption
  member this.BorderThickness with set x = this._BorderThickness <- ValueSome x

  [<DefaultValue>] val mutable private _LineHeight: float voption
  member this.LineHeight with set x = this._LineHeight <- ValueSome x

  [<DefaultValue>] val mutable private _LineStackingStrategy: System.Windows.LineStackingStrategy voption
  member this.LineStackingStrategy with set x = this._LineStackingStrategy <- ValueSome x

  [<DefaultValue>] val mutable private _Margin: System.Windows.Thickness voption
  member this.Margin with set x = this._Margin <- ValueSome x

  [<DefaultValue>] val mutable private _Padding: System.Windows.Thickness voption
  member this.Padding with set x = this._Padding <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _Blocks: Block list voption
  member this.Blocks with set x = this._Blocks <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.AnchoredBlock> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.AnchoredBlock) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BorderBrush |> ValueOption.iter (fun x -> v.BorderBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderThickness |> ValueOption.iter (fun x -> v.BorderThickness <- x)
    this._LineHeight |> ValueOption.iter (fun x -> v.LineHeight <- x)
    this._LineStackingStrategy |> ValueOption.iter (fun x -> v.LineStackingStrategy <- x)
    this._Margin |> ValueOption.iter (fun x -> v.Margin <- x)
    this._Padding |> ValueOption.iter (fun x -> v.Padding <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._Blocks |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Block |> v.Blocks.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: AnchoredBlock, v: System.Windows.Documents.AnchoredBlock) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBorderBrush prev._BorderBrush this._BorderBrush id (fun x -> v.BorderBrush <- x)
    updateValue _DefBorderThickness prev._BorderThickness this._BorderThickness id (fun x -> v.BorderThickness <- x)
    updateValue _DefLineHeight prev._LineHeight this._LineHeight id (fun x -> v.LineHeight <- x)
    updateValue _DefLineStackingStrategy prev._LineStackingStrategy this._LineStackingStrategy id (fun x -> v.LineStackingStrategy <- x)
    updateValue _DefMargin prev._Margin this._Margin id (fun x -> v.Margin <- x)
    updateValue _DefPadding prev._Padding this._Padding id (fun x -> v.Padding <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateChildren prev._Blocks this._Blocks v.Blocks
    this.SilenceEvents <- false


type Figure(setProps: Figure -> unit) as this =
  inherit AnchoredBlock()

  static let _DefCanDelayPlacement = System.Windows.Documents.Figure.CanDelayPlacementProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefHeight = System.Windows.Documents.Figure.HeightProperty.DefaultMetadata.DefaultValue :?> System.Windows.FigureLength
  static let _DefHorizontalAnchor = System.Windows.Documents.Figure.HorizontalAnchorProperty.DefaultMetadata.DefaultValue :?> System.Windows.FigureHorizontalAnchor
  static let _DefHorizontalOffset = System.Windows.Documents.Figure.HorizontalOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefVerticalAnchor = System.Windows.Documents.Figure.VerticalAnchorProperty.DefaultMetadata.DefaultValue :?> System.Windows.FigureVerticalAnchor
  static let _DefVerticalOffset = System.Windows.Documents.Figure.VerticalOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefWidth = System.Windows.Documents.Figure.WidthProperty.DefaultMetadata.DefaultValue :?> System.Windows.FigureLength
  static let _DefWrapDirection = System.Windows.Documents.Figure.WrapDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.WrapDirection

  do setProps this

  new() = Figure(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Figure voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Figure voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CanDelayPlacement: bool voption
  member this.CanDelayPlacement with set x = this._CanDelayPlacement <- ValueSome x

  [<DefaultValue>] val mutable private _Height: System.Windows.FigureLength voption
  member this.Height with set x = this._Height <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalAnchor: System.Windows.FigureHorizontalAnchor voption
  member this.HorizontalAnchor with set x = this._HorizontalAnchor <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalOffset: float voption
  member this.HorizontalOffset with set x = this._HorizontalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalAnchor: System.Windows.FigureVerticalAnchor voption
  member this.VerticalAnchor with set x = this._VerticalAnchor <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalOffset: float voption
  member this.VerticalOffset with set x = this._VerticalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _Width: System.Windows.FigureLength voption
  member this.Width with set x = this._Width <- ValueSome x

  [<DefaultValue>] val mutable private _WrapDirection: System.Windows.WrapDirection voption
  member this.WrapDirection with set x = this._WrapDirection <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Figure> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Figure) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CanDelayPlacement |> ValueOption.iter (fun x -> v.CanDelayPlacement <- x)
    this._Height |> ValueOption.iter (fun x -> v.Height <- x)
    this._HorizontalAnchor |> ValueOption.iter (fun x -> v.HorizontalAnchor <- x)
    this._HorizontalOffset |> ValueOption.iter (fun x -> v.HorizontalOffset <- x)
    this._VerticalAnchor |> ValueOption.iter (fun x -> v.VerticalAnchor <- x)
    this._VerticalOffset |> ValueOption.iter (fun x -> v.VerticalOffset <- x)
    this._Width |> ValueOption.iter (fun x -> v.Width <- x)
    this._WrapDirection |> ValueOption.iter (fun x -> v.WrapDirection <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Figure, v: System.Windows.Documents.Figure) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCanDelayPlacement prev._CanDelayPlacement this._CanDelayPlacement id (fun x -> v.CanDelayPlacement <- x)
    updateValue _DefHeight prev._Height this._Height id (fun x -> v.Height <- x)
    updateValue _DefHorizontalAnchor prev._HorizontalAnchor this._HorizontalAnchor id (fun x -> v.HorizontalAnchor <- x)
    updateValue _DefHorizontalOffset prev._HorizontalOffset this._HorizontalOffset id (fun x -> v.HorizontalOffset <- x)
    updateValue _DefVerticalAnchor prev._VerticalAnchor this._VerticalAnchor id (fun x -> v.VerticalAnchor <- x)
    updateValue _DefVerticalOffset prev._VerticalOffset this._VerticalOffset id (fun x -> v.VerticalOffset <- x)
    updateValue _DefWidth prev._Width this._Width id (fun x -> v.Width <- x)
    updateValue _DefWrapDirection prev._WrapDirection this._WrapDirection id (fun x -> v.WrapDirection <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Figure())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Figure as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Floater(setProps: Floater -> unit) as this =
  inherit AnchoredBlock()

  static let _DefHorizontalAlignment = System.Windows.Documents.Floater.HorizontalAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.HorizontalAlignment
  static let _DefWidth = System.Windows.Documents.Floater.WidthProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Floater(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Floater voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Floater voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalAlignment: System.Windows.HorizontalAlignment voption
  member this.HorizontalAlignment with set x = this._HorizontalAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _Width: float voption
  member this.Width with set x = this._Width <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Floater> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Floater) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._HorizontalAlignment |> ValueOption.iter (fun x -> v.HorizontalAlignment <- x)
    this._Width |> ValueOption.iter (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Floater, v: System.Windows.Documents.Floater) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefHorizontalAlignment prev._HorizontalAlignment this._HorizontalAlignment id (fun x -> v.HorizontalAlignment <- x)
    updateValue _DefWidth prev._Width this._Width id (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Floater())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Floater as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type InlineUIContainer(setProps: InlineUIContainer -> unit) as this =
  inherit Inline()


  do setProps this

  new() = InlineUIContainer(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.InlineUIContainer voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.InlineUIContainer voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Child: UIElement voption
  member this.Child with set x = this._Child <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.InlineUIContainer> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.InlineUIContainer) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Child |> ValueOption.iter (fun x -> v.Child <- x.RenderNew () :?> System.Windows.UIElement)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: InlineUIContainer, v: System.Windows.Documents.InlineUIContainer) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.UIElement> prev._Child this._Child id (fun x -> v.Child <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.InlineUIContainer())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? InlineUIContainer as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LineBreak(setProps: LineBreak -> unit) as this =
  inherit Inline()


  do setProps this

  new() = LineBreak(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.LineBreak voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.LineBreak voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.LineBreak> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.LineBreak) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LineBreak, v: System.Windows.Documents.LineBreak) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.LineBreak())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LineBreak as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Run(setProps: Run -> unit) as this =
  inherit Inline()

  static let _DefText = System.Windows.Documents.Run.TextProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = Run(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Run voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Run voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Text: string voption
  member this.Text with set x = this._Text <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Run> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Run) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Text |> ValueOption.iter (fun x -> v.Text <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Run, v: System.Windows.Documents.Run) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefText prev._Text this._Text id (fun x -> v.Text <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Run())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Run as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Span(setProps: Span -> unit) as this =
  inherit Inline()


  do setProps this

  new() = Span(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Span voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Span voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Inlines: Inline list voption
  member this.Inlines with set x = this._Inlines <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Span> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Span) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Inlines |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Inline |> v.Inlines.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Span, v: System.Windows.Documents.Span) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Inlines this._Inlines v.Inlines
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Span())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Span as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Bold(setProps: Bold -> unit) as this =
  inherit Span()


  do setProps this

  new() = Bold(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Bold voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Bold voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Bold> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Bold) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Bold, v: System.Windows.Documents.Bold) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Bold())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Bold as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Hyperlink(setProps: Hyperlink -> unit) as this =
  inherit Span()

  static let _DefNavigateUri = System.Windows.Documents.Hyperlink.NavigateUriProperty.DefaultMetadata.DefaultValue :?> System.Uri
  static let _DefTargetName = System.Windows.Documents.Hyperlink.TargetNameProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = Hyperlink(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Hyperlink voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Hyperlink voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _NavigateUri: System.Uri voption
  member this.NavigateUri with set x = this._NavigateUri <- ValueSome x

  [<DefaultValue>] val mutable private _TargetName: string voption
  member this.TargetName with set x = this._TargetName <- ValueSome x

  [<DefaultValue>] val mutable private _Click: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Click with set x = this._Click <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _RequestNavigate: EventHandlerWrapper<System.Windows.Navigation.RequestNavigateEventArgs> voption
  member this.RequestNavigate with set x = this._RequestNavigate <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Hyperlink> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Hyperlink) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._NavigateUri |> ValueOption.iter (fun x -> v.NavigateUri <- x)
    this._TargetName |> ValueOption.iter (fun x -> v.TargetName <- x)
    this._Click |> ValueOption.iter (fun x -> x.Subscription <- v.Click.Subscribe x.Fn)
    this._RequestNavigate |> ValueOption.iter (fun x -> x.Subscription <- v.RequestNavigate.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Hyperlink, v: System.Windows.Documents.Hyperlink) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefNavigateUri prev._NavigateUri this._NavigateUri id (fun x -> v.NavigateUri <- x)
    updateValue _DefTargetName prev._TargetName this._TargetName id (fun x -> v.TargetName <- x)
    updateFn prev._Click this._Click v.Click
    updateFn prev._RequestNavigate this._RequestNavigate v.RequestNavigate
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Hyperlink())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Hyperlink as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Italic(setProps: Italic -> unit) as this =
  inherit Span()


  do setProps this

  new() = Italic(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Italic voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Italic voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Italic> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Italic) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Italic, v: System.Windows.Documents.Italic) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Italic())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Italic as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Underline(setProps: Underline -> unit) as this =
  inherit Span()


  do setProps this

  new() = Underline(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Underline voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Underline voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Underline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Underline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Underline, v: System.Windows.Documents.Underline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Underline())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Underline as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ListItem(setProps: ListItem -> unit) as this =
  inherit TextElement()

  static let _DefBorderBrush = System.Windows.Documents.ListItem.BorderBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderThickness = System.Windows.Documents.ListItem.BorderThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefFlowDirection = System.Windows.Documents.ListItem.FlowDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.FlowDirection
  static let _DefLineHeight = System.Windows.Documents.ListItem.LineHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLineStackingStrategy = System.Windows.Documents.ListItem.LineStackingStrategyProperty.DefaultMetadata.DefaultValue :?> System.Windows.LineStackingStrategy
  static let _DefMargin = System.Windows.Documents.ListItem.MarginProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefPadding = System.Windows.Documents.ListItem.PaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefTextAlignment = System.Windows.Documents.ListItem.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment

  do setProps this

  new() = ListItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.ListItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.ListItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _BorderBrush: Brush voption
  member this.BorderBrush with set x = this._BorderBrush <- ValueSome x

  [<DefaultValue>] val mutable private _BorderThickness: System.Windows.Thickness voption
  member this.BorderThickness with set x = this._BorderThickness <- ValueSome x

  [<DefaultValue>] val mutable private _FlowDirection: System.Windows.FlowDirection voption
  member this.FlowDirection with set x = this._FlowDirection <- ValueSome x

  [<DefaultValue>] val mutable private _LineHeight: float voption
  member this.LineHeight with set x = this._LineHeight <- ValueSome x

  [<DefaultValue>] val mutable private _LineStackingStrategy: System.Windows.LineStackingStrategy voption
  member this.LineStackingStrategy with set x = this._LineStackingStrategy <- ValueSome x

  [<DefaultValue>] val mutable private _Margin: System.Windows.Thickness voption
  member this.Margin with set x = this._Margin <- ValueSome x

  [<DefaultValue>] val mutable private _Padding: System.Windows.Thickness voption
  member this.Padding with set x = this._Padding <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _Blocks: Block list voption
  member this.Blocks with set x = this._Blocks <- ValueSome x

  [<DefaultValue>] val mutable private _SiblingListItems: ListItem list voption
  member this.SiblingListItems with set x = this._SiblingListItems <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.ListItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.ListItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BorderBrush |> ValueOption.iter (fun x -> v.BorderBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderThickness |> ValueOption.iter (fun x -> v.BorderThickness <- x)
    this._FlowDirection |> ValueOption.iter (fun x -> v.FlowDirection <- x)
    this._LineHeight |> ValueOption.iter (fun x -> v.LineHeight <- x)
    this._LineStackingStrategy |> ValueOption.iter (fun x -> v.LineStackingStrategy <- x)
    this._Margin |> ValueOption.iter (fun x -> v.Margin <- x)
    this._Padding |> ValueOption.iter (fun x -> v.Padding <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._Blocks |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Block |> v.Blocks.Add |> ignore))
    this._SiblingListItems |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.ListItem |> v.SiblingListItems.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ListItem, v: System.Windows.Documents.ListItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBorderBrush prev._BorderBrush this._BorderBrush id (fun x -> v.BorderBrush <- x)
    updateValue _DefBorderThickness prev._BorderThickness this._BorderThickness id (fun x -> v.BorderThickness <- x)
    updateValue _DefFlowDirection prev._FlowDirection this._FlowDirection id (fun x -> v.FlowDirection <- x)
    updateValue _DefLineHeight prev._LineHeight this._LineHeight id (fun x -> v.LineHeight <- x)
    updateValue _DefLineStackingStrategy prev._LineStackingStrategy this._LineStackingStrategy id (fun x -> v.LineStackingStrategy <- x)
    updateValue _DefMargin prev._Margin this._Margin id (fun x -> v.Margin <- x)
    updateValue _DefPadding prev._Padding this._Padding id (fun x -> v.Padding <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateChildren prev._Blocks this._Blocks v.Blocks
    updateChildren prev._SiblingListItems this._SiblingListItems v.SiblingListItems
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.ListItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ListItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TableCell(setProps: TableCell -> unit) as this =
  inherit TextElement()

  static let _DefBorderBrush = System.Windows.Documents.TableCell.BorderBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderThickness = System.Windows.Documents.TableCell.BorderThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefColumnSpan = System.Windows.Documents.TableCell.ColumnSpanProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefFlowDirection = System.Windows.Documents.TableCell.FlowDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.FlowDirection
  static let _DefLineHeight = System.Windows.Documents.TableCell.LineHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLineStackingStrategy = System.Windows.Documents.TableCell.LineStackingStrategyProperty.DefaultMetadata.DefaultValue :?> System.Windows.LineStackingStrategy
  static let _DefPadding = System.Windows.Documents.TableCell.PaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefRowSpan = System.Windows.Documents.TableCell.RowSpanProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefTextAlignment = System.Windows.Documents.TableCell.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment

  do setProps this

  new() = TableCell(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.TableCell voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.TableCell voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _BorderBrush: Brush voption
  member this.BorderBrush with set x = this._BorderBrush <- ValueSome x

  [<DefaultValue>] val mutable private _BorderThickness: System.Windows.Thickness voption
  member this.BorderThickness with set x = this._BorderThickness <- ValueSome x

  [<DefaultValue>] val mutable private _ColumnSpan: int voption
  member this.ColumnSpan with set x = this._ColumnSpan <- ValueSome x

  [<DefaultValue>] val mutable private _FlowDirection: System.Windows.FlowDirection voption
  member this.FlowDirection with set x = this._FlowDirection <- ValueSome x

  [<DefaultValue>] val mutable private _LineHeight: float voption
  member this.LineHeight with set x = this._LineHeight <- ValueSome x

  [<DefaultValue>] val mutable private _LineStackingStrategy: System.Windows.LineStackingStrategy voption
  member this.LineStackingStrategy with set x = this._LineStackingStrategy <- ValueSome x

  [<DefaultValue>] val mutable private _Padding: System.Windows.Thickness voption
  member this.Padding with set x = this._Padding <- ValueSome x

  [<DefaultValue>] val mutable private _RowSpan: int voption
  member this.RowSpan with set x = this._RowSpan <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _Blocks: Block list voption
  member this.Blocks with set x = this._Blocks <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.TableCell> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.TableCell) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BorderBrush |> ValueOption.iter (fun x -> v.BorderBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderThickness |> ValueOption.iter (fun x -> v.BorderThickness <- x)
    this._ColumnSpan |> ValueOption.iter (fun x -> v.ColumnSpan <- x)
    this._FlowDirection |> ValueOption.iter (fun x -> v.FlowDirection <- x)
    this._LineHeight |> ValueOption.iter (fun x -> v.LineHeight <- x)
    this._LineStackingStrategy |> ValueOption.iter (fun x -> v.LineStackingStrategy <- x)
    this._Padding |> ValueOption.iter (fun x -> v.Padding <- x)
    this._RowSpan |> ValueOption.iter (fun x -> v.RowSpan <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._Blocks |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Block |> v.Blocks.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TableCell, v: System.Windows.Documents.TableCell) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBorderBrush prev._BorderBrush this._BorderBrush id (fun x -> v.BorderBrush <- x)
    updateValue _DefBorderThickness prev._BorderThickness this._BorderThickness id (fun x -> v.BorderThickness <- x)
    updateValue _DefColumnSpan prev._ColumnSpan this._ColumnSpan id (fun x -> v.ColumnSpan <- x)
    updateValue _DefFlowDirection prev._FlowDirection this._FlowDirection id (fun x -> v.FlowDirection <- x)
    updateValue _DefLineHeight prev._LineHeight this._LineHeight id (fun x -> v.LineHeight <- x)
    updateValue _DefLineStackingStrategy prev._LineStackingStrategy this._LineStackingStrategy id (fun x -> v.LineStackingStrategy <- x)
    updateValue _DefPadding prev._Padding this._Padding id (fun x -> v.Padding <- x)
    updateValue _DefRowSpan prev._RowSpan this._RowSpan id (fun x -> v.RowSpan <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateChildren prev._Blocks this._Blocks v.Blocks
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.TableCell())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TableCell as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TableRow(setProps: TableRow -> unit) as this =
  inherit TextElement()


  do setProps this

  new() = TableRow(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.TableRow voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.TableRow voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Cells: TableCell list voption
  member this.Cells with set x = this._Cells <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.TableRow> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.TableRow) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Cells |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.TableCell |> v.Cells.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TableRow, v: System.Windows.Documents.TableRow) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Cells this._Cells v.Cells
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.TableRow())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TableRow as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TableRowGroup(setProps: TableRowGroup -> unit) as this =
  inherit TextElement()


  do setProps this

  new() = TableRowGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.TableRowGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.TableRowGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Rows: TableRow list voption
  member this.Rows with set x = this._Rows <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.TableRowGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.TableRowGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Rows |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.TableRow |> v.Rows.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TableRowGroup, v: System.Windows.Documents.TableRowGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Rows this._Rows v.Rows
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.TableRowGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TableRowGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Freezable() =
  inherit DependencyObject()


  [<DefaultValue>] val mutable private _Changed: EventHandlerWrapper<System.EventArgs> voption
  member this.Changed with set x = this._Changed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Freezable> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Freezable) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Changed |> ValueOption.iter (fun x -> x.Subscription <- v.Changed.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Freezable, v: System.Windows.Freezable) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateFn prev._Changed this._Changed v.Changed
    this.SilenceEvents <- false


[<AbstractClass>]
type Animatable() =
  inherit Freezable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Animatable> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Animatable) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Animatable, v: System.Windows.Media.Animation.Animatable) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


[<AbstractClass>]
type Brush() =
  inherit Animatable()

  static let _DefOpacity = System.Windows.Media.Brush.OpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRelativeTransform = System.Windows.Media.Brush.RelativeTransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform
  static let _DefTransform = System.Windows.Media.Brush.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform

  [<DefaultValue>] val mutable private _Opacity: float voption
  member this.Opacity with set x = this._Opacity <- ValueSome x

  [<DefaultValue>] val mutable private _RelativeTransform: Transform voption
  member this.RelativeTransform with set x = this._RelativeTransform <- ValueSome x

  [<DefaultValue>] val mutable private _Transform: Transform voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Brush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Brush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Opacity |> ValueOption.iter (fun x -> v.Opacity <- x)
    this._RelativeTransform |> ValueOption.iter (fun x -> v.RelativeTransform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Brush, v: System.Windows.Media.Brush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefOpacity prev._Opacity this._Opacity id (fun x -> v.Opacity <- x)
    updateValue _DefRelativeTransform prev._RelativeTransform this._RelativeTransform id (fun x -> v.RelativeTransform <- x)
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false


type BitmapCacheBrush(setProps: BitmapCacheBrush -> unit) as this =
  inherit Brush()

  static let _DefAutoLayoutContent = System.Windows.Media.BitmapCacheBrush.AutoLayoutContentProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefBitmapCache = System.Windows.Media.BitmapCacheBrush.BitmapCacheProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.BitmapCache
  static let _DefTarget = System.Windows.Media.BitmapCacheBrush.TargetProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Visual

  do setProps this

  new() = BitmapCacheBrush(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.BitmapCacheBrush voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.BitmapCacheBrush voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AutoLayoutContent: bool voption
  member this.AutoLayoutContent with set x = this._AutoLayoutContent <- ValueSome x

  [<DefaultValue>] val mutable private _BitmapCache: BitmapCache voption
  member this.BitmapCache with set x = this._BitmapCache <- ValueSome x

  [<DefaultValue>] val mutable private _Target: Visual voption
  member this.Target with set x = this._Target <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.BitmapCacheBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.BitmapCacheBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AutoLayoutContent |> ValueOption.iter (fun x -> v.AutoLayoutContent <- x)
    this._BitmapCache |> ValueOption.iter (fun x -> v.BitmapCache <- x.RenderNew () :?> System.Windows.Media.BitmapCache)
    this._Target |> ValueOption.iter (fun x -> v.Target <- x.RenderNew () :?> System.Windows.Media.Visual)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BitmapCacheBrush, v: System.Windows.Media.BitmapCacheBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAutoLayoutContent prev._AutoLayoutContent this._AutoLayoutContent id (fun x -> v.AutoLayoutContent <- x)
    updateValue _DefBitmapCache prev._BitmapCache this._BitmapCache id (fun x -> v.BitmapCache <- x)
    updateValue _DefTarget prev._Target this._Target id (fun x -> v.Target <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.BitmapCacheBrush())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BitmapCacheBrush as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type GradientBrush() =
  inherit Brush()

  static let _DefColorInterpolationMode = System.Windows.Media.GradientBrush.ColorInterpolationModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ColorInterpolationMode
  static let _DefGradientStops = System.Windows.Media.GradientBrush.GradientStopsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.GradientStopCollection
  static let _DefMappingMode = System.Windows.Media.GradientBrush.MappingModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.BrushMappingMode
  static let _DefSpreadMethod = System.Windows.Media.GradientBrush.SpreadMethodProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.GradientSpreadMethod

  [<DefaultValue>] val mutable private _ColorInterpolationMode: System.Windows.Media.ColorInterpolationMode voption
  member this.ColorInterpolationMode with set x = this._ColorInterpolationMode <- ValueSome x

  [<DefaultValue>] val mutable private _GradientStops: GradientStopCollection voption
  member this.GradientStops with set x = this._GradientStops <- ValueSome x

  [<DefaultValue>] val mutable private _MappingMode: System.Windows.Media.BrushMappingMode voption
  member this.MappingMode with set x = this._MappingMode <- ValueSome x

  [<DefaultValue>] val mutable private _SpreadMethod: System.Windows.Media.GradientSpreadMethod voption
  member this.SpreadMethod with set x = this._SpreadMethod <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GradientBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GradientBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ColorInterpolationMode |> ValueOption.iter (fun x -> v.ColorInterpolationMode <- x)
    this._GradientStops |> ValueOption.iter (fun x -> v.GradientStops <- x.RenderNew () :?> System.Windows.Media.GradientStopCollection)
    this._MappingMode |> ValueOption.iter (fun x -> v.MappingMode <- x)
    this._SpreadMethod |> ValueOption.iter (fun x -> v.SpreadMethod <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GradientBrush, v: System.Windows.Media.GradientBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefColorInterpolationMode prev._ColorInterpolationMode this._ColorInterpolationMode id (fun x -> v.ColorInterpolationMode <- x)
    updateValue _DefGradientStops prev._GradientStops this._GradientStops id (fun x -> v.GradientStops <- x)
    updateValue _DefMappingMode prev._MappingMode this._MappingMode id (fun x -> v.MappingMode <- x)
    updateValue _DefSpreadMethod prev._SpreadMethod this._SpreadMethod id (fun x -> v.SpreadMethod <- x)
    this.SilenceEvents <- false


type LinearGradientBrush(setProps: LinearGradientBrush -> unit) as this =
  inherit GradientBrush()

  static let _DefEndPoint = System.Windows.Media.LinearGradientBrush.EndPointProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefStartPoint = System.Windows.Media.LinearGradientBrush.StartPointProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point

  do setProps this

  new() = LinearGradientBrush(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.LinearGradientBrush voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.LinearGradientBrush voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EndPoint: System.Windows.Point voption
  member this.EndPoint with set x = this._EndPoint <- ValueSome x

  [<DefaultValue>] val mutable private _StartPoint: System.Windows.Point voption
  member this.StartPoint with set x = this._StartPoint <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.LinearGradientBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.LinearGradientBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EndPoint |> ValueOption.iter (fun x -> v.EndPoint <- x)
    this._StartPoint |> ValueOption.iter (fun x -> v.StartPoint <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearGradientBrush, v: System.Windows.Media.LinearGradientBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEndPoint prev._EndPoint this._EndPoint id (fun x -> v.EndPoint <- x)
    updateValue _DefStartPoint prev._StartPoint this._StartPoint id (fun x -> v.StartPoint <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.LinearGradientBrush())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearGradientBrush as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RadialGradientBrush(setProps: RadialGradientBrush -> unit) as this =
  inherit GradientBrush()

  static let _DefCenter = System.Windows.Media.RadialGradientBrush.CenterProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefGradientOrigin = System.Windows.Media.RadialGradientBrush.GradientOriginProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefRadiusX = System.Windows.Media.RadialGradientBrush.RadiusXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRadiusY = System.Windows.Media.RadialGradientBrush.RadiusYProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = RadialGradientBrush(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.RadialGradientBrush voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.RadialGradientBrush voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Center: System.Windows.Point voption
  member this.Center with set x = this._Center <- ValueSome x

  [<DefaultValue>] val mutable private _GradientOrigin: System.Windows.Point voption
  member this.GradientOrigin with set x = this._GradientOrigin <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusX: float voption
  member this.RadiusX with set x = this._RadiusX <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusY: float voption
  member this.RadiusY with set x = this._RadiusY <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.RadialGradientBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.RadialGradientBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Center |> ValueOption.iter (fun x -> v.Center <- x)
    this._GradientOrigin |> ValueOption.iter (fun x -> v.GradientOrigin <- x)
    this._RadiusX |> ValueOption.iter (fun x -> v.RadiusX <- x)
    this._RadiusY |> ValueOption.iter (fun x -> v.RadiusY <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RadialGradientBrush, v: System.Windows.Media.RadialGradientBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCenter prev._Center this._Center id (fun x -> v.Center <- x)
    updateValue _DefGradientOrigin prev._GradientOrigin this._GradientOrigin id (fun x -> v.GradientOrigin <- x)
    updateValue _DefRadiusX prev._RadiusX this._RadiusX id (fun x -> v.RadiusX <- x)
    updateValue _DefRadiusY prev._RadiusY this._RadiusY id (fun x -> v.RadiusY <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.RadialGradientBrush())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RadialGradientBrush as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SolidColorBrush(setProps: SolidColorBrush -> unit) as this =
  inherit Brush()

  static let _DefColor = System.Windows.Media.SolidColorBrush.ColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color

  do setProps this

  new() = SolidColorBrush(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.SolidColorBrush voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.SolidColorBrush voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Color: System.Windows.Media.Color voption
  member this.Color with set x = this._Color <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.SolidColorBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.SolidColorBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Color |> ValueOption.iter (fun x -> v.Color <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SolidColorBrush, v: System.Windows.Media.SolidColorBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefColor prev._Color this._Color id (fun x -> v.Color <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.SolidColorBrush())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SolidColorBrush as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type TileBrush() =
  inherit Brush()

  static let _DefAlignmentX = System.Windows.Media.TileBrush.AlignmentXProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.AlignmentX
  static let _DefAlignmentY = System.Windows.Media.TileBrush.AlignmentYProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.AlignmentY
  static let _DefStretch = System.Windows.Media.TileBrush.StretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Stretch
  static let _DefTileMode = System.Windows.Media.TileBrush.TileModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.TileMode
  static let _DefViewbox = System.Windows.Media.TileBrush.ViewboxProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect
  static let _DefViewboxUnits = System.Windows.Media.TileBrush.ViewboxUnitsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.BrushMappingMode
  static let _DefViewport = System.Windows.Media.TileBrush.ViewportProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect
  static let _DefViewportUnits = System.Windows.Media.TileBrush.ViewportUnitsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.BrushMappingMode

  [<DefaultValue>] val mutable private _AlignmentX: System.Windows.Media.AlignmentX voption
  member this.AlignmentX with set x = this._AlignmentX <- ValueSome x

  [<DefaultValue>] val mutable private _AlignmentY: System.Windows.Media.AlignmentY voption
  member this.AlignmentY with set x = this._AlignmentY <- ValueSome x

  [<DefaultValue>] val mutable private _Stretch: System.Windows.Media.Stretch voption
  member this.Stretch with set x = this._Stretch <- ValueSome x

  [<DefaultValue>] val mutable private _TileMode: System.Windows.Media.TileMode voption
  member this.TileMode with set x = this._TileMode <- ValueSome x

  [<DefaultValue>] val mutable private _Viewbox: System.Windows.Rect voption
  member this.Viewbox with set x = this._Viewbox <- ValueSome x

  [<DefaultValue>] val mutable private _ViewboxUnits: System.Windows.Media.BrushMappingMode voption
  member this.ViewboxUnits with set x = this._ViewboxUnits <- ValueSome x

  [<DefaultValue>] val mutable private _Viewport: System.Windows.Rect voption
  member this.Viewport with set x = this._Viewport <- ValueSome x

  [<DefaultValue>] val mutable private _ViewportUnits: System.Windows.Media.BrushMappingMode voption
  member this.ViewportUnits with set x = this._ViewportUnits <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.TileBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.TileBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AlignmentX |> ValueOption.iter (fun x -> v.AlignmentX <- x)
    this._AlignmentY |> ValueOption.iter (fun x -> v.AlignmentY <- x)
    this._Stretch |> ValueOption.iter (fun x -> v.Stretch <- x)
    this._TileMode |> ValueOption.iter (fun x -> v.TileMode <- x)
    this._Viewbox |> ValueOption.iter (fun x -> v.Viewbox <- x)
    this._ViewboxUnits |> ValueOption.iter (fun x -> v.ViewboxUnits <- x)
    this._Viewport |> ValueOption.iter (fun x -> v.Viewport <- x)
    this._ViewportUnits |> ValueOption.iter (fun x -> v.ViewportUnits <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TileBrush, v: System.Windows.Media.TileBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAlignmentX prev._AlignmentX this._AlignmentX id (fun x -> v.AlignmentX <- x)
    updateValue _DefAlignmentY prev._AlignmentY this._AlignmentY id (fun x -> v.AlignmentY <- x)
    updateValue _DefStretch prev._Stretch this._Stretch id (fun x -> v.Stretch <- x)
    updateValue _DefTileMode prev._TileMode this._TileMode id (fun x -> v.TileMode <- x)
    updateValue _DefViewbox prev._Viewbox this._Viewbox id (fun x -> v.Viewbox <- x)
    updateValue _DefViewboxUnits prev._ViewboxUnits this._ViewboxUnits id (fun x -> v.ViewboxUnits <- x)
    updateValue _DefViewport prev._Viewport this._Viewport id (fun x -> v.Viewport <- x)
    updateValue _DefViewportUnits prev._ViewportUnits this._ViewportUnits id (fun x -> v.ViewportUnits <- x)
    this.SilenceEvents <- false


type DrawingBrush(setProps: DrawingBrush -> unit) as this =
  inherit TileBrush()

  static let _DefDrawing = System.Windows.Media.DrawingBrush.DrawingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Drawing

  do setProps this

  new() = DrawingBrush(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.DrawingBrush voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.DrawingBrush voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Drawing: Drawing voption
  member this.Drawing with set x = this._Drawing <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.DrawingBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.DrawingBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Drawing |> ValueOption.iter (fun x -> v.Drawing <- x.RenderNew () :?> System.Windows.Media.Drawing)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DrawingBrush, v: System.Windows.Media.DrawingBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDrawing prev._Drawing this._Drawing id (fun x -> v.Drawing <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.DrawingBrush())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DrawingBrush as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ImageBrush(setProps: ImageBrush -> unit) as this =
  inherit TileBrush()

  static let _DefImageSource = System.Windows.Media.ImageBrush.ImageSourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ImageSource

  do setProps this

  new() = ImageBrush(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.ImageBrush voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.ImageBrush voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ImageSource: ImageSource voption
  member this.ImageSource with set x = this._ImageSource <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.ImageBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.ImageBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ImageSource |> ValueOption.iter (fun x -> v.ImageSource <- x.RenderNew () :?> System.Windows.Media.ImageSource)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ImageBrush, v: System.Windows.Media.ImageBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefImageSource prev._ImageSource this._ImageSource id (fun x -> v.ImageSource <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.ImageBrush())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ImageBrush as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VisualBrush(setProps: VisualBrush -> unit) as this =
  inherit TileBrush()

  static let _DefAutoLayoutContent = System.Windows.Media.VisualBrush.AutoLayoutContentProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVisual = System.Windows.Media.VisualBrush.VisualProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Visual

  do setProps this

  new() = VisualBrush(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.VisualBrush voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.VisualBrush voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AutoLayoutContent: bool voption
  member this.AutoLayoutContent with set x = this._AutoLayoutContent <- ValueSome x

  [<DefaultValue>] val mutable private _Visual: Visual voption
  member this.Visual with set x = this._Visual <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.VisualBrush> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.VisualBrush) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AutoLayoutContent |> ValueOption.iter (fun x -> v.AutoLayoutContent <- x)
    this._Visual |> ValueOption.iter (fun x -> v.Visual <- x.RenderNew () :?> System.Windows.Media.Visual)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VisualBrush, v: System.Windows.Media.VisualBrush) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAutoLayoutContent prev._AutoLayoutContent this._AutoLayoutContent id (fun x -> v.AutoLayoutContent <- x)
    updateValue _DefVisual prev._Visual this._Visual id (fun x -> v.Visual <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.VisualBrush())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VisualBrush as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type CacheMode() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.CacheMode> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.CacheMode) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CacheMode, v: System.Windows.Media.CacheMode) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type BitmapCache(setProps: BitmapCache -> unit) as this =
  inherit CacheMode()

  static let _DefEnableClearType = System.Windows.Media.BitmapCache.EnableClearTypeProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefRenderAtScale = System.Windows.Media.BitmapCache.RenderAtScaleProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSnapsToDevicePixels = System.Windows.Media.BitmapCache.SnapsToDevicePixelsProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = BitmapCache(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.BitmapCache voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.BitmapCache voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EnableClearType: bool voption
  member this.EnableClearType with set x = this._EnableClearType <- ValueSome x

  [<DefaultValue>] val mutable private _RenderAtScale: float voption
  member this.RenderAtScale with set x = this._RenderAtScale <- ValueSome x

  [<DefaultValue>] val mutable private _SnapsToDevicePixels: bool voption
  member this.SnapsToDevicePixels with set x = this._SnapsToDevicePixels <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.BitmapCache> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.BitmapCache) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EnableClearType |> ValueOption.iter (fun x -> v.EnableClearType <- x)
    this._RenderAtScale |> ValueOption.iter (fun x -> v.RenderAtScale <- x)
    this._SnapsToDevicePixels |> ValueOption.iter (fun x -> v.SnapsToDevicePixels <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BitmapCache, v: System.Windows.Media.BitmapCache) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEnableClearType prev._EnableClearType this._EnableClearType id (fun x -> v.EnableClearType <- x)
    updateValue _DefRenderAtScale prev._RenderAtScale this._RenderAtScale id (fun x -> v.RenderAtScale <- x)
    updateValue _DefSnapsToDevicePixels prev._SnapsToDevicePixels this._SnapsToDevicePixels id (fun x -> v.SnapsToDevicePixels <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.BitmapCache())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BitmapCache as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Camera() =
  inherit Animatable()

  static let _DefTransform = System.Windows.Media.Media3D.Camera.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Transform3D

  [<DefaultValue>] val mutable private _Transform: Transform3D voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Camera> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Camera) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Media3D.Transform3D)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Camera, v: System.Windows.Media.Media3D.Camera) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false


type MatrixCamera(setProps: MatrixCamera -> unit) as this =
  inherit Camera()

  static let _DefProjectionMatrix = System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrixProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Matrix3D
  static let _DefViewMatrix = System.Windows.Media.Media3D.MatrixCamera.ViewMatrixProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Matrix3D

  do setProps this

  new() = MatrixCamera(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.MatrixCamera voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.MatrixCamera voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ProjectionMatrix: System.Windows.Media.Media3D.Matrix3D voption
  member this.ProjectionMatrix with set x = this._ProjectionMatrix <- ValueSome x

  [<DefaultValue>] val mutable private _ViewMatrix: System.Windows.Media.Media3D.Matrix3D voption
  member this.ViewMatrix with set x = this._ViewMatrix <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.MatrixCamera> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.MatrixCamera) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ProjectionMatrix |> ValueOption.iter (fun x -> v.ProjectionMatrix <- x)
    this._ViewMatrix |> ValueOption.iter (fun x -> v.ViewMatrix <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixCamera, v: System.Windows.Media.Media3D.MatrixCamera) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefProjectionMatrix prev._ProjectionMatrix this._ProjectionMatrix id (fun x -> v.ProjectionMatrix <- x)
    updateValue _DefViewMatrix prev._ViewMatrix this._ViewMatrix id (fun x -> v.ViewMatrix <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.MatrixCamera())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MatrixCamera as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ProjectionCamera() =
  inherit Camera()

  static let _DefFarPlaneDistance = System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistanceProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLookDirection = System.Windows.Media.Media3D.ProjectionCamera.LookDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Vector3D
  static let _DefNearPlaneDistance = System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistanceProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPosition = System.Windows.Media.Media3D.ProjectionCamera.PositionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Point3D
  static let _DefUpDirection = System.Windows.Media.Media3D.ProjectionCamera.UpDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Vector3D

  [<DefaultValue>] val mutable private _FarPlaneDistance: float voption
  member this.FarPlaneDistance with set x = this._FarPlaneDistance <- ValueSome x

  [<DefaultValue>] val mutable private _LookDirection: System.Windows.Media.Media3D.Vector3D voption
  member this.LookDirection with set x = this._LookDirection <- ValueSome x

  [<DefaultValue>] val mutable private _NearPlaneDistance: float voption
  member this.NearPlaneDistance with set x = this._NearPlaneDistance <- ValueSome x

  [<DefaultValue>] val mutable private _Position: System.Windows.Media.Media3D.Point3D voption
  member this.Position with set x = this._Position <- ValueSome x

  [<DefaultValue>] val mutable private _UpDirection: System.Windows.Media.Media3D.Vector3D voption
  member this.UpDirection with set x = this._UpDirection <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.ProjectionCamera> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.ProjectionCamera) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._FarPlaneDistance |> ValueOption.iter (fun x -> v.FarPlaneDistance <- x)
    this._LookDirection |> ValueOption.iter (fun x -> v.LookDirection <- x)
    this._NearPlaneDistance |> ValueOption.iter (fun x -> v.NearPlaneDistance <- x)
    this._Position |> ValueOption.iter (fun x -> v.Position <- x)
    this._UpDirection |> ValueOption.iter (fun x -> v.UpDirection <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ProjectionCamera, v: System.Windows.Media.Media3D.ProjectionCamera) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFarPlaneDistance prev._FarPlaneDistance this._FarPlaneDistance id (fun x -> v.FarPlaneDistance <- x)
    updateValue _DefLookDirection prev._LookDirection this._LookDirection id (fun x -> v.LookDirection <- x)
    updateValue _DefNearPlaneDistance prev._NearPlaneDistance this._NearPlaneDistance id (fun x -> v.NearPlaneDistance <- x)
    updateValue _DefPosition prev._Position this._Position id (fun x -> v.Position <- x)
    updateValue _DefUpDirection prev._UpDirection this._UpDirection id (fun x -> v.UpDirection <- x)
    this.SilenceEvents <- false


type OrthographicCamera(setProps: OrthographicCamera -> unit) as this =
  inherit ProjectionCamera()

  static let _DefWidth = System.Windows.Media.Media3D.OrthographicCamera.WidthProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = OrthographicCamera(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.OrthographicCamera voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.OrthographicCamera voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Width: float voption
  member this.Width with set x = this._Width <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.OrthographicCamera> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.OrthographicCamera) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Width |> ValueOption.iter (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: OrthographicCamera, v: System.Windows.Media.Media3D.OrthographicCamera) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefWidth prev._Width this._Width id (fun x -> v.Width <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.OrthographicCamera())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? OrthographicCamera as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PerspectiveCamera(setProps: PerspectiveCamera -> unit) as this =
  inherit ProjectionCamera()

  static let _DefFieldOfView = System.Windows.Media.Media3D.PerspectiveCamera.FieldOfViewProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = PerspectiveCamera(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.PerspectiveCamera voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.PerspectiveCamera voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _FieldOfView: float voption
  member this.FieldOfView with set x = this._FieldOfView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.PerspectiveCamera> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.PerspectiveCamera) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._FieldOfView |> ValueOption.iter (fun x -> v.FieldOfView <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PerspectiveCamera, v: System.Windows.Media.Media3D.PerspectiveCamera) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFieldOfView prev._FieldOfView this._FieldOfView id (fun x -> v.FieldOfView <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.PerspectiveCamera())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PerspectiveCamera as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DashStyle(setProps: DashStyle -> unit) as this =
  inherit Animatable()

  static let _DefDashes = System.Windows.Media.DashStyle.DashesProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DoubleCollection
  static let _DefOffset = System.Windows.Media.DashStyle.OffsetProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = DashStyle(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.DashStyle voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.DashStyle voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Dashes: DoubleCollection voption
  member this.Dashes with set x = this._Dashes <- ValueSome x

  [<DefaultValue>] val mutable private _Offset: float voption
  member this.Offset with set x = this._Offset <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.DashStyle> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.DashStyle) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Dashes |> ValueOption.iter (fun x -> v.Dashes <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this._Offset |> ValueOption.iter (fun x -> v.Offset <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DashStyle, v: System.Windows.Media.DashStyle) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDashes prev._Dashes this._Dashes id (fun x -> v.Dashes <- x)
    updateValue _DefOffset prev._Offset this._Offset id (fun x -> v.Offset <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.DashStyle())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DashStyle as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Drawing() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Drawing> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Drawing) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Drawing, v: System.Windows.Media.Drawing) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type DrawingGroup(setProps: DrawingGroup -> unit) as this =
  inherit Drawing()

  static let _DefChildren = System.Windows.Media.DrawingGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DrawingCollection
  static let _DefClipGeometry = System.Windows.Media.DrawingGroup.ClipGeometryProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Geometry
  static let _DefGuidelineSet = System.Windows.Media.DrawingGroup.GuidelineSetProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.GuidelineSet
  static let _DefOpacity = System.Windows.Media.DrawingGroup.OpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOpacityMask = System.Windows.Media.DrawingGroup.OpacityMaskProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefTransform = System.Windows.Media.DrawingGroup.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform

  do setProps this

  new() = DrawingGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.DrawingGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.DrawingGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: DrawingCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable private _ClipGeometry: Geometry voption
  member this.ClipGeometry with set x = this._ClipGeometry <- ValueSome x

  [<DefaultValue>] val mutable private _GuidelineSet: GuidelineSet voption
  member this.GuidelineSet with set x = this._GuidelineSet <- ValueSome x

  [<DefaultValue>] val mutable private _Opacity: float voption
  member this.Opacity with set x = this._Opacity <- ValueSome x

  [<DefaultValue>] val mutable private _OpacityMask: Brush voption
  member this.OpacityMask with set x = this._OpacityMask <- ValueSome x

  [<DefaultValue>] val mutable private _Transform: Transform voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.DrawingGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.DrawingGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.DrawingCollection)
    this._ClipGeometry |> ValueOption.iter (fun x -> v.ClipGeometry <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._GuidelineSet |> ValueOption.iter (fun x -> v.GuidelineSet <- x.RenderNew () :?> System.Windows.Media.GuidelineSet)
    this._Opacity |> ValueOption.iter (fun x -> v.Opacity <- x)
    this._OpacityMask |> ValueOption.iter (fun x -> v.OpacityMask <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DrawingGroup, v: System.Windows.Media.DrawingGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    updateValue _DefClipGeometry prev._ClipGeometry this._ClipGeometry id (fun x -> v.ClipGeometry <- x)
    updateValue _DefGuidelineSet prev._GuidelineSet this._GuidelineSet id (fun x -> v.GuidelineSet <- x)
    updateValue _DefOpacity prev._Opacity this._Opacity id (fun x -> v.Opacity <- x)
    updateValue _DefOpacityMask prev._OpacityMask this._OpacityMask id (fun x -> v.OpacityMask <- x)
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.DrawingGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DrawingGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GeometryDrawing(setProps: GeometryDrawing -> unit) as this =
  inherit Drawing()

  static let _DefBrush = System.Windows.Media.GeometryDrawing.BrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefGeometry = System.Windows.Media.GeometryDrawing.GeometryProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Geometry
  static let _DefPen = System.Windows.Media.GeometryDrawing.PenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Pen

  do setProps this

  new() = GeometryDrawing(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GeometryDrawing voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GeometryDrawing voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Brush: Brush voption
  member this.Brush with set x = this._Brush <- ValueSome x

  [<DefaultValue>] val mutable private _Geometry: Geometry voption
  member this.Geometry with set x = this._Geometry <- ValueSome x

  [<DefaultValue>] val mutable private _Pen: Pen voption
  member this.Pen with set x = this._Pen <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GeometryDrawing> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GeometryDrawing) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Brush |> ValueOption.iter (fun x -> v.Brush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Geometry |> ValueOption.iter (fun x -> v.Geometry <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._Pen |> ValueOption.iter (fun x -> v.Pen <- x.RenderNew () :?> System.Windows.Media.Pen)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeometryDrawing, v: System.Windows.Media.GeometryDrawing) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBrush prev._Brush this._Brush id (fun x -> v.Brush <- x)
    updateValue _DefGeometry prev._Geometry this._Geometry id (fun x -> v.Geometry <- x)
    updateValue _DefPen prev._Pen this._Pen id (fun x -> v.Pen <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GeometryDrawing())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeometryDrawing as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GlyphRunDrawing(setProps: GlyphRunDrawing -> unit) as this =
  inherit Drawing()

  static let _DefForegroundBrush = System.Windows.Media.GlyphRunDrawing.ForegroundBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefGlyphRun = System.Windows.Media.GlyphRunDrawing.GlyphRunProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.GlyphRun

  do setProps this

  new() = GlyphRunDrawing(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GlyphRunDrawing voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GlyphRunDrawing voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ForegroundBrush: Brush voption
  member this.ForegroundBrush with set x = this._ForegroundBrush <- ValueSome x

  [<DefaultValue>] val mutable private _GlyphRun: System.Windows.Media.GlyphRun voption
  member this.GlyphRun with set x = this._GlyphRun <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GlyphRunDrawing> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GlyphRunDrawing) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ForegroundBrush |> ValueOption.iter (fun x -> v.ForegroundBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._GlyphRun |> ValueOption.iter (fun x -> v.GlyphRun <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GlyphRunDrawing, v: System.Windows.Media.GlyphRunDrawing) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefForegroundBrush prev._ForegroundBrush this._ForegroundBrush id (fun x -> v.ForegroundBrush <- x)
    updateValue _DefGlyphRun prev._GlyphRun this._GlyphRun id (fun x -> v.GlyphRun <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GlyphRunDrawing())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GlyphRunDrawing as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ImageDrawing(setProps: ImageDrawing -> unit) as this =
  inherit Drawing()

  static let _DefImageSource = System.Windows.Media.ImageDrawing.ImageSourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ImageSource
  static let _DefRect = System.Windows.Media.ImageDrawing.RectProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect

  do setProps this

  new() = ImageDrawing(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.ImageDrawing voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.ImageDrawing voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ImageSource: ImageSource voption
  member this.ImageSource with set x = this._ImageSource <- ValueSome x

  [<DefaultValue>] val mutable private _Rect: System.Windows.Rect voption
  member this.Rect with set x = this._Rect <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.ImageDrawing> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.ImageDrawing) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ImageSource |> ValueOption.iter (fun x -> v.ImageSource <- x.RenderNew () :?> System.Windows.Media.ImageSource)
    this._Rect |> ValueOption.iter (fun x -> v.Rect <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ImageDrawing, v: System.Windows.Media.ImageDrawing) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefImageSource prev._ImageSource this._ImageSource id (fun x -> v.ImageSource <- x)
    updateValue _DefRect prev._Rect this._Rect id (fun x -> v.Rect <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.ImageDrawing())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ImageDrawing as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VideoDrawing(setProps: VideoDrawing -> unit) as this =
  inherit Drawing()

  static let _DefPlayer = System.Windows.Media.VideoDrawing.PlayerProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.MediaPlayer
  static let _DefRect = System.Windows.Media.VideoDrawing.RectProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect

  do setProps this

  new() = VideoDrawing(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.VideoDrawing voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.VideoDrawing voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Player: MediaPlayer voption
  member this.Player with set x = this._Player <- ValueSome x

  [<DefaultValue>] val mutable private _Rect: System.Windows.Rect voption
  member this.Rect with set x = this._Rect <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.VideoDrawing> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.VideoDrawing) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Player |> ValueOption.iter (fun x -> v.Player <- x.RenderNew () :?> System.Windows.Media.MediaPlayer)
    this._Rect |> ValueOption.iter (fun x -> v.Rect <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VideoDrawing, v: System.Windows.Media.VideoDrawing) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPlayer prev._Player this._Player id (fun x -> v.Player <- x)
    updateValue _DefRect prev._Rect this._Rect id (fun x -> v.Rect <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.VideoDrawing())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VideoDrawing as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DrawingCollection(setProps: DrawingCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = DrawingCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.DrawingCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.DrawingCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Drawing list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.DrawingCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.DrawingCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Drawing |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DrawingCollection, v: System.Windows.Media.DrawingCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.DrawingCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DrawingCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Effect() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Effects.Effect> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Effects.Effect) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Effect, v: System.Windows.Media.Effects.Effect) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type BlurEffect(setProps: BlurEffect -> unit) as this =
  inherit Effect()

  static let _DefKernelType = System.Windows.Media.Effects.BlurEffect.KernelTypeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Effects.KernelType
  static let _DefRadius = System.Windows.Media.Effects.BlurEffect.RadiusProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRenderingBias = System.Windows.Media.Effects.BlurEffect.RenderingBiasProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Effects.RenderingBias

  do setProps this

  new() = BlurEffect(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Effects.BlurEffect voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Effects.BlurEffect voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KernelType: System.Windows.Media.Effects.KernelType voption
  member this.KernelType with set x = this._KernelType <- ValueSome x

  [<DefaultValue>] val mutable private _Radius: float voption
  member this.Radius with set x = this._Radius <- ValueSome x

  [<DefaultValue>] val mutable private _RenderingBias: System.Windows.Media.Effects.RenderingBias voption
  member this.RenderingBias with set x = this._RenderingBias <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Effects.BlurEffect> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Effects.BlurEffect) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KernelType |> ValueOption.iter (fun x -> v.KernelType <- x)
    this._Radius |> ValueOption.iter (fun x -> v.Radius <- x)
    this._RenderingBias |> ValueOption.iter (fun x -> v.RenderingBias <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BlurEffect, v: System.Windows.Media.Effects.BlurEffect) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKernelType prev._KernelType this._KernelType id (fun x -> v.KernelType <- x)
    updateValue _DefRadius prev._Radius this._Radius id (fun x -> v.Radius <- x)
    updateValue _DefRenderingBias prev._RenderingBias this._RenderingBias id (fun x -> v.RenderingBias <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Effects.BlurEffect())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BlurEffect as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DropShadowEffect(setProps: DropShadowEffect -> unit) as this =
  inherit Effect()

  static let _DefBlurRadius = System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefColor = System.Windows.Media.Effects.DropShadowEffect.ColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color
  static let _DefDirection = System.Windows.Media.Effects.DropShadowEffect.DirectionProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOpacity = System.Windows.Media.Effects.DropShadowEffect.OpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRenderingBias = System.Windows.Media.Effects.DropShadowEffect.RenderingBiasProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Effects.RenderingBias
  static let _DefShadowDepth = System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = DropShadowEffect(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Effects.DropShadowEffect voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Effects.DropShadowEffect voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _BlurRadius: float voption
  member this.BlurRadius with set x = this._BlurRadius <- ValueSome x

  [<DefaultValue>] val mutable private _Color: System.Windows.Media.Color voption
  member this.Color with set x = this._Color <- ValueSome x

  [<DefaultValue>] val mutable private _Direction: float voption
  member this.Direction with set x = this._Direction <- ValueSome x

  [<DefaultValue>] val mutable private _Opacity: float voption
  member this.Opacity with set x = this._Opacity <- ValueSome x

  [<DefaultValue>] val mutable private _RenderingBias: System.Windows.Media.Effects.RenderingBias voption
  member this.RenderingBias with set x = this._RenderingBias <- ValueSome x

  [<DefaultValue>] val mutable private _ShadowDepth: float voption
  member this.ShadowDepth with set x = this._ShadowDepth <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Effects.DropShadowEffect> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Effects.DropShadowEffect) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BlurRadius |> ValueOption.iter (fun x -> v.BlurRadius <- x)
    this._Color |> ValueOption.iter (fun x -> v.Color <- x)
    this._Direction |> ValueOption.iter (fun x -> v.Direction <- x)
    this._Opacity |> ValueOption.iter (fun x -> v.Opacity <- x)
    this._RenderingBias |> ValueOption.iter (fun x -> v.RenderingBias <- x)
    this._ShadowDepth |> ValueOption.iter (fun x -> v.ShadowDepth <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DropShadowEffect, v: System.Windows.Media.Effects.DropShadowEffect) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBlurRadius prev._BlurRadius this._BlurRadius id (fun x -> v.BlurRadius <- x)
    updateValue _DefColor prev._Color this._Color id (fun x -> v.Color <- x)
    updateValue _DefDirection prev._Direction this._Direction id (fun x -> v.Direction <- x)
    updateValue _DefOpacity prev._Opacity this._Opacity id (fun x -> v.Opacity <- x)
    updateValue _DefRenderingBias prev._RenderingBias this._RenderingBias id (fun x -> v.RenderingBias <- x)
    updateValue _DefShadowDepth prev._ShadowDepth this._ShadowDepth id (fun x -> v.ShadowDepth <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Effects.DropShadowEffect())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DropShadowEffect as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FreezableCollection<'T when 'T :> DependencyObject>(setProps: FreezableCollection<'T> -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = FreezableCollection<'T>(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.FreezableCollection<System.Windows.DependencyObject> voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.FreezableCollection<System.Windows.DependencyObject> voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: 'T list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.FreezableCollection<System.Windows.DependencyObject>> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.FreezableCollection<System.Windows.DependencyObject>) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.DependencyObject |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FreezableCollection<'T>, v: System.Windows.FreezableCollection<System.Windows.DependencyObject>) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.FreezableCollection<System.Windows.DependencyObject>())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FreezableCollection<'T> as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ThumbButtonInfoCollection(setProps: ThumbButtonInfoCollection -> unit) as this =
  inherit FreezableCollection<ThumbButtonInfo>()


  do setProps this

  new() = ThumbButtonInfoCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shell.ThumbButtonInfoCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shell.ThumbButtonInfoCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shell.ThumbButtonInfoCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shell.ThumbButtonInfoCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ThumbButtonInfoCollection, v: System.Windows.Shell.ThumbButtonInfoCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shell.ThumbButtonInfoCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ThumbButtonInfoCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type GeneralTransform() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GeneralTransform> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GeneralTransform) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeneralTransform, v: System.Windows.Media.GeneralTransform) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type GeneralTransformGroup(setProps: GeneralTransformGroup -> unit) as this =
  inherit GeneralTransform()

  static let _DefChildren = System.Windows.Media.GeneralTransformGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.GeneralTransformCollection

  do setProps this

  new() = GeneralTransformGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GeneralTransformGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GeneralTransformGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: GeneralTransformCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GeneralTransformGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GeneralTransformGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.GeneralTransformCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeneralTransformGroup, v: System.Windows.Media.GeneralTransformGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GeneralTransformGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeneralTransformGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Transform() =
  inherit GeneralTransform()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Transform> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Transform) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Transform, v: System.Windows.Media.Transform) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type MatrixTransform(setProps: MatrixTransform -> unit) as this =
  inherit Transform()

  static let _DefMatrix = System.Windows.Media.MatrixTransform.MatrixProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Matrix

  do setProps this

  new() = MatrixTransform(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.MatrixTransform voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.MatrixTransform voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Matrix: System.Windows.Media.Matrix voption
  member this.Matrix with set x = this._Matrix <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.MatrixTransform> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.MatrixTransform) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Matrix |> ValueOption.iter (fun x -> v.Matrix <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixTransform, v: System.Windows.Media.MatrixTransform) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefMatrix prev._Matrix this._Matrix id (fun x -> v.Matrix <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.MatrixTransform())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MatrixTransform as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RotateTransform(setProps: RotateTransform -> unit) as this =
  inherit Transform()

  static let _DefAngle = System.Windows.Media.RotateTransform.AngleProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterX = System.Windows.Media.RotateTransform.CenterXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterY = System.Windows.Media.RotateTransform.CenterYProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = RotateTransform(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.RotateTransform voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.RotateTransform voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Angle: float voption
  member this.Angle with set x = this._Angle <- ValueSome x

  [<DefaultValue>] val mutable private _CenterX: float voption
  member this.CenterX with set x = this._CenterX <- ValueSome x

  [<DefaultValue>] val mutable private _CenterY: float voption
  member this.CenterY with set x = this._CenterY <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.RotateTransform> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.RotateTransform) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Angle |> ValueOption.iter (fun x -> v.Angle <- x)
    this._CenterX |> ValueOption.iter (fun x -> v.CenterX <- x)
    this._CenterY |> ValueOption.iter (fun x -> v.CenterY <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RotateTransform, v: System.Windows.Media.RotateTransform) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAngle prev._Angle this._Angle id (fun x -> v.Angle <- x)
    updateValue _DefCenterX prev._CenterX this._CenterX id (fun x -> v.CenterX <- x)
    updateValue _DefCenterY prev._CenterY this._CenterY id (fun x -> v.CenterY <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.RotateTransform())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RotateTransform as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ScaleTransform(setProps: ScaleTransform -> unit) as this =
  inherit Transform()

  static let _DefCenterX = System.Windows.Media.ScaleTransform.CenterXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterY = System.Windows.Media.ScaleTransform.CenterYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefScaleX = System.Windows.Media.ScaleTransform.ScaleXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefScaleY = System.Windows.Media.ScaleTransform.ScaleYProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ScaleTransform(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.ScaleTransform voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.ScaleTransform voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CenterX: float voption
  member this.CenterX with set x = this._CenterX <- ValueSome x

  [<DefaultValue>] val mutable private _CenterY: float voption
  member this.CenterY with set x = this._CenterY <- ValueSome x

  [<DefaultValue>] val mutable private _ScaleX: float voption
  member this.ScaleX with set x = this._ScaleX <- ValueSome x

  [<DefaultValue>] val mutable private _ScaleY: float voption
  member this.ScaleY with set x = this._ScaleY <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.ScaleTransform> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.ScaleTransform) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CenterX |> ValueOption.iter (fun x -> v.CenterX <- x)
    this._CenterY |> ValueOption.iter (fun x -> v.CenterY <- x)
    this._ScaleX |> ValueOption.iter (fun x -> v.ScaleX <- x)
    this._ScaleY |> ValueOption.iter (fun x -> v.ScaleY <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ScaleTransform, v: System.Windows.Media.ScaleTransform) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCenterX prev._CenterX this._CenterX id (fun x -> v.CenterX <- x)
    updateValue _DefCenterY prev._CenterY this._CenterY id (fun x -> v.CenterY <- x)
    updateValue _DefScaleX prev._ScaleX this._ScaleX id (fun x -> v.ScaleX <- x)
    updateValue _DefScaleY prev._ScaleY this._ScaleY id (fun x -> v.ScaleY <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.ScaleTransform())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ScaleTransform as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SkewTransform(setProps: SkewTransform -> unit) as this =
  inherit Transform()

  static let _DefAngleX = System.Windows.Media.SkewTransform.AngleXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefAngleY = System.Windows.Media.SkewTransform.AngleYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterX = System.Windows.Media.SkewTransform.CenterXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterY = System.Windows.Media.SkewTransform.CenterYProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = SkewTransform(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.SkewTransform voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.SkewTransform voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AngleX: float voption
  member this.AngleX with set x = this._AngleX <- ValueSome x

  [<DefaultValue>] val mutable private _AngleY: float voption
  member this.AngleY with set x = this._AngleY <- ValueSome x

  [<DefaultValue>] val mutable private _CenterX: float voption
  member this.CenterX with set x = this._CenterX <- ValueSome x

  [<DefaultValue>] val mutable private _CenterY: float voption
  member this.CenterY with set x = this._CenterY <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.SkewTransform> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.SkewTransform) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AngleX |> ValueOption.iter (fun x -> v.AngleX <- x)
    this._AngleY |> ValueOption.iter (fun x -> v.AngleY <- x)
    this._CenterX |> ValueOption.iter (fun x -> v.CenterX <- x)
    this._CenterY |> ValueOption.iter (fun x -> v.CenterY <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SkewTransform, v: System.Windows.Media.SkewTransform) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAngleX prev._AngleX this._AngleX id (fun x -> v.AngleX <- x)
    updateValue _DefAngleY prev._AngleY this._AngleY id (fun x -> v.AngleY <- x)
    updateValue _DefCenterX prev._CenterX this._CenterX id (fun x -> v.CenterX <- x)
    updateValue _DefCenterY prev._CenterY this._CenterY id (fun x -> v.CenterY <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.SkewTransform())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SkewTransform as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TransformGroup(setProps: TransformGroup -> unit) as this =
  inherit Transform()

  static let _DefChildren = System.Windows.Media.TransformGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.TransformCollection

  do setProps this

  new() = TransformGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.TransformGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.TransformGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: TransformCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.TransformGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.TransformGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.TransformCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TransformGroup, v: System.Windows.Media.TransformGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.TransformGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TransformGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TranslateTransform(setProps: TranslateTransform -> unit) as this =
  inherit Transform()

  static let _DefX = System.Windows.Media.TranslateTransform.XProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefY = System.Windows.Media.TranslateTransform.YProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = TranslateTransform(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.TranslateTransform voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.TranslateTransform voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _X: float voption
  member this.X with set x = this._X <- ValueSome x

  [<DefaultValue>] val mutable private _Y: float voption
  member this.Y with set x = this._Y <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.TranslateTransform> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.TranslateTransform) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._X |> ValueOption.iter (fun x -> v.X <- x)
    this._Y |> ValueOption.iter (fun x -> v.Y <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TranslateTransform, v: System.Windows.Media.TranslateTransform) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefX prev._X this._X id (fun x -> v.X <- x)
    updateValue _DefY prev._Y this._Y id (fun x -> v.Y <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.TranslateTransform())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TranslateTransform as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type GeneralTransform3D() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.GeneralTransform3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.GeneralTransform3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeneralTransform3D, v: System.Windows.Media.Media3D.GeneralTransform3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type GeneralTransform3DGroup(setProps: GeneralTransform3DGroup -> unit) as this =
  inherit GeneralTransform3D()

  static let _DefChildren = System.Windows.Media.Media3D.GeneralTransform3DGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.GeneralTransform3DCollection

  do setProps this

  new() = GeneralTransform3DGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.GeneralTransform3DGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.GeneralTransform3DGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: GeneralTransform3DCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.GeneralTransform3DGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.GeneralTransform3DGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.Media3D.GeneralTransform3DCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeneralTransform3DGroup, v: System.Windows.Media.Media3D.GeneralTransform3DGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.GeneralTransform3DGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeneralTransform3DGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Transform3D() =
  inherit GeneralTransform3D()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Transform3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Transform3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Transform3D, v: System.Windows.Media.Media3D.Transform3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


[<AbstractClass>]
type AffineTransform3D() =
  inherit Transform3D()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.AffineTransform3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.AffineTransform3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: AffineTransform3D, v: System.Windows.Media.Media3D.AffineTransform3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type RotateTransform3D(setProps: RotateTransform3D -> unit) as this =
  inherit AffineTransform3D()

  static let _DefCenterX = System.Windows.Media.Media3D.RotateTransform3D.CenterXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterY = System.Windows.Media.Media3D.RotateTransform3D.CenterYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterZ = System.Windows.Media.Media3D.RotateTransform3D.CenterZProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRotation = System.Windows.Media.Media3D.RotateTransform3D.RotationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Rotation3D

  do setProps this

  new() = RotateTransform3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.RotateTransform3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.RotateTransform3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CenterX: float voption
  member this.CenterX with set x = this._CenterX <- ValueSome x

  [<DefaultValue>] val mutable private _CenterY: float voption
  member this.CenterY with set x = this._CenterY <- ValueSome x

  [<DefaultValue>] val mutable private _CenterZ: float voption
  member this.CenterZ with set x = this._CenterZ <- ValueSome x

  [<DefaultValue>] val mutable private _Rotation: Rotation3D voption
  member this.Rotation with set x = this._Rotation <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.RotateTransform3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.RotateTransform3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CenterX |> ValueOption.iter (fun x -> v.CenterX <- x)
    this._CenterY |> ValueOption.iter (fun x -> v.CenterY <- x)
    this._CenterZ |> ValueOption.iter (fun x -> v.CenterZ <- x)
    this._Rotation |> ValueOption.iter (fun x -> v.Rotation <- x.RenderNew () :?> System.Windows.Media.Media3D.Rotation3D)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RotateTransform3D, v: System.Windows.Media.Media3D.RotateTransform3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCenterX prev._CenterX this._CenterX id (fun x -> v.CenterX <- x)
    updateValue _DefCenterY prev._CenterY this._CenterY id (fun x -> v.CenterY <- x)
    updateValue _DefCenterZ prev._CenterZ this._CenterZ id (fun x -> v.CenterZ <- x)
    updateValue _DefRotation prev._Rotation this._Rotation id (fun x -> v.Rotation <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.RotateTransform3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RotateTransform3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ScaleTransform3D(setProps: ScaleTransform3D -> unit) as this =
  inherit AffineTransform3D()

  static let _DefCenterX = System.Windows.Media.Media3D.ScaleTransform3D.CenterXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterY = System.Windows.Media.Media3D.ScaleTransform3D.CenterYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCenterZ = System.Windows.Media.Media3D.ScaleTransform3D.CenterZProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefScaleX = System.Windows.Media.Media3D.ScaleTransform3D.ScaleXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefScaleY = System.Windows.Media.Media3D.ScaleTransform3D.ScaleYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefScaleZ = System.Windows.Media.Media3D.ScaleTransform3D.ScaleZProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ScaleTransform3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.ScaleTransform3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.ScaleTransform3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CenterX: float voption
  member this.CenterX with set x = this._CenterX <- ValueSome x

  [<DefaultValue>] val mutable private _CenterY: float voption
  member this.CenterY with set x = this._CenterY <- ValueSome x

  [<DefaultValue>] val mutable private _CenterZ: float voption
  member this.CenterZ with set x = this._CenterZ <- ValueSome x

  [<DefaultValue>] val mutable private _ScaleX: float voption
  member this.ScaleX with set x = this._ScaleX <- ValueSome x

  [<DefaultValue>] val mutable private _ScaleY: float voption
  member this.ScaleY with set x = this._ScaleY <- ValueSome x

  [<DefaultValue>] val mutable private _ScaleZ: float voption
  member this.ScaleZ with set x = this._ScaleZ <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.ScaleTransform3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.ScaleTransform3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CenterX |> ValueOption.iter (fun x -> v.CenterX <- x)
    this._CenterY |> ValueOption.iter (fun x -> v.CenterY <- x)
    this._CenterZ |> ValueOption.iter (fun x -> v.CenterZ <- x)
    this._ScaleX |> ValueOption.iter (fun x -> v.ScaleX <- x)
    this._ScaleY |> ValueOption.iter (fun x -> v.ScaleY <- x)
    this._ScaleZ |> ValueOption.iter (fun x -> v.ScaleZ <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ScaleTransform3D, v: System.Windows.Media.Media3D.ScaleTransform3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCenterX prev._CenterX this._CenterX id (fun x -> v.CenterX <- x)
    updateValue _DefCenterY prev._CenterY this._CenterY id (fun x -> v.CenterY <- x)
    updateValue _DefCenterZ prev._CenterZ this._CenterZ id (fun x -> v.CenterZ <- x)
    updateValue _DefScaleX prev._ScaleX this._ScaleX id (fun x -> v.ScaleX <- x)
    updateValue _DefScaleY prev._ScaleY this._ScaleY id (fun x -> v.ScaleY <- x)
    updateValue _DefScaleZ prev._ScaleZ this._ScaleZ id (fun x -> v.ScaleZ <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.ScaleTransform3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ScaleTransform3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TranslateTransform3D(setProps: TranslateTransform3D -> unit) as this =
  inherit AffineTransform3D()

  static let _DefOffsetX = System.Windows.Media.Media3D.TranslateTransform3D.OffsetXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOffsetY = System.Windows.Media.Media3D.TranslateTransform3D.OffsetYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOffsetZ = System.Windows.Media.Media3D.TranslateTransform3D.OffsetZProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = TranslateTransform3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.TranslateTransform3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.TranslateTransform3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _OffsetX: float voption
  member this.OffsetX with set x = this._OffsetX <- ValueSome x

  [<DefaultValue>] val mutable private _OffsetY: float voption
  member this.OffsetY with set x = this._OffsetY <- ValueSome x

  [<DefaultValue>] val mutable private _OffsetZ: float voption
  member this.OffsetZ with set x = this._OffsetZ <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.TranslateTransform3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.TranslateTransform3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._OffsetX |> ValueOption.iter (fun x -> v.OffsetX <- x)
    this._OffsetY |> ValueOption.iter (fun x -> v.OffsetY <- x)
    this._OffsetZ |> ValueOption.iter (fun x -> v.OffsetZ <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TranslateTransform3D, v: System.Windows.Media.Media3D.TranslateTransform3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefOffsetX prev._OffsetX this._OffsetX id (fun x -> v.OffsetX <- x)
    updateValue _DefOffsetY prev._OffsetY this._OffsetY id (fun x -> v.OffsetY <- x)
    updateValue _DefOffsetZ prev._OffsetZ this._OffsetZ id (fun x -> v.OffsetZ <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.TranslateTransform3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TranslateTransform3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MatrixTransform3D(setProps: MatrixTransform3D -> unit) as this =
  inherit Transform3D()

  static let _DefMatrix = System.Windows.Media.Media3D.MatrixTransform3D.MatrixProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Matrix3D

  do setProps this

  new() = MatrixTransform3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.MatrixTransform3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.MatrixTransform3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Matrix: System.Windows.Media.Media3D.Matrix3D voption
  member this.Matrix with set x = this._Matrix <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.MatrixTransform3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.MatrixTransform3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Matrix |> ValueOption.iter (fun x -> v.Matrix <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixTransform3D, v: System.Windows.Media.Media3D.MatrixTransform3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefMatrix prev._Matrix this._Matrix id (fun x -> v.Matrix <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.MatrixTransform3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MatrixTransform3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Transform3DGroup(setProps: Transform3DGroup -> unit) as this =
  inherit Transform3D()

  static let _DefChildren = System.Windows.Media.Media3D.Transform3DGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Transform3DCollection

  do setProps this

  new() = Transform3DGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Transform3DGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Transform3DGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: Transform3DCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Transform3DGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Transform3DGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.Media3D.Transform3DCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Transform3DGroup, v: System.Windows.Media.Media3D.Transform3DGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Transform3DGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Transform3DGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GeneralTransform3DCollection(setProps: GeneralTransform3DCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = GeneralTransform3DCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.GeneralTransform3DCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.GeneralTransform3DCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: GeneralTransform3D list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.GeneralTransform3DCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.GeneralTransform3DCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.GeneralTransform3D |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeneralTransform3DCollection, v: System.Windows.Media.Media3D.GeneralTransform3DCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.GeneralTransform3DCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeneralTransform3DCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GeneralTransformCollection(setProps: GeneralTransformCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = GeneralTransformCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GeneralTransformCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GeneralTransformCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: GeneralTransform list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GeneralTransformCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GeneralTransformCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.GeneralTransform |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeneralTransformCollection, v: System.Windows.Media.GeneralTransformCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GeneralTransformCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeneralTransformCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Geometry() =
  inherit Animatable()

  static let _DefTransform = System.Windows.Media.Geometry.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform

  [<DefaultValue>] val mutable private _Transform: Transform voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Geometry> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Geometry) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Geometry, v: System.Windows.Media.Geometry) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false


type CombinedGeometry(setProps: CombinedGeometry -> unit) as this =
  inherit Geometry()

  static let _DefGeometry1 = System.Windows.Media.CombinedGeometry.Geometry1Property.DefaultMetadata.DefaultValue :?> System.Windows.Media.Geometry
  static let _DefGeometry2 = System.Windows.Media.CombinedGeometry.Geometry2Property.DefaultMetadata.DefaultValue :?> System.Windows.Media.Geometry
  static let _DefGeometryCombineMode = System.Windows.Media.CombinedGeometry.GeometryCombineModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.GeometryCombineMode

  do setProps this

  new() = CombinedGeometry(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.CombinedGeometry voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.CombinedGeometry voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Geometry1: Geometry voption
  member this.Geometry1 with set x = this._Geometry1 <- ValueSome x

  [<DefaultValue>] val mutable private _Geometry2: Geometry voption
  member this.Geometry2 with set x = this._Geometry2 <- ValueSome x

  [<DefaultValue>] val mutable private _GeometryCombineMode: System.Windows.Media.GeometryCombineMode voption
  member this.GeometryCombineMode with set x = this._GeometryCombineMode <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.CombinedGeometry> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.CombinedGeometry) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Geometry1 |> ValueOption.iter (fun x -> v.Geometry1 <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._Geometry2 |> ValueOption.iter (fun x -> v.Geometry2 <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._GeometryCombineMode |> ValueOption.iter (fun x -> v.GeometryCombineMode <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CombinedGeometry, v: System.Windows.Media.CombinedGeometry) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefGeometry1 prev._Geometry1 this._Geometry1 id (fun x -> v.Geometry1 <- x)
    updateValue _DefGeometry2 prev._Geometry2 this._Geometry2 id (fun x -> v.Geometry2 <- x)
    updateValue _DefGeometryCombineMode prev._GeometryCombineMode this._GeometryCombineMode id (fun x -> v.GeometryCombineMode <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.CombinedGeometry())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CombinedGeometry as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EllipseGeometry(setProps: EllipseGeometry -> unit) as this =
  inherit Geometry()

  static let _DefCenter = System.Windows.Media.EllipseGeometry.CenterProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefRadiusX = System.Windows.Media.EllipseGeometry.RadiusXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRadiusY = System.Windows.Media.EllipseGeometry.RadiusYProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = EllipseGeometry(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.EllipseGeometry voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.EllipseGeometry voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Center: System.Windows.Point voption
  member this.Center with set x = this._Center <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusX: float voption
  member this.RadiusX with set x = this._RadiusX <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusY: float voption
  member this.RadiusY with set x = this._RadiusY <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.EllipseGeometry> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.EllipseGeometry) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Center |> ValueOption.iter (fun x -> v.Center <- x)
    this._RadiusX |> ValueOption.iter (fun x -> v.RadiusX <- x)
    this._RadiusY |> ValueOption.iter (fun x -> v.RadiusY <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EllipseGeometry, v: System.Windows.Media.EllipseGeometry) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCenter prev._Center this._Center id (fun x -> v.Center <- x)
    updateValue _DefRadiusX prev._RadiusX this._RadiusX id (fun x -> v.RadiusX <- x)
    updateValue _DefRadiusY prev._RadiusY this._RadiusY id (fun x -> v.RadiusY <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.EllipseGeometry())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EllipseGeometry as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GeometryGroup(setProps: GeometryGroup -> unit) as this =
  inherit Geometry()

  static let _DefChildren = System.Windows.Media.GeometryGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.GeometryCollection
  static let _DefFillRule = System.Windows.Media.GeometryGroup.FillRuleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FillRule

  do setProps this

  new() = GeometryGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GeometryGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GeometryGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: GeometryCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable private _FillRule: System.Windows.Media.FillRule voption
  member this.FillRule with set x = this._FillRule <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GeometryGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GeometryGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.GeometryCollection)
    this._FillRule |> ValueOption.iter (fun x -> v.FillRule <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeometryGroup, v: System.Windows.Media.GeometryGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    updateValue _DefFillRule prev._FillRule this._FillRule id (fun x -> v.FillRule <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GeometryGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeometryGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LineGeometry(setProps: LineGeometry -> unit) as this =
  inherit Geometry()

  static let _DefEndPoint = System.Windows.Media.LineGeometry.EndPointProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefStartPoint = System.Windows.Media.LineGeometry.StartPointProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point

  do setProps this

  new() = LineGeometry(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.LineGeometry voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.LineGeometry voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EndPoint: System.Windows.Point voption
  member this.EndPoint with set x = this._EndPoint <- ValueSome x

  [<DefaultValue>] val mutable private _StartPoint: System.Windows.Point voption
  member this.StartPoint with set x = this._StartPoint <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.LineGeometry> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.LineGeometry) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EndPoint |> ValueOption.iter (fun x -> v.EndPoint <- x)
    this._StartPoint |> ValueOption.iter (fun x -> v.StartPoint <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LineGeometry, v: System.Windows.Media.LineGeometry) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEndPoint prev._EndPoint this._EndPoint id (fun x -> v.EndPoint <- x)
    updateValue _DefStartPoint prev._StartPoint this._StartPoint id (fun x -> v.StartPoint <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.LineGeometry())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LineGeometry as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PathGeometry(setProps: PathGeometry -> unit) as this =
  inherit Geometry()

  static let _DefFigures = System.Windows.Media.PathGeometry.FiguresProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PathFigureCollection
  static let _DefFillRule = System.Windows.Media.PathGeometry.FillRuleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FillRule

  do setProps this

  new() = PathGeometry(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PathGeometry voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PathGeometry voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Figures: PathFigureCollection voption
  member this.Figures with set x = this._Figures <- ValueSome x

  [<DefaultValue>] val mutable private _FillRule: System.Windows.Media.FillRule voption
  member this.FillRule with set x = this._FillRule <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PathGeometry> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PathGeometry) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Figures |> ValueOption.iter (fun x -> v.Figures <- x.RenderNew () :?> System.Windows.Media.PathFigureCollection)
    this._FillRule |> ValueOption.iter (fun x -> v.FillRule <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PathGeometry, v: System.Windows.Media.PathGeometry) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFigures prev._Figures this._Figures id (fun x -> v.Figures <- x)
    updateValue _DefFillRule prev._FillRule this._FillRule id (fun x -> v.FillRule <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PathGeometry())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PathGeometry as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RectangleGeometry(setProps: RectangleGeometry -> unit) as this =
  inherit Geometry()

  static let _DefRadiusX = System.Windows.Media.RectangleGeometry.RadiusXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRadiusY = System.Windows.Media.RectangleGeometry.RadiusYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRect = System.Windows.Media.RectangleGeometry.RectProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect

  do setProps this

  new() = RectangleGeometry(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.RectangleGeometry voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.RectangleGeometry voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusX: float voption
  member this.RadiusX with set x = this._RadiusX <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusY: float voption
  member this.RadiusY with set x = this._RadiusY <- ValueSome x

  [<DefaultValue>] val mutable private _Rect: System.Windows.Rect voption
  member this.Rect with set x = this._Rect <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.RectangleGeometry> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.RectangleGeometry) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._RadiusX |> ValueOption.iter (fun x -> v.RadiusX <- x)
    this._RadiusY |> ValueOption.iter (fun x -> v.RadiusY <- x)
    this._Rect |> ValueOption.iter (fun x -> v.Rect <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RectangleGeometry, v: System.Windows.Media.RectangleGeometry) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefRadiusX prev._RadiusX this._RadiusX id (fun x -> v.RadiusX <- x)
    updateValue _DefRadiusY prev._RadiusY this._RadiusY id (fun x -> v.RadiusY <- x)
    updateValue _DefRect prev._Rect this._Rect id (fun x -> v.Rect <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.RectangleGeometry())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RectangleGeometry as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type StreamGeometry(setProps: StreamGeometry -> unit) as this =
  inherit Geometry()

  static let _DefFillRule = System.Windows.Media.StreamGeometry.FillRuleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FillRule

  do setProps this

  new() = StreamGeometry(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.StreamGeometry voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.StreamGeometry voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _FillRule: System.Windows.Media.FillRule voption
  member this.FillRule with set x = this._FillRule <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.StreamGeometry> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.StreamGeometry) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._FillRule |> ValueOption.iter (fun x -> v.FillRule <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StreamGeometry, v: System.Windows.Media.StreamGeometry) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFillRule prev._FillRule this._FillRule id (fun x -> v.FillRule <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.StreamGeometry())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? StreamGeometry as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Geometry3D() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Geometry3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Geometry3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Geometry3D, v: System.Windows.Media.Media3D.Geometry3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type MeshGeometry3D(setProps: MeshGeometry3D -> unit) as this =
  inherit Geometry3D()

  static let _DefNormals = System.Windows.Media.Media3D.MeshGeometry3D.NormalsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Vector3DCollection
  static let _DefPositions = System.Windows.Media.Media3D.MeshGeometry3D.PositionsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Point3DCollection
  static let _DefTextureCoordinates = System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinatesProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PointCollection
  static let _DefTriangleIndices = System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndicesProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Int32Collection

  do setProps this

  new() = MeshGeometry3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.MeshGeometry3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.MeshGeometry3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Normals: Vector3DCollection voption
  member this.Normals with set x = this._Normals <- ValueSome x

  [<DefaultValue>] val mutable private _Positions: Point3DCollection voption
  member this.Positions with set x = this._Positions <- ValueSome x

  [<DefaultValue>] val mutable private _TextureCoordinates: PointCollection voption
  member this.TextureCoordinates with set x = this._TextureCoordinates <- ValueSome x

  [<DefaultValue>] val mutable private _TriangleIndices: Int32Collection voption
  member this.TriangleIndices with set x = this._TriangleIndices <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.MeshGeometry3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.MeshGeometry3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Normals |> ValueOption.iter (fun x -> v.Normals <- x.RenderNew () :?> System.Windows.Media.Media3D.Vector3DCollection)
    this._Positions |> ValueOption.iter (fun x -> v.Positions <- x.RenderNew () :?> System.Windows.Media.Media3D.Point3DCollection)
    this._TextureCoordinates |> ValueOption.iter (fun x -> v.TextureCoordinates <- x.RenderNew () :?> System.Windows.Media.PointCollection)
    this._TriangleIndices |> ValueOption.iter (fun x -> v.TriangleIndices <- x.RenderNew () :?> System.Windows.Media.Int32Collection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MeshGeometry3D, v: System.Windows.Media.Media3D.MeshGeometry3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefNormals prev._Normals this._Normals id (fun x -> v.Normals <- x)
    updateValue _DefPositions prev._Positions this._Positions id (fun x -> v.Positions <- x)
    updateValue _DefTextureCoordinates prev._TextureCoordinates this._TextureCoordinates id (fun x -> v.TextureCoordinates <- x)
    updateValue _DefTriangleIndices prev._TriangleIndices this._TriangleIndices id (fun x -> v.TriangleIndices <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.MeshGeometry3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MeshGeometry3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GeometryCollection(setProps: GeometryCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = GeometryCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GeometryCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GeometryCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Geometry list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GeometryCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GeometryCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Geometry |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeometryCollection, v: System.Windows.Media.GeometryCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GeometryCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeometryCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GradientStop(setProps: GradientStop -> unit) as this =
  inherit Animatable()

  static let _DefColor = System.Windows.Media.GradientStop.ColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color
  static let _DefOffset = System.Windows.Media.GradientStop.OffsetProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = GradientStop(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GradientStop voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GradientStop voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Color: System.Windows.Media.Color voption
  member this.Color with set x = this._Color <- ValueSome x

  [<DefaultValue>] val mutable private _Offset: float voption
  member this.Offset with set x = this._Offset <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GradientStop> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GradientStop) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Color |> ValueOption.iter (fun x -> v.Color <- x)
    this._Offset |> ValueOption.iter (fun x -> v.Offset <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GradientStop, v: System.Windows.Media.GradientStop) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefColor prev._Color this._Color id (fun x -> v.Color <- x)
    updateValue _DefOffset prev._Offset this._Offset id (fun x -> v.Offset <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GradientStop())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GradientStop as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GradientStopCollection(setProps: GradientStopCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = GradientStopCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GradientStopCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GradientStopCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: GradientStop list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GradientStopCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GradientStopCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.GradientStop |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GradientStopCollection, v: System.Windows.Media.GradientStopCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GradientStopCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GradientStopCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GuidelineSet(setProps: GuidelineSet -> unit) as this =
  inherit Animatable()

  static let _DefGuidelinesX = System.Windows.Media.GuidelineSet.GuidelinesXProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DoubleCollection
  static let _DefGuidelinesY = System.Windows.Media.GuidelineSet.GuidelinesYProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DoubleCollection

  do setProps this

  new() = GuidelineSet(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.GuidelineSet voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.GuidelineSet voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _GuidelinesX: DoubleCollection voption
  member this.GuidelinesX with set x = this._GuidelinesX <- ValueSome x

  [<DefaultValue>] val mutable private _GuidelinesY: DoubleCollection voption
  member this.GuidelinesY with set x = this._GuidelinesY <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.GuidelineSet> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.GuidelineSet) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._GuidelinesX |> ValueOption.iter (fun x -> v.GuidelinesX <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this._GuidelinesY |> ValueOption.iter (fun x -> v.GuidelinesY <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GuidelineSet, v: System.Windows.Media.GuidelineSet) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefGuidelinesX prev._GuidelinesX this._GuidelinesX id (fun x -> v.GuidelinesX <- x)
    updateValue _DefGuidelinesY prev._GuidelinesY this._GuidelinesY id (fun x -> v.GuidelinesY <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.GuidelineSet())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GuidelineSet as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ImageSource() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.ImageSource> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.ImageSource) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ImageSource, v: System.Windows.Media.ImageSource) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


[<AbstractClass>]
type BitmapSource() =
  inherit ImageSource()


  [<DefaultValue>] val mutable private _DecodeFailed: EventHandlerWrapper<System.Windows.Media.ExceptionEventArgs> voption
  member this.DecodeFailed with set x = this._DecodeFailed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DownloadCompleted: EventHandlerWrapper<System.EventArgs> voption
  member this.DownloadCompleted with set x = this._DownloadCompleted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DownloadFailed: EventHandlerWrapper<System.Windows.Media.ExceptionEventArgs> voption
  member this.DownloadFailed with set x = this._DownloadFailed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DownloadProgress: EventHandlerWrapper<System.Windows.Media.Imaging.DownloadProgressEventArgs> voption
  member this.DownloadProgress with set x = this._DownloadProgress <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Imaging.BitmapSource> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Imaging.BitmapSource) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._DecodeFailed |> ValueOption.iter (fun x -> x.Subscription <- v.DecodeFailed.Subscribe x.Fn)
    this._DownloadCompleted |> ValueOption.iter (fun x -> x.Subscription <- v.DownloadCompleted.Subscribe x.Fn)
    this._DownloadFailed |> ValueOption.iter (fun x -> x.Subscription <- v.DownloadFailed.Subscribe x.Fn)
    this._DownloadProgress |> ValueOption.iter (fun x -> x.Subscription <- v.DownloadProgress.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BitmapSource, v: System.Windows.Media.Imaging.BitmapSource) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateFn prev._DecodeFailed this._DecodeFailed v.DecodeFailed
    updateFn prev._DownloadCompleted this._DownloadCompleted v.DownloadCompleted
    updateFn prev._DownloadFailed this._DownloadFailed v.DownloadFailed
    updateFn prev._DownloadProgress this._DownloadProgress v.DownloadProgress
    this.SilenceEvents <- false


type ColorConvertedBitmap(setProps: ColorConvertedBitmap -> unit) as this =
  inherit BitmapSource()

  static let _DefDestinationColorContext = System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContextProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ColorContext
  static let _DefDestinationFormat = System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormatProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PixelFormat
  static let _DefSource = System.Windows.Media.Imaging.ColorConvertedBitmap.SourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Imaging.BitmapSource
  static let _DefSourceColorContext = System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContextProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ColorContext

  do setProps this

  new() = ColorConvertedBitmap(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Imaging.ColorConvertedBitmap voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Imaging.ColorConvertedBitmap voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _DestinationColorContext: System.Windows.Media.ColorContext voption
  member this.DestinationColorContext with set x = this._DestinationColorContext <- ValueSome x

  [<DefaultValue>] val mutable private _DestinationFormat: System.Windows.Media.PixelFormat voption
  member this.DestinationFormat with set x = this._DestinationFormat <- ValueSome x

  [<DefaultValue>] val mutable private _Source: BitmapSource voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _SourceColorContext: System.Windows.Media.ColorContext voption
  member this.SourceColorContext with set x = this._SourceColorContext <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Imaging.ColorConvertedBitmap> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Imaging.ColorConvertedBitmap) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._DestinationColorContext |> ValueOption.iter (fun x -> v.DestinationColorContext <- x)
    this._DestinationFormat |> ValueOption.iter (fun x -> v.DestinationFormat <- x)
    this._Source |> ValueOption.iter (fun x -> v.Source <- x.RenderNew () :?> System.Windows.Media.Imaging.BitmapSource)
    this._SourceColorContext |> ValueOption.iter (fun x -> v.SourceColorContext <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ColorConvertedBitmap, v: System.Windows.Media.Imaging.ColorConvertedBitmap) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDestinationColorContext prev._DestinationColorContext this._DestinationColorContext id (fun x -> v.DestinationColorContext <- x)
    updateValue _DefDestinationFormat prev._DestinationFormat this._DestinationFormat id (fun x -> v.DestinationFormat <- x)
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateValue _DefSourceColorContext prev._SourceColorContext this._SourceColorContext id (fun x -> v.SourceColorContext <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Imaging.ColorConvertedBitmap())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ColorConvertedBitmap as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CroppedBitmap(setProps: CroppedBitmap -> unit) as this =
  inherit BitmapSource()

  static let _DefSource = System.Windows.Media.Imaging.CroppedBitmap.SourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Imaging.BitmapSource
  static let _DefSourceRect = System.Windows.Media.Imaging.CroppedBitmap.SourceRectProperty.DefaultMetadata.DefaultValue :?> System.Windows.Int32Rect

  do setProps this

  new() = CroppedBitmap(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Imaging.CroppedBitmap voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Imaging.CroppedBitmap voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Source: BitmapSource voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _SourceRect: System.Windows.Int32Rect voption
  member this.SourceRect with set x = this._SourceRect <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Imaging.CroppedBitmap> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Imaging.CroppedBitmap) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Source |> ValueOption.iter (fun x -> v.Source <- x.RenderNew () :?> System.Windows.Media.Imaging.BitmapSource)
    this._SourceRect |> ValueOption.iter (fun x -> v.SourceRect <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CroppedBitmap, v: System.Windows.Media.Imaging.CroppedBitmap) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateValue _DefSourceRect prev._SourceRect this._SourceRect id (fun x -> v.SourceRect <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Imaging.CroppedBitmap())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CroppedBitmap as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FormatConvertedBitmap(setProps: FormatConvertedBitmap -> unit) as this =
  inherit BitmapSource()

  static let _DefAlphaThreshold = System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThresholdProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefDestinationFormat = System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormatProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PixelFormat
  static let _DefDestinationPalette = System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPaletteProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Imaging.BitmapPalette
  static let _DefSource = System.Windows.Media.Imaging.FormatConvertedBitmap.SourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Imaging.BitmapSource

  do setProps this

  new() = FormatConvertedBitmap(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Imaging.FormatConvertedBitmap voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Imaging.FormatConvertedBitmap voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AlphaThreshold: float voption
  member this.AlphaThreshold with set x = this._AlphaThreshold <- ValueSome x

  [<DefaultValue>] val mutable private _DestinationFormat: System.Windows.Media.PixelFormat voption
  member this.DestinationFormat with set x = this._DestinationFormat <- ValueSome x

  [<DefaultValue>] val mutable private _DestinationPalette: System.Windows.Media.Imaging.BitmapPalette voption
  member this.DestinationPalette with set x = this._DestinationPalette <- ValueSome x

  [<DefaultValue>] val mutable private _Source: BitmapSource voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Imaging.FormatConvertedBitmap> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Imaging.FormatConvertedBitmap) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AlphaThreshold |> ValueOption.iter (fun x -> v.AlphaThreshold <- x)
    this._DestinationFormat |> ValueOption.iter (fun x -> v.DestinationFormat <- x)
    this._DestinationPalette |> ValueOption.iter (fun x -> v.DestinationPalette <- x)
    this._Source |> ValueOption.iter (fun x -> v.Source <- x.RenderNew () :?> System.Windows.Media.Imaging.BitmapSource)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FormatConvertedBitmap, v: System.Windows.Media.Imaging.FormatConvertedBitmap) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAlphaThreshold prev._AlphaThreshold this._AlphaThreshold id (fun x -> v.AlphaThreshold <- x)
    updateValue _DefDestinationFormat prev._DestinationFormat this._DestinationFormat id (fun x -> v.DestinationFormat <- x)
    updateValue _DefDestinationPalette prev._DestinationPalette this._DestinationPalette id (fun x -> v.DestinationPalette <- x)
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Imaging.FormatConvertedBitmap())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FormatConvertedBitmap as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TransformedBitmap(setProps: TransformedBitmap -> unit) as this =
  inherit BitmapSource()

  static let _DefSource = System.Windows.Media.Imaging.TransformedBitmap.SourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Imaging.BitmapSource
  static let _DefTransform = System.Windows.Media.Imaging.TransformedBitmap.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform

  do setProps this

  new() = TransformedBitmap(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Imaging.TransformedBitmap voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Imaging.TransformedBitmap voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Source: BitmapSource voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _Transform: Transform voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Imaging.TransformedBitmap> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Imaging.TransformedBitmap) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Source |> ValueOption.iter (fun x -> v.Source <- x.RenderNew () :?> System.Windows.Media.Imaging.BitmapSource)
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TransformedBitmap, v: System.Windows.Media.Imaging.TransformedBitmap) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Imaging.TransformedBitmap())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TransformedBitmap as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type D3DImage(setProps: D3DImage -> unit) as this =
  inherit ImageSource()


  do setProps this

  new() = D3DImage(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Interop.D3DImage voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Interop.D3DImage voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsFrontBufferAvailableChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsFrontBufferAvailableChanged with set x = this._IsFrontBufferAvailableChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Interop.D3DImage> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Interop.D3DImage) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsFrontBufferAvailableChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsFrontBufferAvailableChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: D3DImage, v: System.Windows.Interop.D3DImage) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateFn prev._IsFrontBufferAvailableChanged this._IsFrontBufferAvailableChanged v.IsFrontBufferAvailableChanged
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Interop.D3DImage())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? D3DImage as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DrawingImage(setProps: DrawingImage -> unit) as this =
  inherit ImageSource()

  static let _DefDrawing = System.Windows.Media.DrawingImage.DrawingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Drawing

  do setProps this

  new() = DrawingImage(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.DrawingImage voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.DrawingImage voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Drawing: Drawing voption
  member this.Drawing with set x = this._Drawing <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.DrawingImage> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.DrawingImage) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Drawing |> ValueOption.iter (fun x -> v.Drawing <- x.RenderNew () :?> System.Windows.Media.Drawing)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DrawingImage, v: System.Windows.Media.DrawingImage) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDrawing prev._Drawing this._Drawing id (fun x -> v.Drawing <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.DrawingImage())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DrawingImage as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Material() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Material> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Material) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Material, v: System.Windows.Media.Media3D.Material) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type DiffuseMaterial(setProps: DiffuseMaterial -> unit) as this =
  inherit Material()

  static let _DefAmbientColor = System.Windows.Media.Media3D.DiffuseMaterial.AmbientColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color
  static let _DefBrush = System.Windows.Media.Media3D.DiffuseMaterial.BrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefColor = System.Windows.Media.Media3D.DiffuseMaterial.ColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color

  do setProps this

  new() = DiffuseMaterial(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.DiffuseMaterial voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.DiffuseMaterial voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AmbientColor: System.Windows.Media.Color voption
  member this.AmbientColor with set x = this._AmbientColor <- ValueSome x

  [<DefaultValue>] val mutable private _Brush: Brush voption
  member this.Brush with set x = this._Brush <- ValueSome x

  [<DefaultValue>] val mutable private _Color: System.Windows.Media.Color voption
  member this.Color with set x = this._Color <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.DiffuseMaterial> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.DiffuseMaterial) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AmbientColor |> ValueOption.iter (fun x -> v.AmbientColor <- x)
    this._Brush |> ValueOption.iter (fun x -> v.Brush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Color |> ValueOption.iter (fun x -> v.Color <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiffuseMaterial, v: System.Windows.Media.Media3D.DiffuseMaterial) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAmbientColor prev._AmbientColor this._AmbientColor id (fun x -> v.AmbientColor <- x)
    updateValue _DefBrush prev._Brush this._Brush id (fun x -> v.Brush <- x)
    updateValue _DefColor prev._Color this._Color id (fun x -> v.Color <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.DiffuseMaterial())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiffuseMaterial as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EmissiveMaterial(setProps: EmissiveMaterial -> unit) as this =
  inherit Material()

  static let _DefBrush = System.Windows.Media.Media3D.EmissiveMaterial.BrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefColor = System.Windows.Media.Media3D.EmissiveMaterial.ColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color

  do setProps this

  new() = EmissiveMaterial(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.EmissiveMaterial voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.EmissiveMaterial voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Brush: Brush voption
  member this.Brush with set x = this._Brush <- ValueSome x

  [<DefaultValue>] val mutable private _Color: System.Windows.Media.Color voption
  member this.Color with set x = this._Color <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.EmissiveMaterial> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.EmissiveMaterial) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Brush |> ValueOption.iter (fun x -> v.Brush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Color |> ValueOption.iter (fun x -> v.Color <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EmissiveMaterial, v: System.Windows.Media.Media3D.EmissiveMaterial) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBrush prev._Brush this._Brush id (fun x -> v.Brush <- x)
    updateValue _DefColor prev._Color this._Color id (fun x -> v.Color <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.EmissiveMaterial())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EmissiveMaterial as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MaterialGroup(setProps: MaterialGroup -> unit) as this =
  inherit Material()

  static let _DefChildren = System.Windows.Media.Media3D.MaterialGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.MaterialCollection

  do setProps this

  new() = MaterialGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.MaterialGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.MaterialGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: MaterialCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.MaterialGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.MaterialGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.Media3D.MaterialCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MaterialGroup, v: System.Windows.Media.Media3D.MaterialGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.MaterialGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MaterialGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SpecularMaterial(setProps: SpecularMaterial -> unit) as this =
  inherit Material()

  static let _DefBrush = System.Windows.Media.Media3D.SpecularMaterial.BrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefColor = System.Windows.Media.Media3D.SpecularMaterial.ColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color
  static let _DefSpecularPower = System.Windows.Media.Media3D.SpecularMaterial.SpecularPowerProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = SpecularMaterial(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.SpecularMaterial voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.SpecularMaterial voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Brush: Brush voption
  member this.Brush with set x = this._Brush <- ValueSome x

  [<DefaultValue>] val mutable private _Color: System.Windows.Media.Color voption
  member this.Color with set x = this._Color <- ValueSome x

  [<DefaultValue>] val mutable private _SpecularPower: float voption
  member this.SpecularPower with set x = this._SpecularPower <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.SpecularMaterial> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.SpecularMaterial) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Brush |> ValueOption.iter (fun x -> v.Brush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Color |> ValueOption.iter (fun x -> v.Color <- x)
    this._SpecularPower |> ValueOption.iter (fun x -> v.SpecularPower <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SpecularMaterial, v: System.Windows.Media.Media3D.SpecularMaterial) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBrush prev._Brush this._Brush id (fun x -> v.Brush <- x)
    updateValue _DefColor prev._Color this._Color id (fun x -> v.Color <- x)
    updateValue _DefSpecularPower prev._SpecularPower this._SpecularPower id (fun x -> v.SpecularPower <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.SpecularMaterial())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SpecularMaterial as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MaterialCollection(setProps: MaterialCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = MaterialCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.MaterialCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.MaterialCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Material list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.MaterialCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.MaterialCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.Material |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MaterialCollection, v: System.Windows.Media.Media3D.MaterialCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.MaterialCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MaterialCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MediaPlayer(setProps: MediaPlayer -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = MediaPlayer(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.MediaPlayer voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.MediaPlayer voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Balance: float voption
  member this.Balance with set x = this._Balance <- ValueSome x

  [<DefaultValue>] val mutable private _Clock: System.Windows.Media.MediaClock voption
  member this.Clock with set x = this._Clock <- ValueSome x

  [<DefaultValue>] val mutable private _IsMuted: bool voption
  member this.IsMuted with set x = this._IsMuted <- ValueSome x

  [<DefaultValue>] val mutable private _Position: System.TimeSpan voption
  member this.Position with set x = this._Position <- ValueSome x

  [<DefaultValue>] val mutable private _ScrubbingEnabled: bool voption
  member this.ScrubbingEnabled with set x = this._ScrubbingEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _SpeedRatio: float voption
  member this.SpeedRatio with set x = this._SpeedRatio <- ValueSome x

  [<DefaultValue>] val mutable private _Volume: float voption
  member this.Volume with set x = this._Volume <- ValueSome x

  [<DefaultValue>] val mutable private _BufferingEnded: EventHandlerWrapper<System.EventArgs> voption
  member this.BufferingEnded with set x = this._BufferingEnded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _BufferingStarted: EventHandlerWrapper<System.EventArgs> voption
  member this.BufferingStarted with set x = this._BufferingStarted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MediaEnded: EventHandlerWrapper<System.EventArgs> voption
  member this.MediaEnded with set x = this._MediaEnded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MediaFailed: EventHandlerWrapper<System.Windows.Media.ExceptionEventArgs> voption
  member this.MediaFailed with set x = this._MediaFailed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MediaOpened: EventHandlerWrapper<System.EventArgs> voption
  member this.MediaOpened with set x = this._MediaOpened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ScriptCommand: EventHandlerWrapper<System.Windows.Media.MediaScriptCommandEventArgs> voption
  member this.ScriptCommand with set x = this._ScriptCommand <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.MediaPlayer> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.MediaPlayer) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Balance |> ValueOption.iter (fun x -> v.Balance <- x)
    this._Clock |> ValueOption.iter (fun x -> v.Clock <- x)
    this._IsMuted |> ValueOption.iter (fun x -> v.IsMuted <- x)
    this._Position |> ValueOption.iter (fun x -> v.Position <- x)
    this._ScrubbingEnabled |> ValueOption.iter (fun x -> v.ScrubbingEnabled <- x)
    this._SpeedRatio |> ValueOption.iter (fun x -> v.SpeedRatio <- x)
    this._Volume |> ValueOption.iter (fun x -> v.Volume <- x)
    this._BufferingEnded |> ValueOption.iter (fun x -> x.Subscription <- v.BufferingEnded.Subscribe x.Fn)
    this._BufferingStarted |> ValueOption.iter (fun x -> x.Subscription <- v.BufferingStarted.Subscribe x.Fn)
    this._MediaEnded |> ValueOption.iter (fun x -> x.Subscription <- v.MediaEnded.Subscribe x.Fn)
    this._MediaFailed |> ValueOption.iter (fun x -> x.Subscription <- v.MediaFailed.Subscribe x.Fn)
    this._MediaOpened |> ValueOption.iter (fun x -> x.Subscription <- v.MediaOpened.Subscribe x.Fn)
    this._ScriptCommand |> ValueOption.iter (fun x -> x.Subscription <- v.ScriptCommand.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MediaPlayer, v: System.Windows.Media.MediaPlayer) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<float> prev._Balance this._Balance id (fun x -> v.Balance <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.MediaClock> prev._Clock this._Clock id (fun x -> v.Clock <- x)
    updateValue Unchecked.defaultof<bool> prev._IsMuted this._IsMuted id (fun x -> v.IsMuted <- x)
    updateValue Unchecked.defaultof<System.TimeSpan> prev._Position this._Position id (fun x -> v.Position <- x)
    updateValue Unchecked.defaultof<bool> prev._ScrubbingEnabled this._ScrubbingEnabled id (fun x -> v.ScrubbingEnabled <- x)
    updateValue Unchecked.defaultof<float> prev._SpeedRatio this._SpeedRatio id (fun x -> v.SpeedRatio <- x)
    updateValue Unchecked.defaultof<float> prev._Volume this._Volume id (fun x -> v.Volume <- x)
    updateFn prev._BufferingEnded this._BufferingEnded v.BufferingEnded
    updateFn prev._BufferingStarted this._BufferingStarted v.BufferingStarted
    updateFn prev._MediaEnded this._MediaEnded v.MediaEnded
    updateFn prev._MediaFailed this._MediaFailed v.MediaFailed
    updateFn prev._MediaOpened this._MediaOpened v.MediaOpened
    updateFn prev._ScriptCommand this._ScriptCommand v.ScriptCommand
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.MediaPlayer())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MediaPlayer as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Model3D() =
  inherit Animatable()

  static let _DefTransform = System.Windows.Media.Media3D.Model3D.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Transform3D

  [<DefaultValue>] val mutable private _Transform: Transform3D voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Model3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Model3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Media3D.Transform3D)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Model3D, v: System.Windows.Media.Media3D.Model3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false


type GeometryModel3D(setProps: GeometryModel3D -> unit) as this =
  inherit Model3D()

  static let _DefBackMaterial = System.Windows.Media.Media3D.GeometryModel3D.BackMaterialProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Material
  static let _DefGeometry = System.Windows.Media.Media3D.GeometryModel3D.GeometryProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Geometry3D
  static let _DefMaterial = System.Windows.Media.Media3D.GeometryModel3D.MaterialProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Material

  do setProps this

  new() = GeometryModel3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.GeometryModel3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.GeometryModel3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _BackMaterial: Material voption
  member this.BackMaterial with set x = this._BackMaterial <- ValueSome x

  [<DefaultValue>] val mutable private _Geometry: Geometry3D voption
  member this.Geometry with set x = this._Geometry <- ValueSome x

  [<DefaultValue>] val mutable private _Material: Material voption
  member this.Material with set x = this._Material <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.GeometryModel3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.GeometryModel3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BackMaterial |> ValueOption.iter (fun x -> v.BackMaterial <- x.RenderNew () :?> System.Windows.Media.Media3D.Material)
    this._Geometry |> ValueOption.iter (fun x -> v.Geometry <- x.RenderNew () :?> System.Windows.Media.Media3D.Geometry3D)
    this._Material |> ValueOption.iter (fun x -> v.Material <- x.RenderNew () :?> System.Windows.Media.Media3D.Material)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GeometryModel3D, v: System.Windows.Media.Media3D.GeometryModel3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackMaterial prev._BackMaterial this._BackMaterial id (fun x -> v.BackMaterial <- x)
    updateValue _DefGeometry prev._Geometry this._Geometry id (fun x -> v.Geometry <- x)
    updateValue _DefMaterial prev._Material this._Material id (fun x -> v.Material <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.GeometryModel3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GeometryModel3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Light() =
  inherit Model3D()

  static let _DefColor = System.Windows.Media.Media3D.Light.ColorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color

  [<DefaultValue>] val mutable private _Color: System.Windows.Media.Color voption
  member this.Color with set x = this._Color <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Light> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Light) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Color |> ValueOption.iter (fun x -> v.Color <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Light, v: System.Windows.Media.Media3D.Light) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefColor prev._Color this._Color id (fun x -> v.Color <- x)
    this.SilenceEvents <- false


type AmbientLight(setProps: AmbientLight -> unit) as this =
  inherit Light()


  do setProps this

  new() = AmbientLight(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.AmbientLight voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.AmbientLight voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.AmbientLight> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.AmbientLight) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: AmbientLight, v: System.Windows.Media.Media3D.AmbientLight) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.AmbientLight())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? AmbientLight as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DirectionalLight(setProps: DirectionalLight -> unit) as this =
  inherit Light()

  static let _DefDirection = System.Windows.Media.Media3D.DirectionalLight.DirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Vector3D

  do setProps this

  new() = DirectionalLight(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.DirectionalLight voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.DirectionalLight voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Direction: System.Windows.Media.Media3D.Vector3D voption
  member this.Direction with set x = this._Direction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.DirectionalLight> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.DirectionalLight) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Direction |> ValueOption.iter (fun x -> v.Direction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DirectionalLight, v: System.Windows.Media.Media3D.DirectionalLight) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDirection prev._Direction this._Direction id (fun x -> v.Direction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.DirectionalLight())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DirectionalLight as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type PointLightBase() =
  inherit Light()

  static let _DefConstantAttenuation = System.Windows.Media.Media3D.PointLightBase.ConstantAttenuationProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLinearAttenuation = System.Windows.Media.Media3D.PointLightBase.LinearAttenuationProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPosition = System.Windows.Media.Media3D.PointLightBase.PositionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Point3D
  static let _DefQuadraticAttenuation = System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuationProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRange = System.Windows.Media.Media3D.PointLightBase.RangeProperty.DefaultMetadata.DefaultValue :?> float

  [<DefaultValue>] val mutable private _ConstantAttenuation: float voption
  member this.ConstantAttenuation with set x = this._ConstantAttenuation <- ValueSome x

  [<DefaultValue>] val mutable private _LinearAttenuation: float voption
  member this.LinearAttenuation with set x = this._LinearAttenuation <- ValueSome x

  [<DefaultValue>] val mutable private _Position: System.Windows.Media.Media3D.Point3D voption
  member this.Position with set x = this._Position <- ValueSome x

  [<DefaultValue>] val mutable private _QuadraticAttenuation: float voption
  member this.QuadraticAttenuation with set x = this._QuadraticAttenuation <- ValueSome x

  [<DefaultValue>] val mutable private _Range: float voption
  member this.Range with set x = this._Range <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.PointLightBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.PointLightBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ConstantAttenuation |> ValueOption.iter (fun x -> v.ConstantAttenuation <- x)
    this._LinearAttenuation |> ValueOption.iter (fun x -> v.LinearAttenuation <- x)
    this._Position |> ValueOption.iter (fun x -> v.Position <- x)
    this._QuadraticAttenuation |> ValueOption.iter (fun x -> v.QuadraticAttenuation <- x)
    this._Range |> ValueOption.iter (fun x -> v.Range <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointLightBase, v: System.Windows.Media.Media3D.PointLightBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefConstantAttenuation prev._ConstantAttenuation this._ConstantAttenuation id (fun x -> v.ConstantAttenuation <- x)
    updateValue _DefLinearAttenuation prev._LinearAttenuation this._LinearAttenuation id (fun x -> v.LinearAttenuation <- x)
    updateValue _DefPosition prev._Position this._Position id (fun x -> v.Position <- x)
    updateValue _DefQuadraticAttenuation prev._QuadraticAttenuation this._QuadraticAttenuation id (fun x -> v.QuadraticAttenuation <- x)
    updateValue _DefRange prev._Range this._Range id (fun x -> v.Range <- x)
    this.SilenceEvents <- false


type PointLight(setProps: PointLight -> unit) as this =
  inherit PointLightBase()


  do setProps this

  new() = PointLight(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.PointLight voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.PointLight voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.PointLight> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.PointLight) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointLight, v: System.Windows.Media.Media3D.PointLight) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.PointLight())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PointLight as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SpotLight(setProps: SpotLight -> unit) as this =
  inherit PointLightBase()

  static let _DefDirection = System.Windows.Media.Media3D.SpotLight.DirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Vector3D
  static let _DefInnerConeAngle = System.Windows.Media.Media3D.SpotLight.InnerConeAngleProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOuterConeAngle = System.Windows.Media.Media3D.SpotLight.OuterConeAngleProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = SpotLight(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.SpotLight voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.SpotLight voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Direction: System.Windows.Media.Media3D.Vector3D voption
  member this.Direction with set x = this._Direction <- ValueSome x

  [<DefaultValue>] val mutable private _InnerConeAngle: float voption
  member this.InnerConeAngle with set x = this._InnerConeAngle <- ValueSome x

  [<DefaultValue>] val mutable private _OuterConeAngle: float voption
  member this.OuterConeAngle with set x = this._OuterConeAngle <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.SpotLight> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.SpotLight) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Direction |> ValueOption.iter (fun x -> v.Direction <- x)
    this._InnerConeAngle |> ValueOption.iter (fun x -> v.InnerConeAngle <- x)
    this._OuterConeAngle |> ValueOption.iter (fun x -> v.OuterConeAngle <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SpotLight, v: System.Windows.Media.Media3D.SpotLight) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDirection prev._Direction this._Direction id (fun x -> v.Direction <- x)
    updateValue _DefInnerConeAngle prev._InnerConeAngle this._InnerConeAngle id (fun x -> v.InnerConeAngle <- x)
    updateValue _DefOuterConeAngle prev._OuterConeAngle this._OuterConeAngle id (fun x -> v.OuterConeAngle <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.SpotLight())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SpotLight as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Model3DGroup(setProps: Model3DGroup -> unit) as this =
  inherit Model3D()

  static let _DefChildren = System.Windows.Media.Media3D.Model3DGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Model3DCollection

  do setProps this

  new() = Model3DGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Model3DGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Model3DGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: Model3DCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Model3DGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Model3DGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.Media3D.Model3DCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Model3DGroup, v: System.Windows.Media.Media3D.Model3DGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Model3DGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Model3DGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Model3DCollection(setProps: Model3DCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = Model3DCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Model3DCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Model3DCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Model3D list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Model3DCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Model3DCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.Model3D |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Model3DCollection, v: System.Windows.Media.Media3D.Model3DCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Model3DCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Model3DCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PathFigure(setProps: PathFigure -> unit) as this =
  inherit Animatable()

  static let _DefIsClosed = System.Windows.Media.PathFigure.IsClosedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsFilled = System.Windows.Media.PathFigure.IsFilledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSegments = System.Windows.Media.PathFigure.SegmentsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PathSegmentCollection
  static let _DefStartPoint = System.Windows.Media.PathFigure.StartPointProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point

  do setProps this

  new() = PathFigure(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PathFigure voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PathFigure voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsClosed: bool voption
  member this.IsClosed with set x = this._IsClosed <- ValueSome x

  [<DefaultValue>] val mutable private _IsFilled: bool voption
  member this.IsFilled with set x = this._IsFilled <- ValueSome x

  [<DefaultValue>] val mutable private _Segments: PathSegmentCollection voption
  member this.Segments with set x = this._Segments <- ValueSome x

  [<DefaultValue>] val mutable private _StartPoint: System.Windows.Point voption
  member this.StartPoint with set x = this._StartPoint <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PathFigure> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PathFigure) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsClosed |> ValueOption.iter (fun x -> v.IsClosed <- x)
    this._IsFilled |> ValueOption.iter (fun x -> v.IsFilled <- x)
    this._Segments |> ValueOption.iter (fun x -> v.Segments <- x.RenderNew () :?> System.Windows.Media.PathSegmentCollection)
    this._StartPoint |> ValueOption.iter (fun x -> v.StartPoint <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PathFigure, v: System.Windows.Media.PathFigure) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsClosed prev._IsClosed this._IsClosed id (fun x -> v.IsClosed <- x)
    updateValue _DefIsFilled prev._IsFilled this._IsFilled id (fun x -> v.IsFilled <- x)
    updateValue _DefSegments prev._Segments this._Segments id (fun x -> v.Segments <- x)
    updateValue _DefStartPoint prev._StartPoint this._StartPoint id (fun x -> v.StartPoint <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PathFigure())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PathFigure as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PathFigureCollection(setProps: PathFigureCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = PathFigureCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PathFigureCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PathFigureCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: PathFigure list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PathFigureCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PathFigureCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.PathFigure |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PathFigureCollection, v: System.Windows.Media.PathFigureCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PathFigureCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PathFigureCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type PathSegment() =
  inherit Animatable()

  static let _DefIsSmoothJoin = System.Windows.Media.PathSegment.IsSmoothJoinProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsStroked = System.Windows.Media.PathSegment.IsStrokedProperty.DefaultMetadata.DefaultValue :?> bool

  [<DefaultValue>] val mutable private _IsSmoothJoin: bool voption
  member this.IsSmoothJoin with set x = this._IsSmoothJoin <- ValueSome x

  [<DefaultValue>] val mutable private _IsStroked: bool voption
  member this.IsStroked with set x = this._IsStroked <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PathSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PathSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsSmoothJoin |> ValueOption.iter (fun x -> v.IsSmoothJoin <- x)
    this._IsStroked |> ValueOption.iter (fun x -> v.IsStroked <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PathSegment, v: System.Windows.Media.PathSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsSmoothJoin prev._IsSmoothJoin this._IsSmoothJoin id (fun x -> v.IsSmoothJoin <- x)
    updateValue _DefIsStroked prev._IsStroked this._IsStroked id (fun x -> v.IsStroked <- x)
    this.SilenceEvents <- false


type ArcSegment(setProps: ArcSegment -> unit) as this =
  inherit PathSegment()

  static let _DefIsLargeArc = System.Windows.Media.ArcSegment.IsLargeArcProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefPoint = System.Windows.Media.ArcSegment.PointProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefRotationAngle = System.Windows.Media.ArcSegment.RotationAngleProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSize = System.Windows.Media.ArcSegment.SizeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Size
  static let _DefSweepDirection = System.Windows.Media.ArcSegment.SweepDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.SweepDirection

  do setProps this

  new() = ArcSegment(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.ArcSegment voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.ArcSegment voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsLargeArc: bool voption
  member this.IsLargeArc with set x = this._IsLargeArc <- ValueSome x

  [<DefaultValue>] val mutable private _Point: System.Windows.Point voption
  member this.Point with set x = this._Point <- ValueSome x

  [<DefaultValue>] val mutable private _RotationAngle: float voption
  member this.RotationAngle with set x = this._RotationAngle <- ValueSome x

  [<DefaultValue>] val mutable private _Size: System.Windows.Size voption
  member this.Size with set x = this._Size <- ValueSome x

  [<DefaultValue>] val mutable private _SweepDirection: System.Windows.Media.SweepDirection voption
  member this.SweepDirection with set x = this._SweepDirection <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.ArcSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.ArcSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsLargeArc |> ValueOption.iter (fun x -> v.IsLargeArc <- x)
    this._Point |> ValueOption.iter (fun x -> v.Point <- x)
    this._RotationAngle |> ValueOption.iter (fun x -> v.RotationAngle <- x)
    this._Size |> ValueOption.iter (fun x -> v.Size <- x)
    this._SweepDirection |> ValueOption.iter (fun x -> v.SweepDirection <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ArcSegment, v: System.Windows.Media.ArcSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsLargeArc prev._IsLargeArc this._IsLargeArc id (fun x -> v.IsLargeArc <- x)
    updateValue _DefPoint prev._Point this._Point id (fun x -> v.Point <- x)
    updateValue _DefRotationAngle prev._RotationAngle this._RotationAngle id (fun x -> v.RotationAngle <- x)
    updateValue _DefSize prev._Size this._Size id (fun x -> v.Size <- x)
    updateValue _DefSweepDirection prev._SweepDirection this._SweepDirection id (fun x -> v.SweepDirection <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.ArcSegment())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ArcSegment as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type BezierSegment(setProps: BezierSegment -> unit) as this =
  inherit PathSegment()

  static let _DefPoint1 = System.Windows.Media.BezierSegment.Point1Property.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefPoint2 = System.Windows.Media.BezierSegment.Point2Property.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefPoint3 = System.Windows.Media.BezierSegment.Point3Property.DefaultMetadata.DefaultValue :?> System.Windows.Point

  do setProps this

  new() = BezierSegment(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.BezierSegment voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.BezierSegment voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Point1: System.Windows.Point voption
  member this.Point1 with set x = this._Point1 <- ValueSome x

  [<DefaultValue>] val mutable private _Point2: System.Windows.Point voption
  member this.Point2 with set x = this._Point2 <- ValueSome x

  [<DefaultValue>] val mutable private _Point3: System.Windows.Point voption
  member this.Point3 with set x = this._Point3 <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.BezierSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.BezierSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Point1 |> ValueOption.iter (fun x -> v.Point1 <- x)
    this._Point2 |> ValueOption.iter (fun x -> v.Point2 <- x)
    this._Point3 |> ValueOption.iter (fun x -> v.Point3 <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BezierSegment, v: System.Windows.Media.BezierSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPoint1 prev._Point1 this._Point1 id (fun x -> v.Point1 <- x)
    updateValue _DefPoint2 prev._Point2 this._Point2 id (fun x -> v.Point2 <- x)
    updateValue _DefPoint3 prev._Point3 this._Point3 id (fun x -> v.Point3 <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.BezierSegment())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BezierSegment as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LineSegment(setProps: LineSegment -> unit) as this =
  inherit PathSegment()

  static let _DefPoint = System.Windows.Media.LineSegment.PointProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point

  do setProps this

  new() = LineSegment(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.LineSegment voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.LineSegment voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Point: System.Windows.Point voption
  member this.Point with set x = this._Point <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.LineSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.LineSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Point |> ValueOption.iter (fun x -> v.Point <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LineSegment, v: System.Windows.Media.LineSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPoint prev._Point this._Point id (fun x -> v.Point <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.LineSegment())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LineSegment as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PolyBezierSegment(setProps: PolyBezierSegment -> unit) as this =
  inherit PathSegment()

  static let _DefPoints = System.Windows.Media.PolyBezierSegment.PointsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PointCollection

  do setProps this

  new() = PolyBezierSegment(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PolyBezierSegment voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PolyBezierSegment voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Points: PointCollection voption
  member this.Points with set x = this._Points <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PolyBezierSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PolyBezierSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Points |> ValueOption.iter (fun x -> v.Points <- x.RenderNew () :?> System.Windows.Media.PointCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PolyBezierSegment, v: System.Windows.Media.PolyBezierSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPoints prev._Points this._Points id (fun x -> v.Points <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PolyBezierSegment())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PolyBezierSegment as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PolyLineSegment(setProps: PolyLineSegment -> unit) as this =
  inherit PathSegment()

  static let _DefPoints = System.Windows.Media.PolyLineSegment.PointsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PointCollection

  do setProps this

  new() = PolyLineSegment(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PolyLineSegment voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PolyLineSegment voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Points: PointCollection voption
  member this.Points with set x = this._Points <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PolyLineSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PolyLineSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Points |> ValueOption.iter (fun x -> v.Points <- x.RenderNew () :?> System.Windows.Media.PointCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PolyLineSegment, v: System.Windows.Media.PolyLineSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPoints prev._Points this._Points id (fun x -> v.Points <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PolyLineSegment())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PolyLineSegment as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PolyQuadraticBezierSegment(setProps: PolyQuadraticBezierSegment -> unit) as this =
  inherit PathSegment()

  static let _DefPoints = System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PointCollection

  do setProps this

  new() = PolyQuadraticBezierSegment(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PolyQuadraticBezierSegment voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PolyQuadraticBezierSegment voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Points: PointCollection voption
  member this.Points with set x = this._Points <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PolyQuadraticBezierSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PolyQuadraticBezierSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Points |> ValueOption.iter (fun x -> v.Points <- x.RenderNew () :?> System.Windows.Media.PointCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PolyQuadraticBezierSegment, v: System.Windows.Media.PolyQuadraticBezierSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPoints prev._Points this._Points id (fun x -> v.Points <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PolyQuadraticBezierSegment())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PolyQuadraticBezierSegment as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type QuadraticBezierSegment(setProps: QuadraticBezierSegment -> unit) as this =
  inherit PathSegment()

  static let _DefPoint1 = System.Windows.Media.QuadraticBezierSegment.Point1Property.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefPoint2 = System.Windows.Media.QuadraticBezierSegment.Point2Property.DefaultMetadata.DefaultValue :?> System.Windows.Point

  do setProps this

  new() = QuadraticBezierSegment(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.QuadraticBezierSegment voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.QuadraticBezierSegment voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Point1: System.Windows.Point voption
  member this.Point1 with set x = this._Point1 <- ValueSome x

  [<DefaultValue>] val mutable private _Point2: System.Windows.Point voption
  member this.Point2 with set x = this._Point2 <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.QuadraticBezierSegment> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.QuadraticBezierSegment) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Point1 |> ValueOption.iter (fun x -> v.Point1 <- x)
    this._Point2 |> ValueOption.iter (fun x -> v.Point2 <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuadraticBezierSegment, v: System.Windows.Media.QuadraticBezierSegment) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPoint1 prev._Point1 this._Point1 id (fun x -> v.Point1 <- x)
    updateValue _DefPoint2 prev._Point2 this._Point2 id (fun x -> v.Point2 <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.QuadraticBezierSegment())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuadraticBezierSegment as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PathSegmentCollection(setProps: PathSegmentCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = PathSegmentCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PathSegmentCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PathSegmentCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: PathSegment list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PathSegmentCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PathSegmentCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.PathSegment |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PathSegmentCollection, v: System.Windows.Media.PathSegmentCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PathSegmentCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PathSegmentCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Pen(setProps: Pen -> unit) as this =
  inherit Animatable()

  static let _DefBrush = System.Windows.Media.Pen.BrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefDashCap = System.Windows.Media.Pen.DashCapProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineCap
  static let _DefDashStyle = System.Windows.Media.Pen.DashStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DashStyle
  static let _DefEndLineCap = System.Windows.Media.Pen.EndLineCapProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineCap
  static let _DefLineJoin = System.Windows.Media.Pen.LineJoinProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineJoin
  static let _DefMiterLimit = System.Windows.Media.Pen.MiterLimitProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefStartLineCap = System.Windows.Media.Pen.StartLineCapProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineCap
  static let _DefThickness = System.Windows.Media.Pen.ThicknessProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Pen(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Pen voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Pen voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Brush: Brush voption
  member this.Brush with set x = this._Brush <- ValueSome x

  [<DefaultValue>] val mutable private _DashCap: System.Windows.Media.PenLineCap voption
  member this.DashCap with set x = this._DashCap <- ValueSome x

  [<DefaultValue>] val mutable private _DashStyle: DashStyle voption
  member this.DashStyle with set x = this._DashStyle <- ValueSome x

  [<DefaultValue>] val mutable private _EndLineCap: System.Windows.Media.PenLineCap voption
  member this.EndLineCap with set x = this._EndLineCap <- ValueSome x

  [<DefaultValue>] val mutable private _LineJoin: System.Windows.Media.PenLineJoin voption
  member this.LineJoin with set x = this._LineJoin <- ValueSome x

  [<DefaultValue>] val mutable private _MiterLimit: float voption
  member this.MiterLimit with set x = this._MiterLimit <- ValueSome x

  [<DefaultValue>] val mutable private _StartLineCap: System.Windows.Media.PenLineCap voption
  member this.StartLineCap with set x = this._StartLineCap <- ValueSome x

  [<DefaultValue>] val mutable private _Thickness: float voption
  member this.Thickness with set x = this._Thickness <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Pen> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Pen) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Brush |> ValueOption.iter (fun x -> v.Brush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._DashCap |> ValueOption.iter (fun x -> v.DashCap <- x)
    this._DashStyle |> ValueOption.iter (fun x -> v.DashStyle <- x.RenderNew () :?> System.Windows.Media.DashStyle)
    this._EndLineCap |> ValueOption.iter (fun x -> v.EndLineCap <- x)
    this._LineJoin |> ValueOption.iter (fun x -> v.LineJoin <- x)
    this._MiterLimit |> ValueOption.iter (fun x -> v.MiterLimit <- x)
    this._StartLineCap |> ValueOption.iter (fun x -> v.StartLineCap <- x)
    this._Thickness |> ValueOption.iter (fun x -> v.Thickness <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Pen, v: System.Windows.Media.Pen) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBrush prev._Brush this._Brush id (fun x -> v.Brush <- x)
    updateValue _DefDashCap prev._DashCap this._DashCap id (fun x -> v.DashCap <- x)
    updateValue _DefDashStyle prev._DashStyle this._DashStyle id (fun x -> v.DashStyle <- x)
    updateValue _DefEndLineCap prev._EndLineCap this._EndLineCap id (fun x -> v.EndLineCap <- x)
    updateValue _DefLineJoin prev._LineJoin this._LineJoin id (fun x -> v.LineJoin <- x)
    updateValue _DefMiterLimit prev._MiterLimit this._MiterLimit id (fun x -> v.MiterLimit <- x)
    updateValue _DefStartLineCap prev._StartLineCap this._StartLineCap id (fun x -> v.StartLineCap <- x)
    updateValue _DefThickness prev._Thickness this._Thickness id (fun x -> v.Thickness <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Pen())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Pen as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PixelShader(setProps: PixelShader -> unit) as this =
  inherit Animatable()

  static let _DefShaderRenderMode = System.Windows.Media.Effects.PixelShader.ShaderRenderModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Effects.ShaderRenderMode
  static let _DefUriSource = System.Windows.Media.Effects.PixelShader.UriSourceProperty.DefaultMetadata.DefaultValue :?> System.Uri

  do setProps this

  new() = PixelShader(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Effects.PixelShader voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Effects.PixelShader voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ShaderRenderMode: System.Windows.Media.Effects.ShaderRenderMode voption
  member this.ShaderRenderMode with set x = this._ShaderRenderMode <- ValueSome x

  [<DefaultValue>] val mutable private _UriSource: System.Uri voption
  member this.UriSource with set x = this._UriSource <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Effects.PixelShader> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Effects.PixelShader) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ShaderRenderMode |> ValueOption.iter (fun x -> v.ShaderRenderMode <- x)
    this._UriSource |> ValueOption.iter (fun x -> v.UriSource <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PixelShader, v: System.Windows.Media.Effects.PixelShader) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefShaderRenderMode prev._ShaderRenderMode this._ShaderRenderMode id (fun x -> v.ShaderRenderMode <- x)
    updateValue _DefUriSource prev._UriSource this._UriSource id (fun x -> v.UriSource <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Effects.PixelShader())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PixelShader as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Rotation3D() =
  inherit Animatable()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Rotation3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Rotation3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Rotation3D, v: System.Windows.Media.Media3D.Rotation3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type AxisAngleRotation3D(setProps: AxisAngleRotation3D -> unit) as this =
  inherit Rotation3D()

  static let _DefAngle = System.Windows.Media.Media3D.AxisAngleRotation3D.AngleProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefAxis = System.Windows.Media.Media3D.AxisAngleRotation3D.AxisProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Vector3D

  do setProps this

  new() = AxisAngleRotation3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.AxisAngleRotation3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.AxisAngleRotation3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Angle: float voption
  member this.Angle with set x = this._Angle <- ValueSome x

  [<DefaultValue>] val mutable private _Axis: System.Windows.Media.Media3D.Vector3D voption
  member this.Axis with set x = this._Axis <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.AxisAngleRotation3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.AxisAngleRotation3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Angle |> ValueOption.iter (fun x -> v.Angle <- x)
    this._Axis |> ValueOption.iter (fun x -> v.Axis <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: AxisAngleRotation3D, v: System.Windows.Media.Media3D.AxisAngleRotation3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAngle prev._Angle this._Angle id (fun x -> v.Angle <- x)
    updateValue _DefAxis prev._Axis this._Axis id (fun x -> v.Axis <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.AxisAngleRotation3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? AxisAngleRotation3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type QuaternionRotation3D(setProps: QuaternionRotation3D -> unit) as this =
  inherit Rotation3D()

  static let _DefQuaternion = System.Windows.Media.Media3D.QuaternionRotation3D.QuaternionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Quaternion

  do setProps this

  new() = QuaternionRotation3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.QuaternionRotation3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.QuaternionRotation3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Quaternion: System.Windows.Media.Media3D.Quaternion voption
  member this.Quaternion with set x = this._Quaternion <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.QuaternionRotation3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.QuaternionRotation3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Quaternion |> ValueOption.iter (fun x -> v.Quaternion <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuaternionRotation3D, v: System.Windows.Media.Media3D.QuaternionRotation3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefQuaternion prev._Quaternion this._Quaternion id (fun x -> v.Quaternion <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.QuaternionRotation3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuaternionRotation3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TextDecoration(setProps: TextDecoration -> unit) as this =
  inherit Animatable()

  static let _DefLocation = System.Windows.TextDecoration.LocationProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationLocation
  static let _DefPen = System.Windows.TextDecoration.PenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Pen
  static let _DefPenOffset = System.Windows.TextDecoration.PenOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPenOffsetUnit = System.Windows.TextDecoration.PenOffsetUnitProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationUnit
  static let _DefPenThicknessUnit = System.Windows.TextDecoration.PenThicknessUnitProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationUnit

  do setProps this

  new() = TextDecoration(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.TextDecoration voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.TextDecoration voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Location: System.Windows.TextDecorationLocation voption
  member this.Location with set x = this._Location <- ValueSome x

  [<DefaultValue>] val mutable private _Pen: Pen voption
  member this.Pen with set x = this._Pen <- ValueSome x

  [<DefaultValue>] val mutable private _PenOffset: float voption
  member this.PenOffset with set x = this._PenOffset <- ValueSome x

  [<DefaultValue>] val mutable private _PenOffsetUnit: System.Windows.TextDecorationUnit voption
  member this.PenOffsetUnit with set x = this._PenOffsetUnit <- ValueSome x

  [<DefaultValue>] val mutable private _PenThicknessUnit: System.Windows.TextDecorationUnit voption
  member this.PenThicknessUnit with set x = this._PenThicknessUnit <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.TextDecoration> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.TextDecoration) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Location |> ValueOption.iter (fun x -> v.Location <- x)
    this._Pen |> ValueOption.iter (fun x -> v.Pen <- x.RenderNew () :?> System.Windows.Media.Pen)
    this._PenOffset |> ValueOption.iter (fun x -> v.PenOffset <- x)
    this._PenOffsetUnit |> ValueOption.iter (fun x -> v.PenOffsetUnit <- x)
    this._PenThicknessUnit |> ValueOption.iter (fun x -> v.PenThicknessUnit <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextDecoration, v: System.Windows.TextDecoration) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefLocation prev._Location this._Location id (fun x -> v.Location <- x)
    updateValue _DefPen prev._Pen this._Pen id (fun x -> v.Pen <- x)
    updateValue _DefPenOffset prev._PenOffset this._PenOffset id (fun x -> v.PenOffset <- x)
    updateValue _DefPenOffsetUnit prev._PenOffsetUnit this._PenOffsetUnit id (fun x -> v.PenOffsetUnit <- x)
    updateValue _DefPenThicknessUnit prev._PenThicknessUnit this._PenThicknessUnit id (fun x -> v.PenThicknessUnit <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.TextDecoration())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TextDecoration as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TextDecorationCollection(setProps: TextDecorationCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = TextDecorationCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.TextDecorationCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.TextDecorationCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: TextDecoration list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.TextDecorationCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.TextDecorationCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.TextDecoration |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextDecorationCollection, v: System.Windows.TextDecorationCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.TextDecorationCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TextDecorationCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TextEffect(setProps: TextEffect -> unit) as this =
  inherit Animatable()

  static let _DefClip = System.Windows.Media.TextEffect.ClipProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Geometry
  static let _DefForeground = System.Windows.Media.TextEffect.ForegroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefPositionCount = System.Windows.Media.TextEffect.PositionCountProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefPositionStart = System.Windows.Media.TextEffect.PositionStartProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefTransform = System.Windows.Media.TextEffect.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform

  do setProps this

  new() = TextEffect(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.TextEffect voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.TextEffect voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Clip: Geometry voption
  member this.Clip with set x = this._Clip <- ValueSome x

  [<DefaultValue>] val mutable private _Foreground: Brush voption
  member this.Foreground with set x = this._Foreground <- ValueSome x

  [<DefaultValue>] val mutable private _PositionCount: int voption
  member this.PositionCount with set x = this._PositionCount <- ValueSome x

  [<DefaultValue>] val mutable private _PositionStart: int voption
  member this.PositionStart with set x = this._PositionStart <- ValueSome x

  [<DefaultValue>] val mutable private _Transform: Transform voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.TextEffect> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.TextEffect) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Clip |> ValueOption.iter (fun x -> v.Clip <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._Foreground |> ValueOption.iter (fun x -> v.Foreground <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._PositionCount |> ValueOption.iter (fun x -> v.PositionCount <- x)
    this._PositionStart |> ValueOption.iter (fun x -> v.PositionStart <- x)
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextEffect, v: System.Windows.Media.TextEffect) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefClip prev._Clip this._Clip id (fun x -> v.Clip <- x)
    updateValue _DefForeground prev._Foreground this._Foreground id (fun x -> v.Foreground <- x)
    updateValue _DefPositionCount prev._PositionCount this._PositionCount id (fun x -> v.PositionCount <- x)
    updateValue _DefPositionStart prev._PositionStart this._PositionStart id (fun x -> v.PositionStart <- x)
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.TextEffect())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TextEffect as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TextEffectCollection(setProps: TextEffectCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = TextEffectCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.TextEffectCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.TextEffectCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: TextEffect list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.TextEffectCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.TextEffectCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.TextEffect |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextEffectCollection, v: System.Windows.Media.TextEffectCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.TextEffectCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TextEffectCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Timeline() =
  inherit Animatable()

  static let _DefAccelerationRatio = System.Windows.Media.Animation.Timeline.AccelerationRatioProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefAutoReverse = System.Windows.Media.Animation.Timeline.AutoReverseProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefBeginTime = System.Windows.Media.Animation.Timeline.BeginTimeProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.TimeSpan>
  static let _DefDecelerationRatio = System.Windows.Media.Animation.Timeline.DecelerationRatioProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefDuration = System.Windows.Media.Animation.Timeline.DurationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Duration
  static let _DefFillBehavior = System.Windows.Media.Animation.Timeline.FillBehaviorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.FillBehavior
  static let _DefRepeatBehavior = System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.RepeatBehavior
  static let _DefSpeedRatio = System.Windows.Media.Animation.Timeline.SpeedRatioProperty.DefaultMetadata.DefaultValue :?> float

  [<DefaultValue>] val mutable private _AccelerationRatio: float voption
  member this.AccelerationRatio with set x = this._AccelerationRatio <- ValueSome x

  [<DefaultValue>] val mutable private _AutoReverse: bool voption
  member this.AutoReverse with set x = this._AutoReverse <- ValueSome x

  [<DefaultValue>] val mutable private _BeginTime: System.TimeSpan option voption
  member this.BeginTime with set x = this._BeginTime <- ValueSome x

  [<DefaultValue>] val mutable private _DecelerationRatio: float voption
  member this.DecelerationRatio with set x = this._DecelerationRatio <- ValueSome x

  [<DefaultValue>] val mutable private _Duration: System.Windows.Duration voption
  member this.Duration with set x = this._Duration <- ValueSome x

  [<DefaultValue>] val mutable private _FillBehavior: System.Windows.Media.Animation.FillBehavior voption
  member this.FillBehavior with set x = this._FillBehavior <- ValueSome x

  [<DefaultValue>] val mutable private _RepeatBehavior: System.Windows.Media.Animation.RepeatBehavior voption
  member this.RepeatBehavior with set x = this._RepeatBehavior <- ValueSome x

  [<DefaultValue>] val mutable private _SpeedRatio: float voption
  member this.SpeedRatio with set x = this._SpeedRatio <- ValueSome x

  [<DefaultValue>] val mutable private _Completed: EventHandlerWrapper<System.EventArgs> voption
  member this.Completed with set x = this._Completed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _CurrentGlobalSpeedInvalidated: EventHandlerWrapper<System.EventArgs> voption
  member this.CurrentGlobalSpeedInvalidated with set x = this._CurrentGlobalSpeedInvalidated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _CurrentStateInvalidated: EventHandlerWrapper<System.EventArgs> voption
  member this.CurrentStateInvalidated with set x = this._CurrentStateInvalidated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _CurrentTimeInvalidated: EventHandlerWrapper<System.EventArgs> voption
  member this.CurrentTimeInvalidated with set x = this._CurrentTimeInvalidated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _RemoveRequested: EventHandlerWrapper<System.EventArgs> voption
  member this.RemoveRequested with set x = this._RemoveRequested <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Timeline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Timeline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AccelerationRatio |> ValueOption.iter (fun x -> v.AccelerationRatio <- x)
    this._AutoReverse |> ValueOption.iter (fun x -> v.AutoReverse <- x)
    this._BeginTime |> ValueOption.iter (fun x -> v.BeginTime <- x |> Option.toNullable)
    this._DecelerationRatio |> ValueOption.iter (fun x -> v.DecelerationRatio <- x)
    this._Duration |> ValueOption.iter (fun x -> v.Duration <- x)
    this._FillBehavior |> ValueOption.iter (fun x -> v.FillBehavior <- x)
    this._RepeatBehavior |> ValueOption.iter (fun x -> v.RepeatBehavior <- x)
    this._SpeedRatio |> ValueOption.iter (fun x -> v.SpeedRatio <- x)
    this._Completed |> ValueOption.iter (fun x -> x.Subscription <- v.Completed.Subscribe x.Fn)
    this._CurrentGlobalSpeedInvalidated |> ValueOption.iter (fun x -> x.Subscription <- v.CurrentGlobalSpeedInvalidated.Subscribe x.Fn)
    this._CurrentStateInvalidated |> ValueOption.iter (fun x -> x.Subscription <- v.CurrentStateInvalidated.Subscribe x.Fn)
    this._CurrentTimeInvalidated |> ValueOption.iter (fun x -> x.Subscription <- v.CurrentTimeInvalidated.Subscribe x.Fn)
    this._RemoveRequested |> ValueOption.iter (fun x -> x.Subscription <- v.RemoveRequested.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Timeline, v: System.Windows.Media.Animation.Timeline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAccelerationRatio prev._AccelerationRatio this._AccelerationRatio id (fun x -> v.AccelerationRatio <- x)
    updateValue _DefAutoReverse prev._AutoReverse this._AutoReverse id (fun x -> v.AutoReverse <- x)
    updateValue _DefBeginTime prev._BeginTime this._BeginTime Option.toNullable (fun x -> v.BeginTime <- x)
    updateValue _DefDecelerationRatio prev._DecelerationRatio this._DecelerationRatio id (fun x -> v.DecelerationRatio <- x)
    updateValue _DefDuration prev._Duration this._Duration id (fun x -> v.Duration <- x)
    updateValue _DefFillBehavior prev._FillBehavior this._FillBehavior id (fun x -> v.FillBehavior <- x)
    updateValue _DefRepeatBehavior prev._RepeatBehavior this._RepeatBehavior id (fun x -> v.RepeatBehavior <- x)
    updateValue _DefSpeedRatio prev._SpeedRatio this._SpeedRatio id (fun x -> v.SpeedRatio <- x)
    updateFn prev._Completed this._Completed v.Completed
    updateFn prev._CurrentGlobalSpeedInvalidated this._CurrentGlobalSpeedInvalidated v.CurrentGlobalSpeedInvalidated
    updateFn prev._CurrentStateInvalidated this._CurrentStateInvalidated v.CurrentStateInvalidated
    updateFn prev._CurrentTimeInvalidated this._CurrentTimeInvalidated v.CurrentTimeInvalidated
    updateFn prev._RemoveRequested this._RemoveRequested v.RemoveRequested
    this.SilenceEvents <- false


[<AbstractClass>]
type AnimationTimeline() =
  inherit Timeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.AnimationTimeline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.AnimationTimeline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: AnimationTimeline, v: System.Windows.Media.Animation.AnimationTimeline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


[<AbstractClass>]
type BooleanAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.BooleanAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.BooleanAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BooleanAnimationBase, v: System.Windows.Media.Animation.BooleanAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type BooleanAnimationUsingKeyFrames(setProps: BooleanAnimationUsingKeyFrames -> unit) as this =
  inherit BooleanAnimationBase()


  do setProps this

  new() = BooleanAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: BooleanKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.BooleanKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BooleanAnimationUsingKeyFrames, v: System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.BooleanKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BooleanAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ByteAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ByteAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ByteAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ByteAnimationBase, v: System.Windows.Media.Animation.ByteAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type ByteAnimation(setProps: ByteAnimation -> unit) as this =
  inherit ByteAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.ByteAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<byte>
  static let _DefEasingFunction = System.Windows.Media.Animation.ByteAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.ByteAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<byte>
  static let _DefTo = System.Windows.Media.Animation.ByteAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<byte>

  do setProps this

  new() = ByteAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ByteAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ByteAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: byte option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: byte option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: byte option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ByteAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ByteAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ByteAnimation, v: System.Windows.Media.Animation.ByteAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ByteAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ByteAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ByteAnimationUsingKeyFrames(setProps: ByteAnimationUsingKeyFrames -> unit) as this =
  inherit ByteAnimationBase()


  do setProps this

  new() = ByteAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: ByteKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ByteAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.ByteKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ByteAnimationUsingKeyFrames, v: System.Windows.Media.Animation.ByteAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.ByteKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ByteAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ByteAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type CharAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.CharAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.CharAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CharAnimationBase, v: System.Windows.Media.Animation.CharAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type CharAnimationUsingKeyFrames(setProps: CharAnimationUsingKeyFrames -> unit) as this =
  inherit CharAnimationBase()


  do setProps this

  new() = CharAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.CharAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.CharAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: CharKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.CharAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.CharAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.CharKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CharAnimationUsingKeyFrames, v: System.Windows.Media.Animation.CharAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.CharKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.CharAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CharAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ColorAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ColorAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ColorAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ColorAnimationBase, v: System.Windows.Media.Animation.ColorAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type ColorAnimation(setProps: ColorAnimation -> unit) as this =
  inherit ColorAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.ColorAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Color>
  static let _DefEasingFunction = System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.ColorAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Color>
  static let _DefTo = System.Windows.Media.Animation.ColorAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Color>

  do setProps this

  new() = ColorAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ColorAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ColorAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Media.Color option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Media.Color option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Media.Color option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ColorAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ColorAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ColorAnimation, v: System.Windows.Media.Animation.ColorAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ColorAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ColorAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ColorAnimationUsingKeyFrames(setProps: ColorAnimationUsingKeyFrames -> unit) as this =
  inherit ColorAnimationBase()


  do setProps this

  new() = ColorAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: ColorKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ColorAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.ColorKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ColorAnimationUsingKeyFrames, v: System.Windows.Media.Animation.ColorAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.ColorKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ColorAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ColorAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type DecimalAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DecimalAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DecimalAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DecimalAnimationBase, v: System.Windows.Media.Animation.DecimalAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type DecimalAnimation(setProps: DecimalAnimation -> unit) as this =
  inherit DecimalAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.DecimalAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<decimal>
  static let _DefEasingFunction = System.Windows.Media.Animation.DecimalAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.DecimalAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<decimal>
  static let _DefTo = System.Windows.Media.Animation.DecimalAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<decimal>

  do setProps this

  new() = DecimalAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DecimalAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DecimalAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: decimal option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: decimal option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: decimal option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DecimalAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DecimalAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DecimalAnimation, v: System.Windows.Media.Animation.DecimalAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DecimalAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DecimalAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DecimalAnimationUsingKeyFrames(setProps: DecimalAnimationUsingKeyFrames -> unit) as this =
  inherit DecimalAnimationBase()


  do setProps this

  new() = DecimalAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: DecimalKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.DecimalKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DecimalAnimationUsingKeyFrames, v: System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.DecimalKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DecimalAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type DoubleAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DoubleAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DoubleAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DoubleAnimationBase, v: System.Windows.Media.Animation.DoubleAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type DoubleAnimation(setProps: DoubleAnimation -> unit) as this =
  inherit DoubleAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.DoubleAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<float>
  static let _DefEasingFunction = System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.DoubleAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<float>
  static let _DefTo = System.Windows.Media.Animation.DoubleAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<float>

  do setProps this

  new() = DoubleAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DoubleAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DoubleAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: float option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: float option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: float option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DoubleAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DoubleAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DoubleAnimation, v: System.Windows.Media.Animation.DoubleAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DoubleAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DoubleAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DoubleAnimationUsingKeyFrames(setProps: DoubleAnimationUsingKeyFrames -> unit) as this =
  inherit DoubleAnimationBase()


  do setProps this

  new() = DoubleAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: DoubleKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.DoubleKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DoubleAnimationUsingKeyFrames, v: System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.DoubleKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DoubleAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DoubleAnimationUsingPath(setProps: DoubleAnimationUsingPath -> unit) as this =
  inherit DoubleAnimationBase()

  static let _DefPathGeometry = System.Windows.Media.Animation.DoubleAnimationUsingPath.PathGeometryProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PathGeometry
  static let _DefSource = System.Windows.Media.Animation.DoubleAnimationUsingPath.SourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.PathAnimationSource

  do setProps this

  new() = DoubleAnimationUsingPath(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DoubleAnimationUsingPath voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DoubleAnimationUsingPath voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _PathGeometry: PathGeometry voption
  member this.PathGeometry with set x = this._PathGeometry <- ValueSome x

  [<DefaultValue>] val mutable private _Source: System.Windows.Media.Animation.PathAnimationSource voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DoubleAnimationUsingPath> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DoubleAnimationUsingPath) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._PathGeometry |> ValueOption.iter (fun x -> v.PathGeometry <- x.RenderNew () :?> System.Windows.Media.PathGeometry)
    this._Source |> ValueOption.iter (fun x -> v.Source <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DoubleAnimationUsingPath, v: System.Windows.Media.Animation.DoubleAnimationUsingPath) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefPathGeometry prev._PathGeometry this._PathGeometry id (fun x -> v.PathGeometry <- x)
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DoubleAnimationUsingPath())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DoubleAnimationUsingPath as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Int16AnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int16AnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int16AnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int16AnimationBase, v: System.Windows.Media.Animation.Int16AnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type Int16Animation(setProps: Int16Animation -> unit) as this =
  inherit Int16AnimationBase()

  static let _DefBy = System.Windows.Media.Animation.Int16Animation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int16>
  static let _DefEasingFunction = System.Windows.Media.Animation.Int16Animation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.Int16Animation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int16>
  static let _DefTo = System.Windows.Media.Animation.Int16Animation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int16>

  do setProps this

  new() = Int16Animation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int16Animation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int16Animation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: int16 option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: int16 option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: int16 option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int16Animation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int16Animation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int16Animation, v: System.Windows.Media.Animation.Int16Animation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int16Animation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int16Animation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Int16AnimationUsingKeyFrames(setProps: Int16AnimationUsingKeyFrames -> unit) as this =
  inherit Int16AnimationBase()


  do setProps this

  new() = Int16AnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: Int16KeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int16AnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.Int16KeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int16AnimationUsingKeyFrames, v: System.Windows.Media.Animation.Int16AnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Int16KeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int16AnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int16AnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Int32AnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int32AnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int32AnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int32AnimationBase, v: System.Windows.Media.Animation.Int32AnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type Int32Animation(setProps: Int32Animation -> unit) as this =
  inherit Int32AnimationBase()

  static let _DefBy = System.Windows.Media.Animation.Int32Animation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int>
  static let _DefEasingFunction = System.Windows.Media.Animation.Int32Animation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.Int32Animation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int>
  static let _DefTo = System.Windows.Media.Animation.Int32Animation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int>

  do setProps this

  new() = Int32Animation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int32Animation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int32Animation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: int option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: int option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: int option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int32Animation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int32Animation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int32Animation, v: System.Windows.Media.Animation.Int32Animation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int32Animation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int32Animation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Int32AnimationUsingKeyFrames(setProps: Int32AnimationUsingKeyFrames -> unit) as this =
  inherit Int32AnimationBase()


  do setProps this

  new() = Int32AnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: Int32KeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int32AnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.Int32KeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int32AnimationUsingKeyFrames, v: System.Windows.Media.Animation.Int32AnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Int32KeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int32AnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int32AnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Int64AnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int64AnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int64AnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int64AnimationBase, v: System.Windows.Media.Animation.Int64AnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type Int64Animation(setProps: Int64Animation -> unit) as this =
  inherit Int64AnimationBase()

  static let _DefBy = System.Windows.Media.Animation.Int64Animation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int64>
  static let _DefEasingFunction = System.Windows.Media.Animation.Int64Animation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.Int64Animation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int64>
  static let _DefTo = System.Windows.Media.Animation.Int64Animation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<int64>

  do setProps this

  new() = Int64Animation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int64Animation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int64Animation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: int64 option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: int64 option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: int64 option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int64Animation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int64Animation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int64Animation, v: System.Windows.Media.Animation.Int64Animation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int64Animation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int64Animation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Int64AnimationUsingKeyFrames(setProps: Int64AnimationUsingKeyFrames -> unit) as this =
  inherit Int64AnimationBase()


  do setProps this

  new() = Int64AnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: Int64KeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int64AnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.Int64KeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int64AnimationUsingKeyFrames, v: System.Windows.Media.Animation.Int64AnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Int64KeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int64AnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int64AnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type MatrixAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.MatrixAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.MatrixAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixAnimationBase, v: System.Windows.Media.Animation.MatrixAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type MatrixAnimationUsingKeyFrames(setProps: MatrixAnimationUsingKeyFrames -> unit) as this =
  inherit MatrixAnimationBase()


  do setProps this

  new() = MatrixAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: MatrixKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.MatrixKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixAnimationUsingKeyFrames, v: System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.MatrixKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MatrixAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MatrixAnimationUsingPath(setProps: MatrixAnimationUsingPath -> unit) as this =
  inherit MatrixAnimationBase()

  static let _DefDoesRotateWithTangent = System.Windows.Media.Animation.MatrixAnimationUsingPath.DoesRotateWithTangentProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsAngleCumulative = System.Windows.Media.Animation.MatrixAnimationUsingPath.IsAngleCumulativeProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsOffsetCumulative = System.Windows.Media.Animation.MatrixAnimationUsingPath.IsOffsetCumulativeProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefPathGeometry = System.Windows.Media.Animation.MatrixAnimationUsingPath.PathGeometryProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PathGeometry

  do setProps this

  new() = MatrixAnimationUsingPath(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.MatrixAnimationUsingPath voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.MatrixAnimationUsingPath voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _DoesRotateWithTangent: bool voption
  member this.DoesRotateWithTangent with set x = this._DoesRotateWithTangent <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsAngleCumulative: bool voption
  member this.IsAngleCumulative with set x = this._IsAngleCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _IsOffsetCumulative: bool voption
  member this.IsOffsetCumulative with set x = this._IsOffsetCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _PathGeometry: PathGeometry voption
  member this.PathGeometry with set x = this._PathGeometry <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.MatrixAnimationUsingPath> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.MatrixAnimationUsingPath) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._DoesRotateWithTangent |> ValueOption.iter (fun x -> v.DoesRotateWithTangent <- x)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsAngleCumulative |> ValueOption.iter (fun x -> v.IsAngleCumulative <- x)
    this._IsOffsetCumulative |> ValueOption.iter (fun x -> v.IsOffsetCumulative <- x)
    this._PathGeometry |> ValueOption.iter (fun x -> v.PathGeometry <- x.RenderNew () :?> System.Windows.Media.PathGeometry)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixAnimationUsingPath, v: System.Windows.Media.Animation.MatrixAnimationUsingPath) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDoesRotateWithTangent prev._DoesRotateWithTangent this._DoesRotateWithTangent id (fun x -> v.DoesRotateWithTangent <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue _DefIsAngleCumulative prev._IsAngleCumulative this._IsAngleCumulative id (fun x -> v.IsAngleCumulative <- x)
    updateValue _DefIsOffsetCumulative prev._IsOffsetCumulative this._IsOffsetCumulative id (fun x -> v.IsOffsetCumulative <- x)
    updateValue _DefPathGeometry prev._PathGeometry this._PathGeometry id (fun x -> v.PathGeometry <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.MatrixAnimationUsingPath())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MatrixAnimationUsingPath as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ObjectAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ObjectAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ObjectAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ObjectAnimationBase, v: System.Windows.Media.Animation.ObjectAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type ObjectAnimationUsingKeyFrames(setProps: ObjectAnimationUsingKeyFrames -> unit) as this =
  inherit ObjectAnimationBase()


  do setProps this

  new() = ObjectAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: ObjectKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.ObjectKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ObjectAnimationUsingKeyFrames, v: System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.ObjectKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ObjectAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Point3DAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Point3DAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Point3DAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Point3DAnimationBase, v: System.Windows.Media.Animation.Point3DAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type Point3DAnimation(setProps: Point3DAnimation -> unit) as this =
  inherit Point3DAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.Point3DAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Point3D>
  static let _DefEasingFunction = System.Windows.Media.Animation.Point3DAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.Point3DAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Point3D>
  static let _DefTo = System.Windows.Media.Animation.Point3DAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Point3D>

  do setProps this

  new() = Point3DAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Point3DAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Point3DAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Media.Media3D.Point3D option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Media.Media3D.Point3D option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Media.Media3D.Point3D option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Point3DAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Point3DAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Point3DAnimation, v: System.Windows.Media.Animation.Point3DAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Point3DAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Point3DAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Point3DAnimationUsingKeyFrames(setProps: Point3DAnimationUsingKeyFrames -> unit) as this =
  inherit Point3DAnimationBase()


  do setProps this

  new() = Point3DAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: Point3DKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.Point3DKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Point3DAnimationUsingKeyFrames, v: System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Point3DKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Point3DAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type PointAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.PointAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.PointAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointAnimationBase, v: System.Windows.Media.Animation.PointAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type PointAnimation(setProps: PointAnimation -> unit) as this =
  inherit PointAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.PointAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Point>
  static let _DefEasingFunction = System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.PointAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Point>
  static let _DefTo = System.Windows.Media.Animation.PointAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Point>

  do setProps this

  new() = PointAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.PointAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.PointAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Point option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Point option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Point option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.PointAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.PointAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointAnimation, v: System.Windows.Media.Animation.PointAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.PointAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PointAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PointAnimationUsingKeyFrames(setProps: PointAnimationUsingKeyFrames -> unit) as this =
  inherit PointAnimationBase()


  do setProps this

  new() = PointAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.PointAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.PointAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: PointKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.PointAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.PointAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.PointKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointAnimationUsingKeyFrames, v: System.Windows.Media.Animation.PointAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.PointKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.PointAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PointAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PointAnimationUsingPath(setProps: PointAnimationUsingPath -> unit) as this =
  inherit PointAnimationBase()

  static let _DefPathGeometry = System.Windows.Media.Animation.PointAnimationUsingPath.PathGeometryProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PathGeometry

  do setProps this

  new() = PointAnimationUsingPath(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.PointAnimationUsingPath voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.PointAnimationUsingPath voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _PathGeometry: PathGeometry voption
  member this.PathGeometry with set x = this._PathGeometry <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.PointAnimationUsingPath> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.PointAnimationUsingPath) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._PathGeometry |> ValueOption.iter (fun x -> v.PathGeometry <- x.RenderNew () :?> System.Windows.Media.PathGeometry)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointAnimationUsingPath, v: System.Windows.Media.Animation.PointAnimationUsingPath) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefPathGeometry prev._PathGeometry this._PathGeometry id (fun x -> v.PathGeometry <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.PointAnimationUsingPath())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PointAnimationUsingPath as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type QuaternionAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuaternionAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuaternionAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuaternionAnimationBase, v: System.Windows.Media.Animation.QuaternionAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type QuaternionAnimation(setProps: QuaternionAnimation -> unit) as this =
  inherit QuaternionAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.QuaternionAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Quaternion>
  static let _DefEasingFunction = System.Windows.Media.Animation.QuaternionAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.QuaternionAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Quaternion>
  static let _DefTo = System.Windows.Media.Animation.QuaternionAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Quaternion>
  static let _DefUseShortestPath = System.Windows.Media.Animation.QuaternionAnimation.UseShortestPathProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = QuaternionAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.QuaternionAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.QuaternionAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Media.Media3D.Quaternion option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Media.Media3D.Quaternion option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Media.Media3D.Quaternion option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable private _UseShortestPath: bool voption
  member this.UseShortestPath with set x = this._UseShortestPath <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuaternionAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuaternionAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this._UseShortestPath |> ValueOption.iter (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuaternionAnimation, v: System.Windows.Media.Animation.QuaternionAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    updateValue _DefUseShortestPath prev._UseShortestPath this._UseShortestPath id (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.QuaternionAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuaternionAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type QuaternionAnimationUsingKeyFrames(setProps: QuaternionAnimationUsingKeyFrames -> unit) as this =
  inherit QuaternionAnimationBase()


  do setProps this

  new() = QuaternionAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: QuaternionKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.QuaternionKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuaternionAnimationUsingKeyFrames, v: System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.QuaternionKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuaternionAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type RectAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.RectAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.RectAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RectAnimationBase, v: System.Windows.Media.Animation.RectAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type RectAnimation(setProps: RectAnimation -> unit) as this =
  inherit RectAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.RectAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Rect>
  static let _DefEasingFunction = System.Windows.Media.Animation.RectAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.RectAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Rect>
  static let _DefTo = System.Windows.Media.Animation.RectAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Rect>

  do setProps this

  new() = RectAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.RectAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.RectAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Rect option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Rect option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Rect option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.RectAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.RectAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RectAnimation, v: System.Windows.Media.Animation.RectAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.RectAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RectAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RectAnimationUsingKeyFrames(setProps: RectAnimationUsingKeyFrames -> unit) as this =
  inherit RectAnimationBase()


  do setProps this

  new() = RectAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.RectAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.RectAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: RectKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.RectAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.RectAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.RectKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RectAnimationUsingKeyFrames, v: System.Windows.Media.Animation.RectAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.RectKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.RectAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RectAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Rotation3DAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Rotation3DAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Rotation3DAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Rotation3DAnimationBase, v: System.Windows.Media.Animation.Rotation3DAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type Rotation3DAnimation(setProps: Rotation3DAnimation -> unit) as this =
  inherit Rotation3DAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.Rotation3DAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Rotation3D
  static let _DefEasingFunction = System.Windows.Media.Animation.Rotation3DAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.Rotation3DAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Rotation3D
  static let _DefTo = System.Windows.Media.Animation.Rotation3DAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Rotation3D

  do setProps this

  new() = Rotation3DAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Rotation3DAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Rotation3DAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: Rotation3D voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: Rotation3D voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: Rotation3D voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Rotation3DAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Rotation3DAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x.RenderNew () :?> System.Windows.Media.Media3D.Rotation3D)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x.RenderNew () :?> System.Windows.Media.Media3D.Rotation3D)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x.RenderNew () :?> System.Windows.Media.Media3D.Rotation3D)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Rotation3DAnimation, v: System.Windows.Media.Animation.Rotation3DAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By id (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From id (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To id (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Rotation3DAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Rotation3DAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Rotation3DAnimationUsingKeyFrames(setProps: Rotation3DAnimationUsingKeyFrames -> unit) as this =
  inherit Rotation3DAnimationBase()


  do setProps this

  new() = Rotation3DAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: Rotation3DKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.Rotation3DKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Rotation3DAnimationUsingKeyFrames, v: System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Rotation3DKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Rotation3DAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type SingleAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SingleAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SingleAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SingleAnimationBase, v: System.Windows.Media.Animation.SingleAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type SingleAnimation(setProps: SingleAnimation -> unit) as this =
  inherit SingleAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.SingleAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<float32>
  static let _DefEasingFunction = System.Windows.Media.Animation.SingleAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.SingleAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<float32>
  static let _DefTo = System.Windows.Media.Animation.SingleAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<float32>

  do setProps this

  new() = SingleAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SingleAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SingleAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: float32 option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: float32 option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: float32 option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SingleAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SingleAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SingleAnimation, v: System.Windows.Media.Animation.SingleAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SingleAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SingleAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SingleAnimationUsingKeyFrames(setProps: SingleAnimationUsingKeyFrames -> unit) as this =
  inherit SingleAnimationBase()


  do setProps this

  new() = SingleAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: SingleKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SingleAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.SingleKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SingleAnimationUsingKeyFrames, v: System.Windows.Media.Animation.SingleAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.SingleKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SingleAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SingleAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type SizeAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SizeAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SizeAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SizeAnimationBase, v: System.Windows.Media.Animation.SizeAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type SizeAnimation(setProps: SizeAnimation -> unit) as this =
  inherit SizeAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.SizeAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Size>
  static let _DefEasingFunction = System.Windows.Media.Animation.SizeAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.SizeAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Size>
  static let _DefTo = System.Windows.Media.Animation.SizeAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Size>

  do setProps this

  new() = SizeAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SizeAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SizeAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Size option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Size option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Size option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SizeAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SizeAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SizeAnimation, v: System.Windows.Media.Animation.SizeAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SizeAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SizeAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SizeAnimationUsingKeyFrames(setProps: SizeAnimationUsingKeyFrames -> unit) as this =
  inherit SizeAnimationBase()


  do setProps this

  new() = SizeAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: SizeKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SizeAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.SizeKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SizeAnimationUsingKeyFrames, v: System.Windows.Media.Animation.SizeAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.SizeKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SizeAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SizeAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type StringAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.StringAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.StringAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StringAnimationBase, v: System.Windows.Media.Animation.StringAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type StringAnimationUsingKeyFrames(setProps: StringAnimationUsingKeyFrames -> unit) as this =
  inherit StringAnimationBase()


  do setProps this

  new() = StringAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.StringAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.StringAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: StringKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.StringAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.StringAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.StringKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StringAnimationUsingKeyFrames, v: System.Windows.Media.Animation.StringAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.StringKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.StringAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? StringAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ThicknessAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ThicknessAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ThicknessAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ThicknessAnimationBase, v: System.Windows.Media.Animation.ThicknessAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type ThicknessAnimation(setProps: ThicknessAnimation -> unit) as this =
  inherit ThicknessAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.ThicknessAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Thickness>
  static let _DefEasingFunction = System.Windows.Media.Animation.ThicknessAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.ThicknessAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Thickness>
  static let _DefTo = System.Windows.Media.Animation.ThicknessAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Thickness>

  do setProps this

  new() = ThicknessAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ThicknessAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ThicknessAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Thickness option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Thickness option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Thickness option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ThicknessAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ThicknessAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ThicknessAnimation, v: System.Windows.Media.Animation.ThicknessAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ThicknessAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ThicknessAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ThicknessAnimationUsingKeyFrames(setProps: ThicknessAnimationUsingKeyFrames -> unit) as this =
  inherit ThicknessAnimationBase()


  do setProps this

  new() = ThicknessAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: ThicknessKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.ThicknessKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ThicknessAnimationUsingKeyFrames, v: System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.ThicknessKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ThicknessAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ThicknessAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Vector3DAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Vector3DAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Vector3DAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Vector3DAnimationBase, v: System.Windows.Media.Animation.Vector3DAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type Vector3DAnimation(setProps: Vector3DAnimation -> unit) as this =
  inherit Vector3DAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.Vector3DAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Vector3D>
  static let _DefEasingFunction = System.Windows.Media.Animation.Vector3DAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.Vector3DAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Vector3D>
  static let _DefTo = System.Windows.Media.Animation.Vector3DAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Media.Media3D.Vector3D>

  do setProps this

  new() = Vector3DAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Vector3DAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Vector3DAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Media.Media3D.Vector3D option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Media.Media3D.Vector3D option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Media.Media3D.Vector3D option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Vector3DAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Vector3DAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Vector3DAnimation, v: System.Windows.Media.Animation.Vector3DAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Vector3DAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Vector3DAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Vector3DAnimationUsingKeyFrames(setProps: Vector3DAnimationUsingKeyFrames -> unit) as this =
  inherit Vector3DAnimationBase()


  do setProps this

  new() = Vector3DAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: Vector3DKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.Vector3DKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Vector3DAnimationUsingKeyFrames, v: System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Vector3DKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Vector3DAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type VectorAnimationBase() =
  inherit AnimationTimeline()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.VectorAnimationBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.VectorAnimationBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VectorAnimationBase, v: System.Windows.Media.Animation.VectorAnimationBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type VectorAnimation(setProps: VectorAnimation -> unit) as this =
  inherit VectorAnimationBase()

  static let _DefBy = System.Windows.Media.Animation.VectorAnimation.ByProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Vector>
  static let _DefEasingFunction = System.Windows.Media.Animation.VectorAnimation.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefFrom = System.Windows.Media.Animation.VectorAnimation.FromProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Vector>
  static let _DefTo = System.Windows.Media.Animation.VectorAnimation.ToProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.Windows.Vector>

  do setProps this

  new() = VectorAnimation(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.VectorAnimation voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.VectorAnimation voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _By: System.Windows.Vector option voption
  member this.By with set x = this._By <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _From: System.Windows.Vector option voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _To: System.Windows.Vector option voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.VectorAnimation> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.VectorAnimation) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._By |> ValueOption.iter (fun x -> v.By <- x |> Option.toNullable)
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._From |> ValueOption.iter (fun x -> v.From <- x |> Option.toNullable)
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._To |> ValueOption.iter (fun x -> v.To <- x |> Option.toNullable)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VectorAnimation, v: System.Windows.Media.Animation.VectorAnimation) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBy prev._By this._By Option.toNullable (fun x -> v.By <- x)
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefFrom prev._From this._From Option.toNullable (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue _DefTo prev._To this._To Option.toNullable (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.VectorAnimation())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VectorAnimation as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VectorAnimationUsingKeyFrames(setProps: VectorAnimationUsingKeyFrames -> unit) as this =
  inherit VectorAnimationBase()


  do setProps this

  new() = VectorAnimationUsingKeyFrames(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsAdditive: bool voption
  member this.IsAdditive with set x = this._IsAdditive <- ValueSome x

  [<DefaultValue>] val mutable private _IsCumulative: bool voption
  member this.IsCumulative with set x = this._IsCumulative <- ValueSome x

  [<DefaultValue>] val mutable private _KeyFrames: VectorKeyFrameCollection voption
  member this.KeyFrames with set x = this._KeyFrames <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.VectorAnimationUsingKeyFrames> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsAdditive |> ValueOption.iter (fun x -> v.IsAdditive <- x)
    this._IsCumulative |> ValueOption.iter (fun x -> v.IsCumulative <- x)
    this._KeyFrames |> ValueOption.iter (fun x -> v.KeyFrames <- x.RenderNew () :?> System.Windows.Media.Animation.VectorKeyFrameCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VectorAnimationUsingKeyFrames, v: System.Windows.Media.Animation.VectorAnimationUsingKeyFrames) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._IsAdditive this._IsAdditive id (fun x -> v.IsAdditive <- x)
    updateValue Unchecked.defaultof<bool> prev._IsCumulative this._IsCumulative id (fun x -> v.IsCumulative <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.VectorKeyFrameCollection> prev._KeyFrames this._KeyFrames id (fun x -> v.KeyFrames <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.VectorAnimationUsingKeyFrames())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VectorAnimationUsingKeyFrames as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MediaTimeline(setProps: MediaTimeline -> unit) as this =
  inherit Timeline()

  static let _DefSource = System.Windows.Media.MediaTimeline.SourceProperty.DefaultMetadata.DefaultValue :?> System.Uri

  do setProps this

  new() = MediaTimeline(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.MediaTimeline voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.MediaTimeline voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Source: System.Uri voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.MediaTimeline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.MediaTimeline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Source |> ValueOption.iter (fun x -> v.Source <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MediaTimeline, v: System.Windows.Media.MediaTimeline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.MediaTimeline())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MediaTimeline as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type TimelineGroup() =
  inherit Timeline()

  static let _DefChildren = System.Windows.Media.Animation.TimelineGroup.ChildrenProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.TimelineCollection

  [<DefaultValue>] val mutable private _Children: TimelineCollection voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.TimelineGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.TimelineGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun x -> v.Children <- x.RenderNew () :?> System.Windows.Media.Animation.TimelineCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TimelineGroup, v: System.Windows.Media.Animation.TimelineGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefChildren prev._Children this._Children id (fun x -> v.Children <- x)
    this.SilenceEvents <- false


type ParallelTimeline(setProps: ParallelTimeline -> unit) as this =
  inherit TimelineGroup()

  static let _DefSlipBehavior = System.Windows.Media.Animation.ParallelTimeline.SlipBehaviorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.SlipBehavior

  do setProps this

  new() = ParallelTimeline(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ParallelTimeline voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ParallelTimeline voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _SlipBehavior: System.Windows.Media.Animation.SlipBehavior voption
  member this.SlipBehavior with set x = this._SlipBehavior <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ParallelTimeline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ParallelTimeline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._SlipBehavior |> ValueOption.iter (fun x -> v.SlipBehavior <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ParallelTimeline, v: System.Windows.Media.Animation.ParallelTimeline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSlipBehavior prev._SlipBehavior this._SlipBehavior id (fun x -> v.SlipBehavior <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ParallelTimeline())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ParallelTimeline as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Storyboard(setProps: Storyboard -> unit) as this =
  inherit ParallelTimeline()


  do setProps this

  new() = Storyboard(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Storyboard voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Storyboard voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Storyboard> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Storyboard) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Storyboard, v: System.Windows.Media.Animation.Storyboard) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Storyboard())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Storyboard as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TimelineCollection(setProps: TimelineCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = TimelineCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.TimelineCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.TimelineCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Timeline list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.TimelineCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.TimelineCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.Timeline |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TimelineCollection, v: System.Windows.Media.Animation.TimelineCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.TimelineCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TimelineCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Transform3DCollection(setProps: Transform3DCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = Transform3DCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Transform3DCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Transform3DCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Transform3D list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Transform3DCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Transform3DCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.Transform3D |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Transform3DCollection, v: System.Windows.Media.Media3D.Transform3DCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Transform3DCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Transform3DCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TransformCollection(setProps: TransformCollection -> unit) as this =
  inherit Animatable()


  do setProps this

  new() = TransformCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.TransformCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.TransformCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Transform list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.TransformCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.TransformCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Transform |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TransformCollection, v: System.Windows.Media.TransformCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.TransformCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TransformCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type BooleanKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.BooleanKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.BooleanKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> bool

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: bool voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.BooleanKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.BooleanKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BooleanKeyFrame, v: System.Windows.Media.Animation.BooleanKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteBooleanKeyFrame(setProps: DiscreteBooleanKeyFrame -> unit) as this =
  inherit BooleanKeyFrame()


  do setProps this

  new() = DiscreteBooleanKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteBooleanKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteBooleanKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteBooleanKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteBooleanKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteBooleanKeyFrame, v: System.Windows.Media.Animation.DiscreteBooleanKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteBooleanKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteBooleanKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type BooleanKeyFrameCollection(setProps: BooleanKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = BooleanKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.BooleanKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.BooleanKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: BooleanKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.BooleanKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.BooleanKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.BooleanKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BooleanKeyFrameCollection, v: System.Windows.Media.Animation.BooleanKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.BooleanKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BooleanKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ByteKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.ByteKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.ByteKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> byte

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: byte voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ByteKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ByteKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ByteKeyFrame, v: System.Windows.Media.Animation.ByteKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteByteKeyFrame(setProps: DiscreteByteKeyFrame -> unit) as this =
  inherit ByteKeyFrame()


  do setProps this

  new() = DiscreteByteKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteByteKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteByteKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteByteKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteByteKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteByteKeyFrame, v: System.Windows.Media.Animation.DiscreteByteKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteByteKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteByteKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingByteKeyFrame(setProps: EasingByteKeyFrame -> unit) as this =
  inherit ByteKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingByteKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingByteKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingByteKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingByteKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingByteKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingByteKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingByteKeyFrame, v: System.Windows.Media.Animation.EasingByteKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingByteKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingByteKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearByteKeyFrame(setProps: LinearByteKeyFrame -> unit) as this =
  inherit ByteKeyFrame()


  do setProps this

  new() = LinearByteKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearByteKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearByteKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearByteKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearByteKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearByteKeyFrame, v: System.Windows.Media.Animation.LinearByteKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearByteKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearByteKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineByteKeyFrame(setProps: SplineByteKeyFrame -> unit) as this =
  inherit ByteKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineByteKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineByteKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineByteKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineByteKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineByteKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineByteKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineByteKeyFrame, v: System.Windows.Media.Animation.SplineByteKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineByteKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineByteKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ByteKeyFrameCollection(setProps: ByteKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = ByteKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ByteKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ByteKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: ByteKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ByteKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ByteKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.ByteKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ByteKeyFrameCollection, v: System.Windows.Media.Animation.ByteKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ByteKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ByteKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type CharKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.CharKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.CharKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> char

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: char voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.CharKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.CharKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CharKeyFrame, v: System.Windows.Media.Animation.CharKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteCharKeyFrame(setProps: DiscreteCharKeyFrame -> unit) as this =
  inherit CharKeyFrame()


  do setProps this

  new() = DiscreteCharKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteCharKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteCharKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteCharKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteCharKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteCharKeyFrame, v: System.Windows.Media.Animation.DiscreteCharKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteCharKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteCharKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CharKeyFrameCollection(setProps: CharKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = CharKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.CharKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.CharKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: CharKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.CharKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.CharKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.CharKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CharKeyFrameCollection, v: System.Windows.Media.Animation.CharKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.CharKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CharKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ColorKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.ColorKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Color

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Media.Color voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ColorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ColorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ColorKeyFrame, v: System.Windows.Media.Animation.ColorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteColorKeyFrame(setProps: DiscreteColorKeyFrame -> unit) as this =
  inherit ColorKeyFrame()


  do setProps this

  new() = DiscreteColorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteColorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteColorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteColorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteColorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteColorKeyFrame, v: System.Windows.Media.Animation.DiscreteColorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteColorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteColorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingColorKeyFrame(setProps: EasingColorKeyFrame -> unit) as this =
  inherit ColorKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingColorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingColorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingColorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingColorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingColorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingColorKeyFrame, v: System.Windows.Media.Animation.EasingColorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingColorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingColorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearColorKeyFrame(setProps: LinearColorKeyFrame -> unit) as this =
  inherit ColorKeyFrame()


  do setProps this

  new() = LinearColorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearColorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearColorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearColorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearColorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearColorKeyFrame, v: System.Windows.Media.Animation.LinearColorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearColorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearColorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineColorKeyFrame(setProps: SplineColorKeyFrame -> unit) as this =
  inherit ColorKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineColorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineColorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineColorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineColorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineColorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineColorKeyFrame, v: System.Windows.Media.Animation.SplineColorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineColorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineColorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ColorKeyFrameCollection(setProps: ColorKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = ColorKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ColorKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ColorKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: ColorKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ColorKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ColorKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.ColorKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ColorKeyFrameCollection, v: System.Windows.Media.Animation.ColorKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ColorKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ColorKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type DecimalKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.DecimalKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.DecimalKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> decimal

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: decimal voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DecimalKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DecimalKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DecimalKeyFrame, v: System.Windows.Media.Animation.DecimalKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteDecimalKeyFrame(setProps: DiscreteDecimalKeyFrame -> unit) as this =
  inherit DecimalKeyFrame()


  do setProps this

  new() = DiscreteDecimalKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteDecimalKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteDecimalKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteDecimalKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteDecimalKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteDecimalKeyFrame, v: System.Windows.Media.Animation.DiscreteDecimalKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteDecimalKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteDecimalKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingDecimalKeyFrame(setProps: EasingDecimalKeyFrame -> unit) as this =
  inherit DecimalKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingDecimalKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingDecimalKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingDecimalKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingDecimalKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingDecimalKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingDecimalKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingDecimalKeyFrame, v: System.Windows.Media.Animation.EasingDecimalKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingDecimalKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingDecimalKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearDecimalKeyFrame(setProps: LinearDecimalKeyFrame -> unit) as this =
  inherit DecimalKeyFrame()


  do setProps this

  new() = LinearDecimalKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearDecimalKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearDecimalKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearDecimalKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearDecimalKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearDecimalKeyFrame, v: System.Windows.Media.Animation.LinearDecimalKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearDecimalKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearDecimalKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineDecimalKeyFrame(setProps: SplineDecimalKeyFrame -> unit) as this =
  inherit DecimalKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineDecimalKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineDecimalKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineDecimalKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineDecimalKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineDecimalKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineDecimalKeyFrame, v: System.Windows.Media.Animation.SplineDecimalKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineDecimalKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineDecimalKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DecimalKeyFrameCollection(setProps: DecimalKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = DecimalKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DecimalKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DecimalKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: DecimalKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DecimalKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DecimalKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.DecimalKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DecimalKeyFrameCollection, v: System.Windows.Media.Animation.DecimalKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DecimalKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DecimalKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DoubleCollection(setProps: DoubleCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = DoubleCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.DoubleCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.DoubleCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: float list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.DoubleCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.DoubleCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (v.Add >> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DoubleCollection, v: System.Windows.Media.DoubleCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.DoubleCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DoubleCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type DoubleKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> float

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: float voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DoubleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DoubleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DoubleKeyFrame, v: System.Windows.Media.Animation.DoubleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteDoubleKeyFrame(setProps: DiscreteDoubleKeyFrame -> unit) as this =
  inherit DoubleKeyFrame()


  do setProps this

  new() = DiscreteDoubleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteDoubleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteDoubleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteDoubleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteDoubleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteDoubleKeyFrame, v: System.Windows.Media.Animation.DiscreteDoubleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteDoubleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteDoubleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingDoubleKeyFrame(setProps: EasingDoubleKeyFrame -> unit) as this =
  inherit DoubleKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingDoubleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingDoubleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingDoubleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingDoubleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingDoubleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingDoubleKeyFrame, v: System.Windows.Media.Animation.EasingDoubleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingDoubleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingDoubleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearDoubleKeyFrame(setProps: LinearDoubleKeyFrame -> unit) as this =
  inherit DoubleKeyFrame()


  do setProps this

  new() = LinearDoubleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearDoubleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearDoubleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearDoubleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearDoubleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearDoubleKeyFrame, v: System.Windows.Media.Animation.LinearDoubleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearDoubleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearDoubleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineDoubleKeyFrame(setProps: SplineDoubleKeyFrame -> unit) as this =
  inherit DoubleKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineDoubleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineDoubleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineDoubleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineDoubleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineDoubleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineDoubleKeyFrame, v: System.Windows.Media.Animation.SplineDoubleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineDoubleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineDoubleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DoubleKeyFrameCollection(setProps: DoubleKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = DoubleKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DoubleKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DoubleKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: DoubleKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DoubleKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DoubleKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.DoubleKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DoubleKeyFrameCollection, v: System.Windows.Media.Animation.DoubleKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DoubleKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DoubleKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type EasingFunctionBase() =
  inherit Freezable()

  static let _DefEasingMode = System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.EasingMode

  [<DefaultValue>] val mutable private _EasingMode: System.Windows.Media.Animation.EasingMode voption
  member this.EasingMode with set x = this._EasingMode <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingFunctionBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingFunctionBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingMode |> ValueOption.iter (fun x -> v.EasingMode <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingFunctionBase, v: System.Windows.Media.Animation.EasingFunctionBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingMode prev._EasingMode this._EasingMode id (fun x -> v.EasingMode <- x)
    this.SilenceEvents <- false


type BackEase(setProps: BackEase -> unit) as this =
  inherit EasingFunctionBase()

  static let _DefAmplitude = System.Windows.Media.Animation.BackEase.AmplitudeProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = BackEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.BackEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.BackEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Amplitude: float voption
  member this.Amplitude with set x = this._Amplitude <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.BackEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.BackEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Amplitude |> ValueOption.iter (fun x -> v.Amplitude <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BackEase, v: System.Windows.Media.Animation.BackEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAmplitude prev._Amplitude this._Amplitude id (fun x -> v.Amplitude <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.BackEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BackEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type BounceEase(setProps: BounceEase -> unit) as this =
  inherit EasingFunctionBase()

  static let _DefBounces = System.Windows.Media.Animation.BounceEase.BouncesProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefBounciness = System.Windows.Media.Animation.BounceEase.BouncinessProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = BounceEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.BounceEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.BounceEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Bounces: int voption
  member this.Bounces with set x = this._Bounces <- ValueSome x

  [<DefaultValue>] val mutable private _Bounciness: float voption
  member this.Bounciness with set x = this._Bounciness <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.BounceEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.BounceEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Bounces |> ValueOption.iter (fun x -> v.Bounces <- x)
    this._Bounciness |> ValueOption.iter (fun x -> v.Bounciness <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BounceEase, v: System.Windows.Media.Animation.BounceEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBounces prev._Bounces this._Bounces id (fun x -> v.Bounces <- x)
    updateValue _DefBounciness prev._Bounciness this._Bounciness id (fun x -> v.Bounciness <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.BounceEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BounceEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CircleEase(setProps: CircleEase -> unit) as this =
  inherit EasingFunctionBase()


  do setProps this

  new() = CircleEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.CircleEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.CircleEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.CircleEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.CircleEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CircleEase, v: System.Windows.Media.Animation.CircleEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.CircleEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CircleEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CubicEase(setProps: CubicEase -> unit) as this =
  inherit EasingFunctionBase()


  do setProps this

  new() = CubicEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.CubicEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.CubicEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.CubicEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.CubicEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CubicEase, v: System.Windows.Media.Animation.CubicEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.CubicEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CubicEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ElasticEase(setProps: ElasticEase -> unit) as this =
  inherit EasingFunctionBase()

  static let _DefOscillations = System.Windows.Media.Animation.ElasticEase.OscillationsProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefSpringiness = System.Windows.Media.Animation.ElasticEase.SpringinessProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ElasticEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ElasticEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ElasticEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Oscillations: int voption
  member this.Oscillations with set x = this._Oscillations <- ValueSome x

  [<DefaultValue>] val mutable private _Springiness: float voption
  member this.Springiness with set x = this._Springiness <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ElasticEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ElasticEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Oscillations |> ValueOption.iter (fun x -> v.Oscillations <- x)
    this._Springiness |> ValueOption.iter (fun x -> v.Springiness <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ElasticEase, v: System.Windows.Media.Animation.ElasticEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefOscillations prev._Oscillations this._Oscillations id (fun x -> v.Oscillations <- x)
    updateValue _DefSpringiness prev._Springiness this._Springiness id (fun x -> v.Springiness <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ElasticEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ElasticEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ExponentialEase(setProps: ExponentialEase -> unit) as this =
  inherit EasingFunctionBase()

  static let _DefExponent = System.Windows.Media.Animation.ExponentialEase.ExponentProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ExponentialEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ExponentialEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ExponentialEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Exponent: float voption
  member this.Exponent with set x = this._Exponent <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ExponentialEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ExponentialEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Exponent |> ValueOption.iter (fun x -> v.Exponent <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ExponentialEase, v: System.Windows.Media.Animation.ExponentialEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefExponent prev._Exponent this._Exponent id (fun x -> v.Exponent <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ExponentialEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ExponentialEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PowerEase(setProps: PowerEase -> unit) as this =
  inherit EasingFunctionBase()

  static let _DefPower = System.Windows.Media.Animation.PowerEase.PowerProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = PowerEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.PowerEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.PowerEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Power: float voption
  member this.Power with set x = this._Power <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.PowerEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.PowerEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Power |> ValueOption.iter (fun x -> v.Power <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PowerEase, v: System.Windows.Media.Animation.PowerEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefPower prev._Power this._Power id (fun x -> v.Power <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.PowerEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PowerEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type QuadraticEase(setProps: QuadraticEase -> unit) as this =
  inherit EasingFunctionBase()


  do setProps this

  new() = QuadraticEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.QuadraticEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.QuadraticEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuadraticEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuadraticEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuadraticEase, v: System.Windows.Media.Animation.QuadraticEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.QuadraticEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuadraticEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type QuarticEase(setProps: QuarticEase -> unit) as this =
  inherit EasingFunctionBase()


  do setProps this

  new() = QuarticEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.QuarticEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.QuarticEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuarticEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuarticEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuarticEase, v: System.Windows.Media.Animation.QuarticEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.QuarticEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuarticEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type QuinticEase(setProps: QuinticEase -> unit) as this =
  inherit EasingFunctionBase()


  do setProps this

  new() = QuinticEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.QuinticEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.QuinticEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuinticEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuinticEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuinticEase, v: System.Windows.Media.Animation.QuinticEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.QuinticEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuinticEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SineEase(setProps: SineEase -> unit) as this =
  inherit EasingFunctionBase()


  do setProps this

  new() = SineEase(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SineEase voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SineEase voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SineEase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SineEase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SineEase, v: System.Windows.Media.Animation.SineEase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SineEase())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SineEase as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Int16KeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.Int16KeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.Int16KeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> int16

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: int16 voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int16KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int16KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int16KeyFrame, v: System.Windows.Media.Animation.Int16KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteInt16KeyFrame(setProps: DiscreteInt16KeyFrame -> unit) as this =
  inherit Int16KeyFrame()


  do setProps this

  new() = DiscreteInt16KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteInt16KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteInt16KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteInt16KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteInt16KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteInt16KeyFrame, v: System.Windows.Media.Animation.DiscreteInt16KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteInt16KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteInt16KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingInt16KeyFrame(setProps: EasingInt16KeyFrame -> unit) as this =
  inherit Int16KeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingInt16KeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingInt16KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingInt16KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingInt16KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingInt16KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingInt16KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingInt16KeyFrame, v: System.Windows.Media.Animation.EasingInt16KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingInt16KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingInt16KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearInt16KeyFrame(setProps: LinearInt16KeyFrame -> unit) as this =
  inherit Int16KeyFrame()


  do setProps this

  new() = LinearInt16KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearInt16KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearInt16KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearInt16KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearInt16KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearInt16KeyFrame, v: System.Windows.Media.Animation.LinearInt16KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearInt16KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearInt16KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineInt16KeyFrame(setProps: SplineInt16KeyFrame -> unit) as this =
  inherit Int16KeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineInt16KeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineInt16KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineInt16KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineInt16KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineInt16KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineInt16KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineInt16KeyFrame, v: System.Windows.Media.Animation.SplineInt16KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineInt16KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineInt16KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Int16KeyFrameCollection(setProps: Int16KeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Int16KeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int16KeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int16KeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Int16KeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int16KeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int16KeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.Int16KeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int16KeyFrameCollection, v: System.Windows.Media.Animation.Int16KeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int16KeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int16KeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Int32Collection(setProps: Int32Collection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Int32Collection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Int32Collection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Int32Collection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: int list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Int32Collection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Int32Collection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (v.Add >> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int32Collection, v: System.Windows.Media.Int32Collection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Int32Collection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int32Collection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Int32KeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.Int32KeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.Int32KeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> int

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: int voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int32KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int32KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int32KeyFrame, v: System.Windows.Media.Animation.Int32KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteInt32KeyFrame(setProps: DiscreteInt32KeyFrame -> unit) as this =
  inherit Int32KeyFrame()


  do setProps this

  new() = DiscreteInt32KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteInt32KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteInt32KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteInt32KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteInt32KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteInt32KeyFrame, v: System.Windows.Media.Animation.DiscreteInt32KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteInt32KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteInt32KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingInt32KeyFrame(setProps: EasingInt32KeyFrame -> unit) as this =
  inherit Int32KeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingInt32KeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingInt32KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingInt32KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingInt32KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingInt32KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingInt32KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingInt32KeyFrame, v: System.Windows.Media.Animation.EasingInt32KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingInt32KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingInt32KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearInt32KeyFrame(setProps: LinearInt32KeyFrame -> unit) as this =
  inherit Int32KeyFrame()


  do setProps this

  new() = LinearInt32KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearInt32KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearInt32KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearInt32KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearInt32KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearInt32KeyFrame, v: System.Windows.Media.Animation.LinearInt32KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearInt32KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearInt32KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineInt32KeyFrame(setProps: SplineInt32KeyFrame -> unit) as this =
  inherit Int32KeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineInt32KeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineInt32KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineInt32KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineInt32KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineInt32KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineInt32KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineInt32KeyFrame, v: System.Windows.Media.Animation.SplineInt32KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineInt32KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineInt32KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Int32KeyFrameCollection(setProps: Int32KeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Int32KeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int32KeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int32KeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Int32KeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int32KeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int32KeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.Int32KeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int32KeyFrameCollection, v: System.Windows.Media.Animation.Int32KeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int32KeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int32KeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Int64KeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.Int64KeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.Int64KeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> int64

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: int64 voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int64KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int64KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int64KeyFrame, v: System.Windows.Media.Animation.Int64KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteInt64KeyFrame(setProps: DiscreteInt64KeyFrame -> unit) as this =
  inherit Int64KeyFrame()


  do setProps this

  new() = DiscreteInt64KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteInt64KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteInt64KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteInt64KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteInt64KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteInt64KeyFrame, v: System.Windows.Media.Animation.DiscreteInt64KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteInt64KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteInt64KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingInt64KeyFrame(setProps: EasingInt64KeyFrame -> unit) as this =
  inherit Int64KeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingInt64KeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingInt64KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingInt64KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingInt64KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingInt64KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingInt64KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingInt64KeyFrame, v: System.Windows.Media.Animation.EasingInt64KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingInt64KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingInt64KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearInt64KeyFrame(setProps: LinearInt64KeyFrame -> unit) as this =
  inherit Int64KeyFrame()


  do setProps this

  new() = LinearInt64KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearInt64KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearInt64KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearInt64KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearInt64KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearInt64KeyFrame, v: System.Windows.Media.Animation.LinearInt64KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearInt64KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearInt64KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineInt64KeyFrame(setProps: SplineInt64KeyFrame -> unit) as this =
  inherit Int64KeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineInt64KeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineInt64KeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineInt64KeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineInt64KeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineInt64KeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineInt64KeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineInt64KeyFrame, v: System.Windows.Media.Animation.SplineInt64KeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineInt64KeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineInt64KeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Int64KeyFrameCollection(setProps: Int64KeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Int64KeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Int64KeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Int64KeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Int64KeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Int64KeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Int64KeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.Int64KeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Int64KeyFrameCollection, v: System.Windows.Media.Animation.Int64KeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Int64KeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Int64KeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type KeySpline(setProps: KeySpline -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = KeySpline(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.KeySpline voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.KeySpline voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ControlPoint1: System.Windows.Point voption
  member this.ControlPoint1 with set x = this._ControlPoint1 <- ValueSome x

  [<DefaultValue>] val mutable private _ControlPoint2: System.Windows.Point voption
  member this.ControlPoint2 with set x = this._ControlPoint2 <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.KeySpline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.KeySpline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ControlPoint1 |> ValueOption.iter (fun x -> v.ControlPoint1 <- x)
    this._ControlPoint2 |> ValueOption.iter (fun x -> v.ControlPoint2 <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: KeySpline, v: System.Windows.Media.Animation.KeySpline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Point> prev._ControlPoint1 this._ControlPoint1 id (fun x -> v.ControlPoint1 <- x)
    updateValue Unchecked.defaultof<System.Windows.Point> prev._ControlPoint2 this._ControlPoint2 id (fun x -> v.ControlPoint2 <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.KeySpline())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? KeySpline as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type MatrixKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.MatrixKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.MatrixKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Matrix

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Media.Matrix voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.MatrixKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.MatrixKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixKeyFrame, v: System.Windows.Media.Animation.MatrixKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteMatrixKeyFrame(setProps: DiscreteMatrixKeyFrame -> unit) as this =
  inherit MatrixKeyFrame()


  do setProps this

  new() = DiscreteMatrixKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteMatrixKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteMatrixKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteMatrixKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteMatrixKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteMatrixKeyFrame, v: System.Windows.Media.Animation.DiscreteMatrixKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteMatrixKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteMatrixKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MatrixKeyFrameCollection(setProps: MatrixKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = MatrixKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.MatrixKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.MatrixKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: MatrixKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.MatrixKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.MatrixKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.MatrixKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MatrixKeyFrameCollection, v: System.Windows.Media.Animation.MatrixKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.MatrixKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MatrixKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ObjectKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> obj

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: obj voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ObjectKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ObjectKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ObjectKeyFrame, v: System.Windows.Media.Animation.ObjectKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteObjectKeyFrame(setProps: DiscreteObjectKeyFrame -> unit) as this =
  inherit ObjectKeyFrame()


  do setProps this

  new() = DiscreteObjectKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteObjectKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteObjectKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteObjectKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteObjectKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteObjectKeyFrame, v: System.Windows.Media.Animation.DiscreteObjectKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteObjectKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteObjectKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ObjectKeyFrameCollection(setProps: ObjectKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = ObjectKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ObjectKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ObjectKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: ObjectKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ObjectKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ObjectKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.ObjectKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ObjectKeyFrameCollection, v: System.Windows.Media.Animation.ObjectKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ObjectKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ObjectKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Point3DCollection(setProps: Point3DCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Point3DCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Point3DCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Point3DCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: System.Windows.Media.Media3D.Point3D list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Point3DCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Point3DCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (v.Add >> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Point3DCollection, v: System.Windows.Media.Media3D.Point3DCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Point3DCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Point3DCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Point3DKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.Point3DKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.Point3DKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Point3D

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Media.Media3D.Point3D voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Point3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Point3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Point3DKeyFrame, v: System.Windows.Media.Animation.Point3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscretePoint3DKeyFrame(setProps: DiscretePoint3DKeyFrame -> unit) as this =
  inherit Point3DKeyFrame()


  do setProps this

  new() = DiscretePoint3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscretePoint3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscretePoint3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscretePoint3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscretePoint3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscretePoint3DKeyFrame, v: System.Windows.Media.Animation.DiscretePoint3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscretePoint3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscretePoint3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingPoint3DKeyFrame(setProps: EasingPoint3DKeyFrame -> unit) as this =
  inherit Point3DKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingPoint3DKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingPoint3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingPoint3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingPoint3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingPoint3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingPoint3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingPoint3DKeyFrame, v: System.Windows.Media.Animation.EasingPoint3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingPoint3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingPoint3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearPoint3DKeyFrame(setProps: LinearPoint3DKeyFrame -> unit) as this =
  inherit Point3DKeyFrame()


  do setProps this

  new() = LinearPoint3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearPoint3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearPoint3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearPoint3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearPoint3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearPoint3DKeyFrame, v: System.Windows.Media.Animation.LinearPoint3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearPoint3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearPoint3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplinePoint3DKeyFrame(setProps: SplinePoint3DKeyFrame -> unit) as this =
  inherit Point3DKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplinePoint3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplinePoint3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplinePoint3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplinePoint3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplinePoint3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplinePoint3DKeyFrame, v: System.Windows.Media.Animation.SplinePoint3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplinePoint3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplinePoint3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Point3DKeyFrameCollection(setProps: Point3DKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Point3DKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Point3DKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Point3DKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Point3DKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Point3DKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Point3DKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.Point3DKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Point3DKeyFrameCollection, v: System.Windows.Media.Animation.Point3DKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Point3DKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Point3DKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PointCollection(setProps: PointCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = PointCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.PointCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.PointCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: System.Windows.Point list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.PointCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.PointCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (v.Add >> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointCollection, v: System.Windows.Media.PointCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.PointCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PointCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type PointKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.PointKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Point voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.PointKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.PointKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointKeyFrame, v: System.Windows.Media.Animation.PointKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscretePointKeyFrame(setProps: DiscretePointKeyFrame -> unit) as this =
  inherit PointKeyFrame()


  do setProps this

  new() = DiscretePointKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscretePointKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscretePointKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscretePointKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscretePointKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscretePointKeyFrame, v: System.Windows.Media.Animation.DiscretePointKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscretePointKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscretePointKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingPointKeyFrame(setProps: EasingPointKeyFrame -> unit) as this =
  inherit PointKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingPointKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingPointKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingPointKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingPointKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingPointKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingPointKeyFrame, v: System.Windows.Media.Animation.EasingPointKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingPointKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingPointKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearPointKeyFrame(setProps: LinearPointKeyFrame -> unit) as this =
  inherit PointKeyFrame()


  do setProps this

  new() = LinearPointKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearPointKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearPointKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearPointKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearPointKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearPointKeyFrame, v: System.Windows.Media.Animation.LinearPointKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearPointKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearPointKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplinePointKeyFrame(setProps: SplinePointKeyFrame -> unit) as this =
  inherit PointKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplinePointKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplinePointKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplinePointKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplinePointKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplinePointKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplinePointKeyFrame, v: System.Windows.Media.Animation.SplinePointKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplinePointKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplinePointKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PointKeyFrameCollection(setProps: PointKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = PointKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.PointKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.PointKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: PointKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.PointKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.PointKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.PointKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PointKeyFrameCollection, v: System.Windows.Media.Animation.PointKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.PointKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PointKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type QuaternionKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.QuaternionKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.QuaternionKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Quaternion

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Media.Media3D.Quaternion voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuaternionKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuaternionKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuaternionKeyFrame, v: System.Windows.Media.Animation.QuaternionKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteQuaternionKeyFrame(setProps: DiscreteQuaternionKeyFrame -> unit) as this =
  inherit QuaternionKeyFrame()


  do setProps this

  new() = DiscreteQuaternionKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteQuaternionKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteQuaternionKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteQuaternionKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteQuaternionKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteQuaternionKeyFrame, v: System.Windows.Media.Animation.DiscreteQuaternionKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteQuaternionKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteQuaternionKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingQuaternionKeyFrame(setProps: EasingQuaternionKeyFrame -> unit) as this =
  inherit QuaternionKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingQuaternionKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction
  static let _DefUseShortestPath = System.Windows.Media.Animation.EasingQuaternionKeyFrame.UseShortestPathProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = EasingQuaternionKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingQuaternionKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingQuaternionKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _UseShortestPath: bool voption
  member this.UseShortestPath with set x = this._UseShortestPath <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingQuaternionKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingQuaternionKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this._UseShortestPath |> ValueOption.iter (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingQuaternionKeyFrame, v: System.Windows.Media.Animation.EasingQuaternionKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    updateValue _DefUseShortestPath prev._UseShortestPath this._UseShortestPath id (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingQuaternionKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingQuaternionKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearQuaternionKeyFrame(setProps: LinearQuaternionKeyFrame -> unit) as this =
  inherit QuaternionKeyFrame()

  static let _DefUseShortestPath = System.Windows.Media.Animation.LinearQuaternionKeyFrame.UseShortestPathProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = LinearQuaternionKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearQuaternionKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearQuaternionKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _UseShortestPath: bool voption
  member this.UseShortestPath with set x = this._UseShortestPath <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearQuaternionKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearQuaternionKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._UseShortestPath |> ValueOption.iter (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearQuaternionKeyFrame, v: System.Windows.Media.Animation.LinearQuaternionKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefUseShortestPath prev._UseShortestPath this._UseShortestPath id (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearQuaternionKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearQuaternionKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineQuaternionKeyFrame(setProps: SplineQuaternionKeyFrame -> unit) as this =
  inherit QuaternionKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline
  static let _DefUseShortestPath = System.Windows.Media.Animation.SplineQuaternionKeyFrame.UseShortestPathProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = SplineQuaternionKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineQuaternionKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineQuaternionKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable private _UseShortestPath: bool voption
  member this.UseShortestPath with set x = this._UseShortestPath <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineQuaternionKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineQuaternionKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this._UseShortestPath |> ValueOption.iter (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineQuaternionKeyFrame, v: System.Windows.Media.Animation.SplineQuaternionKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    updateValue _DefUseShortestPath prev._UseShortestPath this._UseShortestPath id (fun x -> v.UseShortestPath <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineQuaternionKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineQuaternionKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type QuaternionKeyFrameCollection(setProps: QuaternionKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = QuaternionKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.QuaternionKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.QuaternionKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: QuaternionKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.QuaternionKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.QuaternionKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.QuaternionKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: QuaternionKeyFrameCollection, v: System.Windows.Media.Animation.QuaternionKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.QuaternionKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? QuaternionKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type RectKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.RectKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.RectKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Rect voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.RectKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.RectKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RectKeyFrame, v: System.Windows.Media.Animation.RectKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteRectKeyFrame(setProps: DiscreteRectKeyFrame -> unit) as this =
  inherit RectKeyFrame()


  do setProps this

  new() = DiscreteRectKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteRectKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteRectKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteRectKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteRectKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteRectKeyFrame, v: System.Windows.Media.Animation.DiscreteRectKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteRectKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteRectKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingRectKeyFrame(setProps: EasingRectKeyFrame -> unit) as this =
  inherit RectKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingRectKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingRectKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingRectKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingRectKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingRectKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingRectKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingRectKeyFrame, v: System.Windows.Media.Animation.EasingRectKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingRectKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingRectKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearRectKeyFrame(setProps: LinearRectKeyFrame -> unit) as this =
  inherit RectKeyFrame()


  do setProps this

  new() = LinearRectKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearRectKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearRectKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearRectKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearRectKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearRectKeyFrame, v: System.Windows.Media.Animation.LinearRectKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearRectKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearRectKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineRectKeyFrame(setProps: SplineRectKeyFrame -> unit) as this =
  inherit RectKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineRectKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineRectKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineRectKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineRectKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineRectKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineRectKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineRectKeyFrame, v: System.Windows.Media.Animation.SplineRectKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineRectKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineRectKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RectKeyFrameCollection(setProps: RectKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = RectKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.RectKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.RectKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: RectKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.RectKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.RectKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.RectKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RectKeyFrameCollection, v: System.Windows.Media.Animation.RectKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.RectKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RectKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Rotation3DKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.Rotation3DKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Rotation3D

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: Rotation3D voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Rotation3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Rotation3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x.RenderNew () :?> System.Windows.Media.Media3D.Rotation3D)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Rotation3DKeyFrame, v: System.Windows.Media.Animation.Rotation3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteRotation3DKeyFrame(setProps: DiscreteRotation3DKeyFrame -> unit) as this =
  inherit Rotation3DKeyFrame()


  do setProps this

  new() = DiscreteRotation3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteRotation3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteRotation3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteRotation3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteRotation3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteRotation3DKeyFrame, v: System.Windows.Media.Animation.DiscreteRotation3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteRotation3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteRotation3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingRotation3DKeyFrame(setProps: EasingRotation3DKeyFrame -> unit) as this =
  inherit Rotation3DKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingRotation3DKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingRotation3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingRotation3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingRotation3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingRotation3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingRotation3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingRotation3DKeyFrame, v: System.Windows.Media.Animation.EasingRotation3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingRotation3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingRotation3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearRotation3DKeyFrame(setProps: LinearRotation3DKeyFrame -> unit) as this =
  inherit Rotation3DKeyFrame()


  do setProps this

  new() = LinearRotation3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearRotation3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearRotation3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearRotation3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearRotation3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearRotation3DKeyFrame, v: System.Windows.Media.Animation.LinearRotation3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearRotation3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearRotation3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineRotation3DKeyFrame(setProps: SplineRotation3DKeyFrame -> unit) as this =
  inherit Rotation3DKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineRotation3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineRotation3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineRotation3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineRotation3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineRotation3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineRotation3DKeyFrame, v: System.Windows.Media.Animation.SplineRotation3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineRotation3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineRotation3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Rotation3DKeyFrameCollection(setProps: Rotation3DKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Rotation3DKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Rotation3DKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Rotation3DKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Rotation3DKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Rotation3DKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Rotation3DKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.Rotation3DKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Rotation3DKeyFrameCollection, v: System.Windows.Media.Animation.Rotation3DKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Rotation3DKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Rotation3DKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type SingleKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.SingleKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.SingleKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> float32

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: float32 voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SingleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SingleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SingleKeyFrame, v: System.Windows.Media.Animation.SingleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteSingleKeyFrame(setProps: DiscreteSingleKeyFrame -> unit) as this =
  inherit SingleKeyFrame()


  do setProps this

  new() = DiscreteSingleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteSingleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteSingleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteSingleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteSingleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteSingleKeyFrame, v: System.Windows.Media.Animation.DiscreteSingleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteSingleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteSingleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingSingleKeyFrame(setProps: EasingSingleKeyFrame -> unit) as this =
  inherit SingleKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingSingleKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingSingleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingSingleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingSingleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingSingleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingSingleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingSingleKeyFrame, v: System.Windows.Media.Animation.EasingSingleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingSingleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingSingleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearSingleKeyFrame(setProps: LinearSingleKeyFrame -> unit) as this =
  inherit SingleKeyFrame()


  do setProps this

  new() = LinearSingleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearSingleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearSingleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearSingleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearSingleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearSingleKeyFrame, v: System.Windows.Media.Animation.LinearSingleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearSingleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearSingleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineSingleKeyFrame(setProps: SplineSingleKeyFrame -> unit) as this =
  inherit SingleKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineSingleKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineSingleKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineSingleKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineSingleKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineSingleKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineSingleKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineSingleKeyFrame, v: System.Windows.Media.Animation.SplineSingleKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineSingleKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineSingleKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SingleKeyFrameCollection(setProps: SingleKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = SingleKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SingleKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SingleKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: SingleKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SingleKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SingleKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.SingleKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SingleKeyFrameCollection, v: System.Windows.Media.Animation.SingleKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SingleKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SingleKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type SizeKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.SizeKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.SizeKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Size

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Size voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SizeKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SizeKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SizeKeyFrame, v: System.Windows.Media.Animation.SizeKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteSizeKeyFrame(setProps: DiscreteSizeKeyFrame -> unit) as this =
  inherit SizeKeyFrame()


  do setProps this

  new() = DiscreteSizeKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteSizeKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteSizeKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteSizeKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteSizeKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteSizeKeyFrame, v: System.Windows.Media.Animation.DiscreteSizeKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteSizeKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteSizeKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingSizeKeyFrame(setProps: EasingSizeKeyFrame -> unit) as this =
  inherit SizeKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingSizeKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingSizeKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingSizeKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingSizeKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingSizeKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingSizeKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingSizeKeyFrame, v: System.Windows.Media.Animation.EasingSizeKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingSizeKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingSizeKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearSizeKeyFrame(setProps: LinearSizeKeyFrame -> unit) as this =
  inherit SizeKeyFrame()


  do setProps this

  new() = LinearSizeKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearSizeKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearSizeKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearSizeKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearSizeKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearSizeKeyFrame, v: System.Windows.Media.Animation.LinearSizeKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearSizeKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearSizeKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineSizeKeyFrame(setProps: SplineSizeKeyFrame -> unit) as this =
  inherit SizeKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineSizeKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineSizeKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineSizeKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineSizeKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineSizeKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineSizeKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineSizeKeyFrame, v: System.Windows.Media.Animation.SplineSizeKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineSizeKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineSizeKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SizeKeyFrameCollection(setProps: SizeKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = SizeKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SizeKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SizeKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: SizeKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SizeKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SizeKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.SizeKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SizeKeyFrameCollection, v: System.Windows.Media.Animation.SizeKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SizeKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SizeKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type StringKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.StringKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.StringKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> string

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: string voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.StringKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.StringKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StringKeyFrame, v: System.Windows.Media.Animation.StringKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteStringKeyFrame(setProps: DiscreteStringKeyFrame -> unit) as this =
  inherit StringKeyFrame()


  do setProps this

  new() = DiscreteStringKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteStringKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteStringKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteStringKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteStringKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteStringKeyFrame, v: System.Windows.Media.Animation.DiscreteStringKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteStringKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteStringKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type StringKeyFrameCollection(setProps: StringKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = StringKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.StringKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.StringKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: StringKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.StringKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.StringKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.StringKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StringKeyFrameCollection, v: System.Windows.Media.Animation.StringKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.StringKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? StringKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TaskbarItemInfo(setProps: TaskbarItemInfo -> unit) as this =
  inherit Freezable()

  static let _DefDescription = System.Windows.Shell.TaskbarItemInfo.DescriptionProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefOverlay = System.Windows.Shell.TaskbarItemInfo.OverlayProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ImageSource
  static let _DefProgressState = System.Windows.Shell.TaskbarItemInfo.ProgressStateProperty.DefaultMetadata.DefaultValue :?> System.Windows.Shell.TaskbarItemProgressState
  static let _DefProgressValue = System.Windows.Shell.TaskbarItemInfo.ProgressValueProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefThumbButtonInfos = System.Windows.Shell.TaskbarItemInfo.ThumbButtonInfosProperty.DefaultMetadata.DefaultValue :?> System.Windows.Shell.ThumbButtonInfoCollection
  static let _DefThumbnailClipMargin = System.Windows.Shell.TaskbarItemInfo.ThumbnailClipMarginProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness

  do setProps this

  new() = TaskbarItemInfo(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shell.TaskbarItemInfo voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shell.TaskbarItemInfo voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Description: string voption
  member this.Description with set x = this._Description <- ValueSome x

  [<DefaultValue>] val mutable private _Overlay: ImageSource voption
  member this.Overlay with set x = this._Overlay <- ValueSome x

  [<DefaultValue>] val mutable private _ProgressState: System.Windows.Shell.TaskbarItemProgressState voption
  member this.ProgressState with set x = this._ProgressState <- ValueSome x

  [<DefaultValue>] val mutable private _ProgressValue: float voption
  member this.ProgressValue with set x = this._ProgressValue <- ValueSome x

  [<DefaultValue>] val mutable private _ThumbButtonInfos: ThumbButtonInfoCollection voption
  member this.ThumbButtonInfos with set x = this._ThumbButtonInfos <- ValueSome x

  [<DefaultValue>] val mutable private _ThumbnailClipMargin: System.Windows.Thickness voption
  member this.ThumbnailClipMargin with set x = this._ThumbnailClipMargin <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shell.TaskbarItemInfo> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shell.TaskbarItemInfo) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Description |> ValueOption.iter (fun x -> v.Description <- x)
    this._Overlay |> ValueOption.iter (fun x -> v.Overlay <- x.RenderNew () :?> System.Windows.Media.ImageSource)
    this._ProgressState |> ValueOption.iter (fun x -> v.ProgressState <- x)
    this._ProgressValue |> ValueOption.iter (fun x -> v.ProgressValue <- x)
    this._ThumbButtonInfos |> ValueOption.iter (fun x -> v.ThumbButtonInfos <- x.RenderNew () :?> System.Windows.Shell.ThumbButtonInfoCollection)
    this._ThumbnailClipMargin |> ValueOption.iter (fun x -> v.ThumbnailClipMargin <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TaskbarItemInfo, v: System.Windows.Shell.TaskbarItemInfo) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDescription prev._Description this._Description id (fun x -> v.Description <- x)
    updateValue _DefOverlay prev._Overlay this._Overlay id (fun x -> v.Overlay <- x)
    updateValue _DefProgressState prev._ProgressState this._ProgressState id (fun x -> v.ProgressState <- x)
    updateValue _DefProgressValue prev._ProgressValue this._ProgressValue id (fun x -> v.ProgressValue <- x)
    updateValue _DefThumbButtonInfos prev._ThumbButtonInfos this._ThumbButtonInfos id (fun x -> v.ThumbButtonInfos <- x)
    updateValue _DefThumbnailClipMargin prev._ThumbnailClipMargin this._ThumbnailClipMargin id (fun x -> v.ThumbnailClipMargin <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shell.TaskbarItemInfo())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TaskbarItemInfo as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ThicknessKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.ThicknessKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.ThicknessKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Thickness voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ThicknessKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ThicknessKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ThicknessKeyFrame, v: System.Windows.Media.Animation.ThicknessKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteThicknessKeyFrame(setProps: DiscreteThicknessKeyFrame -> unit) as this =
  inherit ThicknessKeyFrame()


  do setProps this

  new() = DiscreteThicknessKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteThicknessKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteThicknessKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteThicknessKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteThicknessKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteThicknessKeyFrame, v: System.Windows.Media.Animation.DiscreteThicknessKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteThicknessKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteThicknessKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingThicknessKeyFrame(setProps: EasingThicknessKeyFrame -> unit) as this =
  inherit ThicknessKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingThicknessKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingThicknessKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingThicknessKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingThicknessKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingThicknessKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingThicknessKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingThicknessKeyFrame, v: System.Windows.Media.Animation.EasingThicknessKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingThicknessKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingThicknessKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearThicknessKeyFrame(setProps: LinearThicknessKeyFrame -> unit) as this =
  inherit ThicknessKeyFrame()


  do setProps this

  new() = LinearThicknessKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearThicknessKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearThicknessKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearThicknessKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearThicknessKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearThicknessKeyFrame, v: System.Windows.Media.Animation.LinearThicknessKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearThicknessKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearThicknessKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineThicknessKeyFrame(setProps: SplineThicknessKeyFrame -> unit) as this =
  inherit ThicknessKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineThicknessKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineThicknessKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineThicknessKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineThicknessKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineThicknessKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineThicknessKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineThicknessKeyFrame, v: System.Windows.Media.Animation.SplineThicknessKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineThicknessKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineThicknessKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ThicknessKeyFrameCollection(setProps: ThicknessKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = ThicknessKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.ThicknessKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.ThicknessKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: ThicknessKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.ThicknessKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.ThicknessKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.ThicknessKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ThicknessKeyFrameCollection, v: System.Windows.Media.Animation.ThicknessKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.ThicknessKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ThicknessKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ThumbButtonInfo(setProps: ThumbButtonInfo -> unit) as this =
  inherit Freezable()

  static let _DefDescription = System.Windows.Shell.ThumbButtonInfo.DescriptionProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefDismissWhenClicked = System.Windows.Shell.ThumbButtonInfo.DismissWhenClickedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefImageSource = System.Windows.Shell.ThumbButtonInfo.ImageSourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ImageSource
  static let _DefIsBackgroundVisible = System.Windows.Shell.ThumbButtonInfo.IsBackgroundVisibleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsEnabled = System.Windows.Shell.ThumbButtonInfo.IsEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsInteractive = System.Windows.Shell.ThumbButtonInfo.IsInteractiveProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVisibility = System.Windows.Shell.ThumbButtonInfo.VisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Visibility

  do setProps this

  new() = ThumbButtonInfo(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shell.ThumbButtonInfo voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shell.ThumbButtonInfo voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Description: string voption
  member this.Description with set x = this._Description <- ValueSome x

  [<DefaultValue>] val mutable private _DismissWhenClicked: bool voption
  member this.DismissWhenClicked with set x = this._DismissWhenClicked <- ValueSome x

  [<DefaultValue>] val mutable private _ImageSource: ImageSource voption
  member this.ImageSource with set x = this._ImageSource <- ValueSome x

  [<DefaultValue>] val mutable private _IsBackgroundVisible: bool voption
  member this.IsBackgroundVisible with set x = this._IsBackgroundVisible <- ValueSome x

  [<DefaultValue>] val mutable private _IsEnabled: bool voption
  member this.IsEnabled with set x = this._IsEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsInteractive: bool voption
  member this.IsInteractive with set x = this._IsInteractive <- ValueSome x

  [<DefaultValue>] val mutable private _Visibility: System.Windows.Visibility voption
  member this.Visibility with set x = this._Visibility <- ValueSome x

  [<DefaultValue>] val mutable private _Click: EventHandlerWrapper<System.EventArgs> voption
  member this.Click with set x = this._Click <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shell.ThumbButtonInfo> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shell.ThumbButtonInfo) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Description |> ValueOption.iter (fun x -> v.Description <- x)
    this._DismissWhenClicked |> ValueOption.iter (fun x -> v.DismissWhenClicked <- x)
    this._ImageSource |> ValueOption.iter (fun x -> v.ImageSource <- x.RenderNew () :?> System.Windows.Media.ImageSource)
    this._IsBackgroundVisible |> ValueOption.iter (fun x -> v.IsBackgroundVisible <- x)
    this._IsEnabled |> ValueOption.iter (fun x -> v.IsEnabled <- x)
    this._IsInteractive |> ValueOption.iter (fun x -> v.IsInteractive <- x)
    this._Visibility |> ValueOption.iter (fun x -> v.Visibility <- x)
    this._Click |> ValueOption.iter (fun x -> x.Subscription <- v.Click.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ThumbButtonInfo, v: System.Windows.Shell.ThumbButtonInfo) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDescription prev._Description this._Description id (fun x -> v.Description <- x)
    updateValue _DefDismissWhenClicked prev._DismissWhenClicked this._DismissWhenClicked id (fun x -> v.DismissWhenClicked <- x)
    updateValue _DefImageSource prev._ImageSource this._ImageSource id (fun x -> v.ImageSource <- x)
    updateValue _DefIsBackgroundVisible prev._IsBackgroundVisible this._IsBackgroundVisible id (fun x -> v.IsBackgroundVisible <- x)
    updateValue _DefIsEnabled prev._IsEnabled this._IsEnabled id (fun x -> v.IsEnabled <- x)
    updateValue _DefIsInteractive prev._IsInteractive this._IsInteractive id (fun x -> v.IsInteractive <- x)
    updateValue _DefVisibility prev._Visibility this._Visibility id (fun x -> v.Visibility <- x)
    updateFn prev._Click this._Click v.Click
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shell.ThumbButtonInfo())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ThumbButtonInfo as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Vector3DCollection(setProps: Vector3DCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Vector3DCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Vector3DCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Vector3DCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: System.Windows.Media.Media3D.Vector3D list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Vector3DCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Vector3DCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (v.Add >> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Vector3DCollection, v: System.Windows.Media.Media3D.Vector3DCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Vector3DCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Vector3DCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Vector3DKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.Vector3DKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.Vector3DKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Vector3D

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Media.Media3D.Vector3D voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Vector3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Vector3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Vector3DKeyFrame, v: System.Windows.Media.Animation.Vector3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteVector3DKeyFrame(setProps: DiscreteVector3DKeyFrame -> unit) as this =
  inherit Vector3DKeyFrame()


  do setProps this

  new() = DiscreteVector3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteVector3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteVector3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteVector3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteVector3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteVector3DKeyFrame, v: System.Windows.Media.Animation.DiscreteVector3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteVector3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteVector3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingVector3DKeyFrame(setProps: EasingVector3DKeyFrame -> unit) as this =
  inherit Vector3DKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingVector3DKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingVector3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingVector3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingVector3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingVector3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingVector3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingVector3DKeyFrame, v: System.Windows.Media.Animation.EasingVector3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingVector3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingVector3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearVector3DKeyFrame(setProps: LinearVector3DKeyFrame -> unit) as this =
  inherit Vector3DKeyFrame()


  do setProps this

  new() = LinearVector3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearVector3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearVector3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearVector3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearVector3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearVector3DKeyFrame, v: System.Windows.Media.Animation.LinearVector3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearVector3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearVector3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineVector3DKeyFrame(setProps: SplineVector3DKeyFrame -> unit) as this =
  inherit Vector3DKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineVector3DKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineVector3DKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineVector3DKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineVector3DKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineVector3DKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineVector3DKeyFrame, v: System.Windows.Media.Animation.SplineVector3DKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineVector3DKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineVector3DKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Vector3DKeyFrameCollection(setProps: Vector3DKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = Vector3DKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.Vector3DKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.Vector3DKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: Vector3DKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.Vector3DKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.Vector3DKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.Vector3DKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Vector3DKeyFrameCollection, v: System.Windows.Media.Animation.Vector3DKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.Vector3DKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Vector3DKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VectorCollection(setProps: VectorCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = VectorCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.VectorCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.VectorCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: System.Windows.Vector list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.VectorCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.VectorCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (v.Add >> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VectorCollection, v: System.Windows.Media.VectorCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.VectorCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VectorCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type VectorKeyFrame() =
  inherit Freezable()

  static let _DefKeyTime = System.Windows.Media.Animation.VectorKeyFrame.KeyTimeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeyTime
  static let _DefValue = System.Windows.Media.Animation.VectorKeyFrame.ValueProperty.DefaultMetadata.DefaultValue :?> System.Windows.Vector

  [<DefaultValue>] val mutable private _KeyTime: System.Windows.Media.Animation.KeyTime voption
  member this.KeyTime with set x = this._KeyTime <- ValueSome x

  [<DefaultValue>] val mutable private _Value: System.Windows.Vector voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.VectorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.VectorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeyTime |> ValueOption.iter (fun x -> v.KeyTime <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VectorKeyFrame, v: System.Windows.Media.Animation.VectorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeyTime prev._KeyTime this._KeyTime id (fun x -> v.KeyTime <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    this.SilenceEvents <- false


type DiscreteVectorKeyFrame(setProps: DiscreteVectorKeyFrame -> unit) as this =
  inherit VectorKeyFrame()


  do setProps this

  new() = DiscreteVectorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.DiscreteVectorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.DiscreteVectorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.DiscreteVectorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.DiscreteVectorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DiscreteVectorKeyFrame, v: System.Windows.Media.Animation.DiscreteVectorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.DiscreteVectorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DiscreteVectorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type EasingVectorKeyFrame(setProps: EasingVectorKeyFrame -> unit) as this =
  inherit VectorKeyFrame()

  static let _DefEasingFunction = System.Windows.Media.Animation.EasingVectorKeyFrame.EasingFunctionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.IEasingFunction

  do setProps this

  new() = EasingVectorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.EasingVectorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.EasingVectorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _EasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.EasingFunction with set x = this._EasingFunction <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.EasingVectorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.EasingVectorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._EasingFunction |> ValueOption.iter (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: EasingVectorKeyFrame, v: System.Windows.Media.Animation.EasingVectorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefEasingFunction prev._EasingFunction this._EasingFunction id (fun x -> v.EasingFunction <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.EasingVectorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? EasingVectorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type LinearVectorKeyFrame(setProps: LinearVectorKeyFrame -> unit) as this =
  inherit VectorKeyFrame()


  do setProps this

  new() = LinearVectorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.LinearVectorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.LinearVectorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.LinearVectorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.LinearVectorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: LinearVectorKeyFrame, v: System.Windows.Media.Animation.LinearVectorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.LinearVectorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? LinearVectorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SplineVectorKeyFrame(setProps: SplineVectorKeyFrame -> unit) as this =
  inherit VectorKeyFrame()

  static let _DefKeySpline = System.Windows.Media.Animation.SplineVectorKeyFrame.KeySplineProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Animation.KeySpline

  do setProps this

  new() = SplineVectorKeyFrame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.SplineVectorKeyFrame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.SplineVectorKeyFrame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _KeySpline: KeySpline voption
  member this.KeySpline with set x = this._KeySpline <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.SplineVectorKeyFrame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.SplineVectorKeyFrame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._KeySpline |> ValueOption.iter (fun x -> v.KeySpline <- x.RenderNew () :?> System.Windows.Media.Animation.KeySpline)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SplineVectorKeyFrame, v: System.Windows.Media.Animation.SplineVectorKeyFrame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefKeySpline prev._KeySpline this._KeySpline id (fun x -> v.KeySpline <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.SplineVectorKeyFrame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SplineVectorKeyFrame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VectorKeyFrameCollection(setProps: VectorKeyFrameCollection -> unit) as this =
  inherit Freezable()


  do setProps this

  new() = VectorKeyFrameCollection(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Animation.VectorKeyFrameCollection voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Animation.VectorKeyFrameCollection voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Items: VectorKeyFrame list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Animation.VectorKeyFrameCollection> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Animation.VectorKeyFrameCollection) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Animation.VectorKeyFrame |> v.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VectorKeyFrameCollection, v: System.Windows.Media.Animation.VectorKeyFrameCollection) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Items this._Items v
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Animation.VectorKeyFrameCollection())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VectorKeyFrameCollection as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type WindowChrome(setProps: WindowChrome -> unit) as this =
  inherit Freezable()

  static let _DefCaptionHeight = System.Windows.Shell.WindowChrome.CaptionHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefCornerRadius = System.Windows.Shell.WindowChrome.CornerRadiusProperty.DefaultMetadata.DefaultValue :?> System.Windows.CornerRadius
  static let _DefGlassFrameThickness = System.Windows.Shell.WindowChrome.GlassFrameThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefNonClientFrameEdges = System.Windows.Shell.WindowChrome.NonClientFrameEdgesProperty.DefaultMetadata.DefaultValue :?> System.Windows.Shell.NonClientFrameEdges
  static let _DefResizeBorderThickness = System.Windows.Shell.WindowChrome.ResizeBorderThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefUseAeroCaptionButtons = System.Windows.Shell.WindowChrome.UseAeroCaptionButtonsProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = WindowChrome(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shell.WindowChrome voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shell.WindowChrome voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CaptionHeight: float voption
  member this.CaptionHeight with set x = this._CaptionHeight <- ValueSome x

  [<DefaultValue>] val mutable private _CornerRadius: System.Windows.CornerRadius voption
  member this.CornerRadius with set x = this._CornerRadius <- ValueSome x

  [<DefaultValue>] val mutable private _GlassFrameThickness: System.Windows.Thickness voption
  member this.GlassFrameThickness with set x = this._GlassFrameThickness <- ValueSome x

  [<DefaultValue>] val mutable private _NonClientFrameEdges: System.Windows.Shell.NonClientFrameEdges voption
  member this.NonClientFrameEdges with set x = this._NonClientFrameEdges <- ValueSome x

  [<DefaultValue>] val mutable private _ResizeBorderThickness: System.Windows.Thickness voption
  member this.ResizeBorderThickness with set x = this._ResizeBorderThickness <- ValueSome x

  [<DefaultValue>] val mutable private _UseAeroCaptionButtons: bool voption
  member this.UseAeroCaptionButtons with set x = this._UseAeroCaptionButtons <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shell.WindowChrome> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shell.WindowChrome) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CaptionHeight |> ValueOption.iter (fun x -> v.CaptionHeight <- x)
    this._CornerRadius |> ValueOption.iter (fun x -> v.CornerRadius <- x)
    this._GlassFrameThickness |> ValueOption.iter (fun x -> v.GlassFrameThickness <- x)
    this._NonClientFrameEdges |> ValueOption.iter (fun x -> v.NonClientFrameEdges <- x)
    this._ResizeBorderThickness |> ValueOption.iter (fun x -> v.ResizeBorderThickness <- x)
    this._UseAeroCaptionButtons |> ValueOption.iter (fun x -> v.UseAeroCaptionButtons <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: WindowChrome, v: System.Windows.Shell.WindowChrome) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCaptionHeight prev._CaptionHeight this._CaptionHeight id (fun x -> v.CaptionHeight <- x)
    updateValue _DefCornerRadius prev._CornerRadius this._CornerRadius id (fun x -> v.CornerRadius <- x)
    updateValue _DefGlassFrameThickness prev._GlassFrameThickness this._GlassFrameThickness id (fun x -> v.GlassFrameThickness <- x)
    updateValue _DefNonClientFrameEdges prev._NonClientFrameEdges this._NonClientFrameEdges id (fun x -> v.NonClientFrameEdges <- x)
    updateValue _DefResizeBorderThickness prev._ResizeBorderThickness this._ResizeBorderThickness id (fun x -> v.ResizeBorderThickness <- x)
    updateValue _DefUseAeroCaptionButtons prev._UseAeroCaptionButtons this._UseAeroCaptionButtons id (fun x -> v.UseAeroCaptionButtons <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shell.WindowChrome())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? WindowChrome as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Visual() =
  inherit DependencyObject()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Visual> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Visual) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Visual, v: System.Windows.Media.Visual) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type ContainerVisual(setProps: ContainerVisual -> unit) as this =
  inherit Visual()


  do setProps this

  new() = ContainerVisual(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.ContainerVisual voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.ContainerVisual voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CacheMode: CacheMode voption
  member this.CacheMode with set x = this._CacheMode <- ValueSome x

  [<DefaultValue>] val mutable private _Clip: Geometry voption
  member this.Clip with set x = this._Clip <- ValueSome x

  [<DefaultValue>] val mutable private _Effect: Effect voption
  member this.Effect with set x = this._Effect <- ValueSome x

  [<DefaultValue>] val mutable private _Offset: System.Windows.Vector voption
  member this.Offset with set x = this._Offset <- ValueSome x

  [<DefaultValue>] val mutable private _Opacity: float voption
  member this.Opacity with set x = this._Opacity <- ValueSome x

  [<DefaultValue>] val mutable private _OpacityMask: Brush voption
  member this.OpacityMask with set x = this._OpacityMask <- ValueSome x

  [<DefaultValue>] val mutable private _Transform: Transform voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable private _XSnappingGuidelines: DoubleCollection voption
  member this.XSnappingGuidelines with set x = this._XSnappingGuidelines <- ValueSome x

  [<DefaultValue>] val mutable private _YSnappingGuidelines: DoubleCollection voption
  member this.YSnappingGuidelines with set x = this._YSnappingGuidelines <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.ContainerVisual> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.ContainerVisual) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CacheMode |> ValueOption.iter (fun x -> v.CacheMode <- x.RenderNew () :?> System.Windows.Media.CacheMode)
    this._Clip |> ValueOption.iter (fun x -> v.Clip <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._Effect |> ValueOption.iter (fun x -> v.Effect <- x.RenderNew () :?> System.Windows.Media.Effects.Effect)
    this._Offset |> ValueOption.iter (fun x -> v.Offset <- x)
    this._Opacity |> ValueOption.iter (fun x -> v.Opacity <- x)
    this._OpacityMask |> ValueOption.iter (fun x -> v.OpacityMask <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this._XSnappingGuidelines |> ValueOption.iter (fun x -> v.XSnappingGuidelines <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this._YSnappingGuidelines |> ValueOption.iter (fun x -> v.YSnappingGuidelines <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ContainerVisual, v: System.Windows.Media.ContainerVisual) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Media.CacheMode> prev._CacheMode this._CacheMode id (fun x -> v.CacheMode <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Geometry> prev._Clip this._Clip id (fun x -> v.Clip <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Effects.Effect> prev._Effect this._Effect id (fun x -> v.Effect <- x)
    updateValue Unchecked.defaultof<System.Windows.Vector> prev._Offset this._Offset id (fun x -> v.Offset <- x)
    updateValue Unchecked.defaultof<float> prev._Opacity this._Opacity id (fun x -> v.Opacity <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Brush> prev._OpacityMask this._OpacityMask id (fun x -> v.OpacityMask <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Transform> prev._Transform this._Transform id (fun x -> v.Transform <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.DoubleCollection> prev._XSnappingGuidelines this._XSnappingGuidelines id (fun x -> v.XSnappingGuidelines <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.DoubleCollection> prev._YSnappingGuidelines this._YSnappingGuidelines id (fun x -> v.YSnappingGuidelines <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.ContainerVisual())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ContainerVisual as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DrawingVisual(setProps: DrawingVisual -> unit) as this =
  inherit ContainerVisual()


  do setProps this

  new() = DrawingVisual(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.DrawingVisual voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.DrawingVisual voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.DrawingVisual> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.DrawingVisual) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DrawingVisual, v: System.Windows.Media.DrawingVisual) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.DrawingVisual())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DrawingVisual as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type UIElement(setProps: UIElement -> unit) as this =
  inherit Visual()

  static let _DefAllowDrop = System.Windows.UIElement.AllowDropProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefCacheMode = System.Windows.UIElement.CacheModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.CacheMode
  static let _DefClip = System.Windows.UIElement.ClipProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Geometry
  static let _DefClipToBounds = System.Windows.UIElement.ClipToBoundsProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefEffect = System.Windows.UIElement.EffectProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Effects.Effect
  static let _DefFocusable = System.Windows.UIElement.FocusableProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsEnabled = System.Windows.UIElement.IsEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsHitTestVisible = System.Windows.UIElement.IsHitTestVisibleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsManipulationEnabled = System.Windows.UIElement.IsManipulationEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefOpacity = System.Windows.UIElement.OpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOpacityMask = System.Windows.UIElement.OpacityMaskProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefRenderTransform = System.Windows.UIElement.RenderTransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform
  static let _DefRenderTransformOrigin = System.Windows.UIElement.RenderTransformOriginProperty.DefaultMetadata.DefaultValue :?> System.Windows.Point
  static let _DefSnapsToDevicePixels = System.Windows.UIElement.SnapsToDevicePixelsProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVisibility = System.Windows.UIElement.VisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Visibility

  do setProps this

  new() = UIElement(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.UIElement voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.UIElement voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AllowDrop: bool voption
  member this.AllowDrop with set x = this._AllowDrop <- ValueSome x

  [<DefaultValue>] val mutable private _CacheMode: CacheMode voption
  member this.CacheMode with set x = this._CacheMode <- ValueSome x

  [<DefaultValue>] val mutable private _Clip: Geometry voption
  member this.Clip with set x = this._Clip <- ValueSome x

  [<DefaultValue>] val mutable private _ClipToBounds: bool voption
  member this.ClipToBounds with set x = this._ClipToBounds <- ValueSome x

  [<DefaultValue>] val mutable private _Effect: Effect voption
  member this.Effect with set x = this._Effect <- ValueSome x

  [<DefaultValue>] val mutable private _Focusable: bool voption
  member this.Focusable with set x = this._Focusable <- ValueSome x

  [<DefaultValue>] val mutable private _IsEnabled: bool voption
  member this.IsEnabled with set x = this._IsEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsHitTestVisible: bool voption
  member this.IsHitTestVisible with set x = this._IsHitTestVisible <- ValueSome x

  [<DefaultValue>] val mutable private _IsManipulationEnabled: bool voption
  member this.IsManipulationEnabled with set x = this._IsManipulationEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _Opacity: float voption
  member this.Opacity with set x = this._Opacity <- ValueSome x

  [<DefaultValue>] val mutable private _OpacityMask: Brush voption
  member this.OpacityMask with set x = this._OpacityMask <- ValueSome x

  [<DefaultValue>] val mutable private _RenderSize: System.Windows.Size voption
  member this.RenderSize with set x = this._RenderSize <- ValueSome x

  [<DefaultValue>] val mutable private _RenderTransform: Transform voption
  member this.RenderTransform with set x = this._RenderTransform <- ValueSome x

  [<DefaultValue>] val mutable private _RenderTransformOrigin: System.Windows.Point voption
  member this.RenderTransformOrigin with set x = this._RenderTransformOrigin <- ValueSome x

  [<DefaultValue>] val mutable private _SnapsToDevicePixels: bool voption
  member this.SnapsToDevicePixels with set x = this._SnapsToDevicePixels <- ValueSome x

  [<DefaultValue>] val mutable private _Visibility: System.Windows.Visibility voption
  member this.Visibility with set x = this._Visibility <- ValueSome x

  [<DefaultValue>] val mutable private _DragEnter: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragEnter with set x = this._DragEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragLeave: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragLeave with set x = this._DragLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragOver: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragOver with set x = this._DragOver <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Drop: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.Drop with set x = this._Drop <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _FocusableChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.FocusableChanged with set x = this._FocusableChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GiveFeedback: EventHandlerWrapper<System.Windows.GiveFeedbackEventArgs> voption
  member this.GiveFeedback with set x = this._GiveFeedback <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotFocus: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.GotFocus with set x = this._GotFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.GotKeyboardFocus with set x = this._GotKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotMouseCapture: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.GotMouseCapture with set x = this._GotMouseCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotStylusCapture: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.GotStylusCapture with set x = this._GotStylusCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotTouchCapture: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.GotTouchCapture with set x = this._GotTouchCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsEnabledChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsEnabledChanged with set x = this._IsEnabledChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsHitTestVisibleChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsHitTestVisibleChanged with set x = this._IsHitTestVisibleChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsKeyboardFocusWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsKeyboardFocusWithinChanged with set x = this._IsKeyboardFocusWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsKeyboardFocusedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsKeyboardFocusedChanged with set x = this._IsKeyboardFocusedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseCaptureWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseCaptureWithinChanged with set x = this._IsMouseCaptureWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseCapturedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseCapturedChanged with set x = this._IsMouseCapturedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseDirectlyOverChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseDirectlyOverChanged with set x = this._IsMouseDirectlyOverChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusCaptureWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusCaptureWithinChanged with set x = this._IsStylusCaptureWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusCapturedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusCapturedChanged with set x = this._IsStylusCapturedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusDirectlyOverChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusDirectlyOverChanged with set x = this._IsStylusDirectlyOverChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsVisibleChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsVisibleChanged with set x = this._IsVisibleChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _KeyDown: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.KeyDown with set x = this._KeyDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _KeyUp: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.KeyUp with set x = this._KeyUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LayoutUpdated: EventHandlerWrapper<System.EventArgs> voption
  member this.LayoutUpdated with set x = this._LayoutUpdated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostFocus: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.LostFocus with set x = this._LostFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.LostKeyboardFocus with set x = this._LostKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostMouseCapture: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.LostMouseCapture with set x = this._LostMouseCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostStylusCapture: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.LostStylusCapture with set x = this._LostStylusCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostTouchCapture: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.LostTouchCapture with set x = this._LostTouchCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ManipulationBoundaryFeedback: EventHandlerWrapper<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> voption
  member this.ManipulationBoundaryFeedback with set x = this._ManipulationBoundaryFeedback <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ManipulationCompleted: EventHandlerWrapper<System.Windows.Input.ManipulationCompletedEventArgs> voption
  member this.ManipulationCompleted with set x = this._ManipulationCompleted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ManipulationDelta: EventHandlerWrapper<System.Windows.Input.ManipulationDeltaEventArgs> voption
  member this.ManipulationDelta with set x = this._ManipulationDelta <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ManipulationInertiaStarting: EventHandlerWrapper<System.Windows.Input.ManipulationInertiaStartingEventArgs> voption
  member this.ManipulationInertiaStarting with set x = this._ManipulationInertiaStarting <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ManipulationStarted: EventHandlerWrapper<System.Windows.Input.ManipulationStartedEventArgs> voption
  member this.ManipulationStarted with set x = this._ManipulationStarted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ManipulationStarting: EventHandlerWrapper<System.Windows.Input.ManipulationStartingEventArgs> voption
  member this.ManipulationStarting with set x = this._ManipulationStarting <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseDown with set x = this._MouseDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseEnter: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseEnter with set x = this._MouseEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeave: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseLeave with set x = this._MouseLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeftButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseLeftButtonDown with set x = this._MouseLeftButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeftButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseLeftButtonUp with set x = this._MouseLeftButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseMove: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseMove with set x = this._MouseMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseRightButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseRightButtonDown with set x = this._MouseRightButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseRightButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseRightButtonUp with set x = this._MouseRightButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseUp with set x = this._MouseUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseWheel: EventHandlerWrapper<System.Windows.Input.MouseWheelEventArgs> voption
  member this.MouseWheel with set x = this._MouseWheel <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragEnter: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragEnter with set x = this._PreviewDragEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragLeave: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragLeave with set x = this._PreviewDragLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragOver: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragOver with set x = this._PreviewDragOver <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDrop: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDrop with set x = this._PreviewDrop <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewGiveFeedback: EventHandlerWrapper<System.Windows.GiveFeedbackEventArgs> voption
  member this.PreviewGiveFeedback with set x = this._PreviewGiveFeedback <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewGotKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.PreviewGotKeyboardFocus with set x = this._PreviewGotKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewKeyDown: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.PreviewKeyDown with set x = this._PreviewKeyDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewKeyUp: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.PreviewKeyUp with set x = this._PreviewKeyUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewLostKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.PreviewLostKeyboardFocus with set x = this._PreviewLostKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseDown with set x = this._PreviewMouseDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseLeftButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseLeftButtonDown with set x = this._PreviewMouseLeftButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseLeftButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseLeftButtonUp with set x = this._PreviewMouseLeftButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseMove: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.PreviewMouseMove with set x = this._PreviewMouseMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseRightButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseRightButtonDown with set x = this._PreviewMouseRightButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseRightButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseRightButtonUp with set x = this._PreviewMouseRightButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseUp with set x = this._PreviewMouseUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseWheel: EventHandlerWrapper<System.Windows.Input.MouseWheelEventArgs> voption
  member this.PreviewMouseWheel with set x = this._PreviewMouseWheel <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewQueryContinueDrag: EventHandlerWrapper<System.Windows.QueryContinueDragEventArgs> voption
  member this.PreviewQueryContinueDrag with set x = this._PreviewQueryContinueDrag <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusButtonDown: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.PreviewStylusButtonDown with set x = this._PreviewStylusButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusButtonUp: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.PreviewStylusButtonUp with set x = this._PreviewStylusButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusDown: EventHandlerWrapper<System.Windows.Input.StylusDownEventArgs> voption
  member this.PreviewStylusDown with set x = this._PreviewStylusDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusInAirMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusInAirMove with set x = this._PreviewStylusInAirMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusInRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusInRange with set x = this._PreviewStylusInRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusMove with set x = this._PreviewStylusMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusOutOfRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusOutOfRange with set x = this._PreviewStylusOutOfRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusSystemGesture: EventHandlerWrapper<System.Windows.Input.StylusSystemGestureEventArgs> voption
  member this.PreviewStylusSystemGesture with set x = this._PreviewStylusSystemGesture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusUp: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusUp with set x = this._PreviewStylusUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTextInput: EventHandlerWrapper<System.Windows.Input.TextCompositionEventArgs> voption
  member this.PreviewTextInput with set x = this._PreviewTextInput <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchDown: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchDown with set x = this._PreviewTouchDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchMove: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchMove with set x = this._PreviewTouchMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchUp: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchUp with set x = this._PreviewTouchUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _QueryContinueDrag: EventHandlerWrapper<System.Windows.QueryContinueDragEventArgs> voption
  member this.QueryContinueDrag with set x = this._QueryContinueDrag <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _QueryCursor: EventHandlerWrapper<System.Windows.Input.QueryCursorEventArgs> voption
  member this.QueryCursor with set x = this._QueryCursor <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusButtonDown: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.StylusButtonDown with set x = this._StylusButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusButtonUp: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.StylusButtonUp with set x = this._StylusButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusDown: EventHandlerWrapper<System.Windows.Input.StylusDownEventArgs> voption
  member this.StylusDown with set x = this._StylusDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusEnter: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusEnter with set x = this._StylusEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusInAirMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusInAirMove with set x = this._StylusInAirMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusInRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusInRange with set x = this._StylusInRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusLeave: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusLeave with set x = this._StylusLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusMove with set x = this._StylusMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusOutOfRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusOutOfRange with set x = this._StylusOutOfRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusSystemGesture: EventHandlerWrapper<System.Windows.Input.StylusSystemGestureEventArgs> voption
  member this.StylusSystemGesture with set x = this._StylusSystemGesture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusUp: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusUp with set x = this._StylusUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TextInput: EventHandlerWrapper<System.Windows.Input.TextCompositionEventArgs> voption
  member this.TextInput with set x = this._TextInput <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchDown: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchDown with set x = this._TouchDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchEnter: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchEnter with set x = this._TouchEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchLeave: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchLeave with set x = this._TouchLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchMove: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchMove with set x = this._TouchMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchUp: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchUp with set x = this._TouchUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.UIElement> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.UIElement) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AllowDrop |> ValueOption.iter (fun x -> v.AllowDrop <- x)
    this._CacheMode |> ValueOption.iter (fun x -> v.CacheMode <- x.RenderNew () :?> System.Windows.Media.CacheMode)
    this._Clip |> ValueOption.iter (fun x -> v.Clip <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._ClipToBounds |> ValueOption.iter (fun x -> v.ClipToBounds <- x)
    this._Effect |> ValueOption.iter (fun x -> v.Effect <- x.RenderNew () :?> System.Windows.Media.Effects.Effect)
    this._Focusable |> ValueOption.iter (fun x -> v.Focusable <- x)
    this._IsEnabled |> ValueOption.iter (fun x -> v.IsEnabled <- x)
    this._IsHitTestVisible |> ValueOption.iter (fun x -> v.IsHitTestVisible <- x)
    this._IsManipulationEnabled |> ValueOption.iter (fun x -> v.IsManipulationEnabled <- x)
    this._Opacity |> ValueOption.iter (fun x -> v.Opacity <- x)
    this._OpacityMask |> ValueOption.iter (fun x -> v.OpacityMask <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._RenderSize |> ValueOption.iter (fun x -> v.RenderSize <- x)
    this._RenderTransform |> ValueOption.iter (fun x -> v.RenderTransform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this._RenderTransformOrigin |> ValueOption.iter (fun x -> v.RenderTransformOrigin <- x)
    this._SnapsToDevicePixels |> ValueOption.iter (fun x -> v.SnapsToDevicePixels <- x)
    this._Visibility |> ValueOption.iter (fun x -> v.Visibility <- x)
    this._DragEnter |> ValueOption.iter (fun x -> x.Subscription <- v.DragEnter.Subscribe x.Fn)
    this._DragLeave |> ValueOption.iter (fun x -> x.Subscription <- v.DragLeave.Subscribe x.Fn)
    this._DragOver |> ValueOption.iter (fun x -> x.Subscription <- v.DragOver.Subscribe x.Fn)
    this._Drop |> ValueOption.iter (fun x -> x.Subscription <- v.Drop.Subscribe x.Fn)
    this._FocusableChanged |> ValueOption.iter (fun x -> x.Subscription <- v.FocusableChanged.Subscribe x.Fn)
    this._GiveFeedback |> ValueOption.iter (fun x -> x.Subscription <- v.GiveFeedback.Subscribe x.Fn)
    this._GotFocus |> ValueOption.iter (fun x -> x.Subscription <- v.GotFocus.Subscribe x.Fn)
    this._GotKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.GotKeyboardFocus.Subscribe x.Fn)
    this._GotMouseCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotMouseCapture.Subscribe x.Fn)
    this._GotStylusCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotStylusCapture.Subscribe x.Fn)
    this._GotTouchCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotTouchCapture.Subscribe x.Fn)
    this._IsEnabledChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsEnabledChanged.Subscribe x.Fn)
    this._IsHitTestVisibleChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsHitTestVisibleChanged.Subscribe x.Fn)
    this._IsKeyboardFocusWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsKeyboardFocusWithinChanged.Subscribe x.Fn)
    this._IsKeyboardFocusedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsKeyboardFocusedChanged.Subscribe x.Fn)
    this._IsMouseCaptureWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseCaptureWithinChanged.Subscribe x.Fn)
    this._IsMouseCapturedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseCapturedChanged.Subscribe x.Fn)
    this._IsMouseDirectlyOverChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseDirectlyOverChanged.Subscribe x.Fn)
    this._IsStylusCaptureWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusCaptureWithinChanged.Subscribe x.Fn)
    this._IsStylusCapturedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusCapturedChanged.Subscribe x.Fn)
    this._IsStylusDirectlyOverChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusDirectlyOverChanged.Subscribe x.Fn)
    this._IsVisibleChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsVisibleChanged.Subscribe x.Fn)
    this._KeyDown |> ValueOption.iter (fun x -> x.Subscription <- v.KeyDown.Subscribe x.Fn)
    this._KeyUp |> ValueOption.iter (fun x -> x.Subscription <- v.KeyUp.Subscribe x.Fn)
    this._LayoutUpdated |> ValueOption.iter (fun x -> x.Subscription <- v.LayoutUpdated.Subscribe x.Fn)
    this._LostFocus |> ValueOption.iter (fun x -> x.Subscription <- v.LostFocus.Subscribe x.Fn)
    this._LostKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.LostKeyboardFocus.Subscribe x.Fn)
    this._LostMouseCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostMouseCapture.Subscribe x.Fn)
    this._LostStylusCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostStylusCapture.Subscribe x.Fn)
    this._LostTouchCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostTouchCapture.Subscribe x.Fn)
    this._ManipulationBoundaryFeedback |> ValueOption.iter (fun x -> x.Subscription <- v.ManipulationBoundaryFeedback.Subscribe x.Fn)
    this._ManipulationCompleted |> ValueOption.iter (fun x -> x.Subscription <- v.ManipulationCompleted.Subscribe x.Fn)
    this._ManipulationDelta |> ValueOption.iter (fun x -> x.Subscription <- v.ManipulationDelta.Subscribe x.Fn)
    this._ManipulationInertiaStarting |> ValueOption.iter (fun x -> x.Subscription <- v.ManipulationInertiaStarting.Subscribe x.Fn)
    this._ManipulationStarted |> ValueOption.iter (fun x -> x.Subscription <- v.ManipulationStarted.Subscribe x.Fn)
    this._ManipulationStarting |> ValueOption.iter (fun x -> x.Subscription <- v.ManipulationStarting.Subscribe x.Fn)
    this._MouseDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseDown.Subscribe x.Fn)
    this._MouseEnter |> ValueOption.iter (fun x -> x.Subscription <- v.MouseEnter.Subscribe x.Fn)
    this._MouseLeave |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeave.Subscribe x.Fn)
    this._MouseLeftButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeftButtonDown.Subscribe x.Fn)
    this._MouseLeftButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeftButtonUp.Subscribe x.Fn)
    this._MouseMove |> ValueOption.iter (fun x -> x.Subscription <- v.MouseMove.Subscribe x.Fn)
    this._MouseRightButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseRightButtonDown.Subscribe x.Fn)
    this._MouseRightButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseRightButtonUp.Subscribe x.Fn)
    this._MouseUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseUp.Subscribe x.Fn)
    this._MouseWheel |> ValueOption.iter (fun x -> x.Subscription <- v.MouseWheel.Subscribe x.Fn)
    this._PreviewDragEnter |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragEnter.Subscribe x.Fn)
    this._PreviewDragLeave |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragLeave.Subscribe x.Fn)
    this._PreviewDragOver |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragOver.Subscribe x.Fn)
    this._PreviewDrop |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDrop.Subscribe x.Fn)
    this._PreviewGiveFeedback |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewGiveFeedback.Subscribe x.Fn)
    this._PreviewGotKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewGotKeyboardFocus.Subscribe x.Fn)
    this._PreviewKeyDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewKeyDown.Subscribe x.Fn)
    this._PreviewKeyUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewKeyUp.Subscribe x.Fn)
    this._PreviewLostKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewLostKeyboardFocus.Subscribe x.Fn)
    this._PreviewMouseDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseDown.Subscribe x.Fn)
    this._PreviewMouseLeftButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseLeftButtonDown.Subscribe x.Fn)
    this._PreviewMouseLeftButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseLeftButtonUp.Subscribe x.Fn)
    this._PreviewMouseMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseMove.Subscribe x.Fn)
    this._PreviewMouseRightButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseRightButtonDown.Subscribe x.Fn)
    this._PreviewMouseRightButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseRightButtonUp.Subscribe x.Fn)
    this._PreviewMouseUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseUp.Subscribe x.Fn)
    this._PreviewMouseWheel |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseWheel.Subscribe x.Fn)
    this._PreviewQueryContinueDrag |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewQueryContinueDrag.Subscribe x.Fn)
    this._PreviewStylusButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusButtonDown.Subscribe x.Fn)
    this._PreviewStylusButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusButtonUp.Subscribe x.Fn)
    this._PreviewStylusDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusDown.Subscribe x.Fn)
    this._PreviewStylusInAirMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusInAirMove.Subscribe x.Fn)
    this._PreviewStylusInRange |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusInRange.Subscribe x.Fn)
    this._PreviewStylusMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusMove.Subscribe x.Fn)
    this._PreviewStylusOutOfRange |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusOutOfRange.Subscribe x.Fn)
    this._PreviewStylusSystemGesture |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusSystemGesture.Subscribe x.Fn)
    this._PreviewStylusUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusUp.Subscribe x.Fn)
    this._PreviewTextInput |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTextInput.Subscribe x.Fn)
    this._PreviewTouchDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchDown.Subscribe x.Fn)
    this._PreviewTouchMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchMove.Subscribe x.Fn)
    this._PreviewTouchUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchUp.Subscribe x.Fn)
    this._QueryContinueDrag |> ValueOption.iter (fun x -> x.Subscription <- v.QueryContinueDrag.Subscribe x.Fn)
    this._QueryCursor |> ValueOption.iter (fun x -> x.Subscription <- v.QueryCursor.Subscribe x.Fn)
    this._StylusButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.StylusButtonDown.Subscribe x.Fn)
    this._StylusButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.StylusButtonUp.Subscribe x.Fn)
    this._StylusDown |> ValueOption.iter (fun x -> x.Subscription <- v.StylusDown.Subscribe x.Fn)
    this._StylusEnter |> ValueOption.iter (fun x -> x.Subscription <- v.StylusEnter.Subscribe x.Fn)
    this._StylusInAirMove |> ValueOption.iter (fun x -> x.Subscription <- v.StylusInAirMove.Subscribe x.Fn)
    this._StylusInRange |> ValueOption.iter (fun x -> x.Subscription <- v.StylusInRange.Subscribe x.Fn)
    this._StylusLeave |> ValueOption.iter (fun x -> x.Subscription <- v.StylusLeave.Subscribe x.Fn)
    this._StylusMove |> ValueOption.iter (fun x -> x.Subscription <- v.StylusMove.Subscribe x.Fn)
    this._StylusOutOfRange |> ValueOption.iter (fun x -> x.Subscription <- v.StylusOutOfRange.Subscribe x.Fn)
    this._StylusSystemGesture |> ValueOption.iter (fun x -> x.Subscription <- v.StylusSystemGesture.Subscribe x.Fn)
    this._StylusUp |> ValueOption.iter (fun x -> x.Subscription <- v.StylusUp.Subscribe x.Fn)
    this._TextInput |> ValueOption.iter (fun x -> x.Subscription <- v.TextInput.Subscribe x.Fn)
    this._TouchDown |> ValueOption.iter (fun x -> x.Subscription <- v.TouchDown.Subscribe x.Fn)
    this._TouchEnter |> ValueOption.iter (fun x -> x.Subscription <- v.TouchEnter.Subscribe x.Fn)
    this._TouchLeave |> ValueOption.iter (fun x -> x.Subscription <- v.TouchLeave.Subscribe x.Fn)
    this._TouchMove |> ValueOption.iter (fun x -> x.Subscription <- v.TouchMove.Subscribe x.Fn)
    this._TouchUp |> ValueOption.iter (fun x -> x.Subscription <- v.TouchUp.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: UIElement, v: System.Windows.UIElement) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAllowDrop prev._AllowDrop this._AllowDrop id (fun x -> v.AllowDrop <- x)
    updateValue _DefCacheMode prev._CacheMode this._CacheMode id (fun x -> v.CacheMode <- x)
    updateValue _DefClip prev._Clip this._Clip id (fun x -> v.Clip <- x)
    updateValue _DefClipToBounds prev._ClipToBounds this._ClipToBounds id (fun x -> v.ClipToBounds <- x)
    updateValue _DefEffect prev._Effect this._Effect id (fun x -> v.Effect <- x)
    updateValue _DefFocusable prev._Focusable this._Focusable id (fun x -> v.Focusable <- x)
    updateValue _DefIsEnabled prev._IsEnabled this._IsEnabled id (fun x -> v.IsEnabled <- x)
    updateValue _DefIsHitTestVisible prev._IsHitTestVisible this._IsHitTestVisible id (fun x -> v.IsHitTestVisible <- x)
    updateValue _DefIsManipulationEnabled prev._IsManipulationEnabled this._IsManipulationEnabled id (fun x -> v.IsManipulationEnabled <- x)
    updateValue _DefOpacity prev._Opacity this._Opacity id (fun x -> v.Opacity <- x)
    updateValue _DefOpacityMask prev._OpacityMask this._OpacityMask id (fun x -> v.OpacityMask <- x)
    updateValue Unchecked.defaultof<System.Windows.Size> prev._RenderSize this._RenderSize id (fun x -> v.RenderSize <- x)
    updateValue _DefRenderTransform prev._RenderTransform this._RenderTransform id (fun x -> v.RenderTransform <- x)
    updateValue _DefRenderTransformOrigin prev._RenderTransformOrigin this._RenderTransformOrigin id (fun x -> v.RenderTransformOrigin <- x)
    updateValue _DefSnapsToDevicePixels prev._SnapsToDevicePixels this._SnapsToDevicePixels id (fun x -> v.SnapsToDevicePixels <- x)
    updateValue _DefVisibility prev._Visibility this._Visibility id (fun x -> v.Visibility <- x)
    updateFn prev._DragEnter this._DragEnter v.DragEnter
    updateFn prev._DragLeave this._DragLeave v.DragLeave
    updateFn prev._DragOver this._DragOver v.DragOver
    updateFn prev._Drop this._Drop v.Drop
    updateFn prev._FocusableChanged this._FocusableChanged v.FocusableChanged
    updateFn prev._GiveFeedback this._GiveFeedback v.GiveFeedback
    updateFn prev._GotFocus this._GotFocus v.GotFocus
    updateFn prev._GotKeyboardFocus this._GotKeyboardFocus v.GotKeyboardFocus
    updateFn prev._GotMouseCapture this._GotMouseCapture v.GotMouseCapture
    updateFn prev._GotStylusCapture this._GotStylusCapture v.GotStylusCapture
    updateFn prev._GotTouchCapture this._GotTouchCapture v.GotTouchCapture
    updateFn prev._IsEnabledChanged this._IsEnabledChanged v.IsEnabledChanged
    updateFn prev._IsHitTestVisibleChanged this._IsHitTestVisibleChanged v.IsHitTestVisibleChanged
    updateFn prev._IsKeyboardFocusWithinChanged this._IsKeyboardFocusWithinChanged v.IsKeyboardFocusWithinChanged
    updateFn prev._IsKeyboardFocusedChanged this._IsKeyboardFocusedChanged v.IsKeyboardFocusedChanged
    updateFn prev._IsMouseCaptureWithinChanged this._IsMouseCaptureWithinChanged v.IsMouseCaptureWithinChanged
    updateFn prev._IsMouseCapturedChanged this._IsMouseCapturedChanged v.IsMouseCapturedChanged
    updateFn prev._IsMouseDirectlyOverChanged this._IsMouseDirectlyOverChanged v.IsMouseDirectlyOverChanged
    updateFn prev._IsStylusCaptureWithinChanged this._IsStylusCaptureWithinChanged v.IsStylusCaptureWithinChanged
    updateFn prev._IsStylusCapturedChanged this._IsStylusCapturedChanged v.IsStylusCapturedChanged
    updateFn prev._IsStylusDirectlyOverChanged this._IsStylusDirectlyOverChanged v.IsStylusDirectlyOverChanged
    updateFn prev._IsVisibleChanged this._IsVisibleChanged v.IsVisibleChanged
    updateFn prev._KeyDown this._KeyDown v.KeyDown
    updateFn prev._KeyUp this._KeyUp v.KeyUp
    updateFn prev._LayoutUpdated this._LayoutUpdated v.LayoutUpdated
    updateFn prev._LostFocus this._LostFocus v.LostFocus
    updateFn prev._LostKeyboardFocus this._LostKeyboardFocus v.LostKeyboardFocus
    updateFn prev._LostMouseCapture this._LostMouseCapture v.LostMouseCapture
    updateFn prev._LostStylusCapture this._LostStylusCapture v.LostStylusCapture
    updateFn prev._LostTouchCapture this._LostTouchCapture v.LostTouchCapture
    updateFn prev._ManipulationBoundaryFeedback this._ManipulationBoundaryFeedback v.ManipulationBoundaryFeedback
    updateFn prev._ManipulationCompleted this._ManipulationCompleted v.ManipulationCompleted
    updateFn prev._ManipulationDelta this._ManipulationDelta v.ManipulationDelta
    updateFn prev._ManipulationInertiaStarting this._ManipulationInertiaStarting v.ManipulationInertiaStarting
    updateFn prev._ManipulationStarted this._ManipulationStarted v.ManipulationStarted
    updateFn prev._ManipulationStarting this._ManipulationStarting v.ManipulationStarting
    updateFn prev._MouseDown this._MouseDown v.MouseDown
    updateFn prev._MouseEnter this._MouseEnter v.MouseEnter
    updateFn prev._MouseLeave this._MouseLeave v.MouseLeave
    updateFn prev._MouseLeftButtonDown this._MouseLeftButtonDown v.MouseLeftButtonDown
    updateFn prev._MouseLeftButtonUp this._MouseLeftButtonUp v.MouseLeftButtonUp
    updateFn prev._MouseMove this._MouseMove v.MouseMove
    updateFn prev._MouseRightButtonDown this._MouseRightButtonDown v.MouseRightButtonDown
    updateFn prev._MouseRightButtonUp this._MouseRightButtonUp v.MouseRightButtonUp
    updateFn prev._MouseUp this._MouseUp v.MouseUp
    updateFn prev._MouseWheel this._MouseWheel v.MouseWheel
    updateFn prev._PreviewDragEnter this._PreviewDragEnter v.PreviewDragEnter
    updateFn prev._PreviewDragLeave this._PreviewDragLeave v.PreviewDragLeave
    updateFn prev._PreviewDragOver this._PreviewDragOver v.PreviewDragOver
    updateFn prev._PreviewDrop this._PreviewDrop v.PreviewDrop
    updateFn prev._PreviewGiveFeedback this._PreviewGiveFeedback v.PreviewGiveFeedback
    updateFn prev._PreviewGotKeyboardFocus this._PreviewGotKeyboardFocus v.PreviewGotKeyboardFocus
    updateFn prev._PreviewKeyDown this._PreviewKeyDown v.PreviewKeyDown
    updateFn prev._PreviewKeyUp this._PreviewKeyUp v.PreviewKeyUp
    updateFn prev._PreviewLostKeyboardFocus this._PreviewLostKeyboardFocus v.PreviewLostKeyboardFocus
    updateFn prev._PreviewMouseDown this._PreviewMouseDown v.PreviewMouseDown
    updateFn prev._PreviewMouseLeftButtonDown this._PreviewMouseLeftButtonDown v.PreviewMouseLeftButtonDown
    updateFn prev._PreviewMouseLeftButtonUp this._PreviewMouseLeftButtonUp v.PreviewMouseLeftButtonUp
    updateFn prev._PreviewMouseMove this._PreviewMouseMove v.PreviewMouseMove
    updateFn prev._PreviewMouseRightButtonDown this._PreviewMouseRightButtonDown v.PreviewMouseRightButtonDown
    updateFn prev._PreviewMouseRightButtonUp this._PreviewMouseRightButtonUp v.PreviewMouseRightButtonUp
    updateFn prev._PreviewMouseUp this._PreviewMouseUp v.PreviewMouseUp
    updateFn prev._PreviewMouseWheel this._PreviewMouseWheel v.PreviewMouseWheel
    updateFn prev._PreviewQueryContinueDrag this._PreviewQueryContinueDrag v.PreviewQueryContinueDrag
    updateFn prev._PreviewStylusButtonDown this._PreviewStylusButtonDown v.PreviewStylusButtonDown
    updateFn prev._PreviewStylusButtonUp this._PreviewStylusButtonUp v.PreviewStylusButtonUp
    updateFn prev._PreviewStylusDown this._PreviewStylusDown v.PreviewStylusDown
    updateFn prev._PreviewStylusInAirMove this._PreviewStylusInAirMove v.PreviewStylusInAirMove
    updateFn prev._PreviewStylusInRange this._PreviewStylusInRange v.PreviewStylusInRange
    updateFn prev._PreviewStylusMove this._PreviewStylusMove v.PreviewStylusMove
    updateFn prev._PreviewStylusOutOfRange this._PreviewStylusOutOfRange v.PreviewStylusOutOfRange
    updateFn prev._PreviewStylusSystemGesture this._PreviewStylusSystemGesture v.PreviewStylusSystemGesture
    updateFn prev._PreviewStylusUp this._PreviewStylusUp v.PreviewStylusUp
    updateFn prev._PreviewTextInput this._PreviewTextInput v.PreviewTextInput
    updateFn prev._PreviewTouchDown this._PreviewTouchDown v.PreviewTouchDown
    updateFn prev._PreviewTouchMove this._PreviewTouchMove v.PreviewTouchMove
    updateFn prev._PreviewTouchUp this._PreviewTouchUp v.PreviewTouchUp
    updateFn prev._QueryContinueDrag this._QueryContinueDrag v.QueryContinueDrag
    updateFn prev._QueryCursor this._QueryCursor v.QueryCursor
    updateFn prev._StylusButtonDown this._StylusButtonDown v.StylusButtonDown
    updateFn prev._StylusButtonUp this._StylusButtonUp v.StylusButtonUp
    updateFn prev._StylusDown this._StylusDown v.StylusDown
    updateFn prev._StylusEnter this._StylusEnter v.StylusEnter
    updateFn prev._StylusInAirMove this._StylusInAirMove v.StylusInAirMove
    updateFn prev._StylusInRange this._StylusInRange v.StylusInRange
    updateFn prev._StylusLeave this._StylusLeave v.StylusLeave
    updateFn prev._StylusMove this._StylusMove v.StylusMove
    updateFn prev._StylusOutOfRange this._StylusOutOfRange v.StylusOutOfRange
    updateFn prev._StylusSystemGesture this._StylusSystemGesture v.StylusSystemGesture
    updateFn prev._StylusUp this._StylusUp v.StylusUp
    updateFn prev._TextInput this._TextInput v.TextInput
    updateFn prev._TouchDown this._TouchDown v.TouchDown
    updateFn prev._TouchEnter this._TouchEnter v.TouchEnter
    updateFn prev._TouchLeave this._TouchLeave v.TouchLeave
    updateFn prev._TouchMove this._TouchMove v.TouchMove
    updateFn prev._TouchUp this._TouchUp v.TouchUp
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.UIElement())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? UIElement as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FrameworkElement(setProps: FrameworkElement -> unit) as this =
  inherit UIElement()

  static let _DefContextMenu = System.Windows.FrameworkElement.ContextMenuProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ContextMenu
  static let _DefCursor = System.Windows.FrameworkElement.CursorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Input.Cursor
  static let _DefFlowDirection = System.Windows.FrameworkElement.FlowDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.FlowDirection
  static let _DefFocusVisualStyle = System.Windows.FrameworkElement.FocusVisualStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefForceCursor = System.Windows.FrameworkElement.ForceCursorProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefHeight = System.Windows.FrameworkElement.HeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefHorizontalAlignment = System.Windows.FrameworkElement.HorizontalAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.HorizontalAlignment
  static let _DefInputScope = System.Windows.FrameworkElement.InputScopeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Input.InputScope
  static let _DefLayoutTransform = System.Windows.FrameworkElement.LayoutTransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Transform
  static let _DefMargin = System.Windows.FrameworkElement.MarginProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefMaxHeight = System.Windows.FrameworkElement.MaxHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMaxWidth = System.Windows.FrameworkElement.MaxWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinHeight = System.Windows.FrameworkElement.MinHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinWidth = System.Windows.FrameworkElement.MinWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOverridesDefaultStyle = System.Windows.FrameworkElement.OverridesDefaultStyleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefStyle = System.Windows.FrameworkElement.StyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefTag = System.Windows.FrameworkElement.TagProperty.DefaultMetadata.DefaultValue :?> obj
  static let _DefToolTip = System.Windows.FrameworkElement.ToolTipProperty.DefaultMetadata.DefaultValue :?> obj
  static let _DefUseLayoutRounding = System.Windows.FrameworkElement.UseLayoutRoundingProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVerticalAlignment = System.Windows.FrameworkElement.VerticalAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.VerticalAlignment
  static let _DefWidth = System.Windows.FrameworkElement.WidthProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = FrameworkElement(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.FrameworkElement voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.FrameworkElement voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ContextMenu: ContextMenu voption
  member this.ContextMenu with set x = this._ContextMenu <- ValueSome x

  [<DefaultValue>] val mutable private _Cursor: System.Windows.Input.Cursor voption
  member this.Cursor with set x = this._Cursor <- ValueSome x

  [<DefaultValue>] val mutable private _FlowDirection: System.Windows.FlowDirection voption
  member this.FlowDirection with set x = this._FlowDirection <- ValueSome x

  [<DefaultValue>] val mutable private _FocusVisualStyle: System.Windows.Style voption
  member this.FocusVisualStyle with set x = this._FocusVisualStyle <- ValueSome x

  [<DefaultValue>] val mutable private _ForceCursor: bool voption
  member this.ForceCursor with set x = this._ForceCursor <- ValueSome x

  [<DefaultValue>] val mutable private _Height: float voption
  member this.Height with set x = this._Height <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalAlignment: System.Windows.HorizontalAlignment voption
  member this.HorizontalAlignment with set x = this._HorizontalAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _InputScope: System.Windows.Input.InputScope voption
  member this.InputScope with set x = this._InputScope <- ValueSome x

  [<DefaultValue>] val mutable private _LayoutTransform: Transform voption
  member this.LayoutTransform with set x = this._LayoutTransform <- ValueSome x

  [<DefaultValue>] val mutable private _Margin: System.Windows.Thickness voption
  member this.Margin with set x = this._Margin <- ValueSome x

  [<DefaultValue>] val mutable private _MaxHeight: float voption
  member this.MaxHeight with set x = this._MaxHeight <- ValueSome x

  [<DefaultValue>] val mutable private _MaxWidth: float voption
  member this.MaxWidth with set x = this._MaxWidth <- ValueSome x

  [<DefaultValue>] val mutable private _MinHeight: float voption
  member this.MinHeight with set x = this._MinHeight <- ValueSome x

  [<DefaultValue>] val mutable private _MinWidth: float voption
  member this.MinWidth with set x = this._MinWidth <- ValueSome x

  [<DefaultValue>] val mutable private _OverridesDefaultStyle: bool voption
  member this.OverridesDefaultStyle with set x = this._OverridesDefaultStyle <- ValueSome x

  [<DefaultValue>] val mutable private _Resources: System.Windows.ResourceDictionary voption
  member this.Resources with set x = this._Resources <- ValueSome x

  [<DefaultValue>] val mutable private _Style: System.Windows.Style voption
  member this.Style with set x = this._Style <- ValueSome x

  [<DefaultValue>] val mutable private _Tag: obj voption
  member this.Tag with set x = this._Tag <- ValueSome x

  [<DefaultValue>] val mutable private _ToolTip: obj voption
  member this.ToolTip with set x = this._ToolTip <- ValueSome x

  [<DefaultValue>] val mutable private _UseLayoutRounding: bool voption
  member this.UseLayoutRounding with set x = this._UseLayoutRounding <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalAlignment: System.Windows.VerticalAlignment voption
  member this.VerticalAlignment with set x = this._VerticalAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _Width: float voption
  member this.Width with set x = this._Width <- ValueSome x

  [<DefaultValue>] val mutable private _ContextMenuClosing: EventHandlerWrapper<System.Windows.Controls.ContextMenuEventArgs> voption
  member this.ContextMenuClosing with set x = this._ContextMenuClosing <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ContextMenuOpening: EventHandlerWrapper<System.Windows.Controls.ContextMenuEventArgs> voption
  member this.ContextMenuOpening with set x = this._ContextMenuOpening <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Initialized: EventHandlerWrapper<System.EventArgs> voption
  member this.Initialized with set x = this._Initialized <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Loaded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Loaded with set x = this._Loaded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _RequestBringIntoView: EventHandlerWrapper<System.Windows.RequestBringIntoViewEventArgs> voption
  member this.RequestBringIntoView with set x = this._RequestBringIntoView <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SizeChanged: EventHandlerWrapper<System.Windows.SizeChangedEventArgs> voption
  member this.SizeChanged with set x = this._SizeChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SourceUpdated: EventHandlerWrapper<System.Windows.Data.DataTransferEventArgs> voption
  member this.SourceUpdated with set x = this._SourceUpdated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TargetUpdated: EventHandlerWrapper<System.Windows.Data.DataTransferEventArgs> voption
  member this.TargetUpdated with set x = this._TargetUpdated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ToolTipClosing: EventHandlerWrapper<System.Windows.Controls.ToolTipEventArgs> voption
  member this.ToolTipClosing with set x = this._ToolTipClosing <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ToolTipOpening: EventHandlerWrapper<System.Windows.Controls.ToolTipEventArgs> voption
  member this.ToolTipOpening with set x = this._ToolTipOpening <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Unloaded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Unloaded with set x = this._Unloaded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Error: string option voption
  member this.Error with set x = this._Error <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.FrameworkElement> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.FrameworkElement) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ContextMenu |> ValueOption.iter (fun x -> v.ContextMenu <- x.RenderNew () :?> System.Windows.Controls.ContextMenu)
    this._Cursor |> ValueOption.iter (fun x -> v.Cursor <- x)
    this._FlowDirection |> ValueOption.iter (fun x -> v.FlowDirection <- x)
    this._FocusVisualStyle |> ValueOption.iter (fun x -> v.FocusVisualStyle <- x)
    this._ForceCursor |> ValueOption.iter (fun x -> v.ForceCursor <- x)
    this._Height |> ValueOption.iter (fun x -> v.Height <- x)
    this._HorizontalAlignment |> ValueOption.iter (fun x -> v.HorizontalAlignment <- x)
    this._InputScope |> ValueOption.iter (fun x -> v.InputScope <- x)
    this._LayoutTransform |> ValueOption.iter (fun x -> v.LayoutTransform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this._Margin |> ValueOption.iter (fun x -> v.Margin <- x)
    this._MaxHeight |> ValueOption.iter (fun x -> v.MaxHeight <- x)
    this._MaxWidth |> ValueOption.iter (fun x -> v.MaxWidth <- x)
    this._MinHeight |> ValueOption.iter (fun x -> v.MinHeight <- x)
    this._MinWidth |> ValueOption.iter (fun x -> v.MinWidth <- x)
    this._OverridesDefaultStyle |> ValueOption.iter (fun x -> v.OverridesDefaultStyle <- x)
    this._Resources |> ValueOption.iter (fun x -> v.Resources <- x)
    this._Style |> ValueOption.iter (fun x -> v.Style <- x)
    this._Tag |> ValueOption.iter (fun x -> v.Tag <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._ToolTip |> ValueOption.iter (fun x -> v.ToolTip <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._UseLayoutRounding |> ValueOption.iter (fun x -> v.UseLayoutRounding <- x)
    this._VerticalAlignment |> ValueOption.iter (fun x -> v.VerticalAlignment <- x)
    this._Width |> ValueOption.iter (fun x -> v.Width <- x)
    this._ContextMenuClosing |> ValueOption.iter (fun x -> x.Subscription <- v.ContextMenuClosing.Subscribe x.Fn)
    this._ContextMenuOpening |> ValueOption.iter (fun x -> x.Subscription <- v.ContextMenuOpening.Subscribe x.Fn)
    this._Initialized |> ValueOption.iter (fun x -> x.Subscription <- v.Initialized.Subscribe x.Fn)
    this._Loaded |> ValueOption.iter (fun x -> x.Subscription <- v.Loaded.Subscribe x.Fn)
    this._RequestBringIntoView |> ValueOption.iter (fun x -> x.Subscription <- v.RequestBringIntoView.Subscribe x.Fn)
    this._SizeChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SizeChanged.Subscribe x.Fn)
    this._SourceUpdated |> ValueOption.iter (fun x -> x.Subscription <- v.SourceUpdated.Subscribe x.Fn)
    this._TargetUpdated |> ValueOption.iter (fun x -> x.Subscription <- v.TargetUpdated.Subscribe x.Fn)
    this._ToolTipClosing |> ValueOption.iter (fun x -> x.Subscription <- v.ToolTipClosing.Subscribe x.Fn)
    this._ToolTipOpening |> ValueOption.iter (fun x -> x.Subscription <- v.ToolTipOpening.Subscribe x.Fn)
    this._Unloaded |> ValueOption.iter (fun x -> x.Subscription <- v.Unloaded.Subscribe x.Fn)
    this._Error |> ValueOption.iter (fun x -> this.SetError(v, x))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FrameworkElement, v: System.Windows.FrameworkElement) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefContextMenu prev._ContextMenu this._ContextMenu id (fun x -> v.ContextMenu <- x)
    updateValue _DefCursor prev._Cursor this._Cursor id (fun x -> v.Cursor <- x)
    updateValue _DefFlowDirection prev._FlowDirection this._FlowDirection id (fun x -> v.FlowDirection <- x)
    updateValue _DefFocusVisualStyle prev._FocusVisualStyle this._FocusVisualStyle id (fun x -> v.FocusVisualStyle <- x)
    updateValue _DefForceCursor prev._ForceCursor this._ForceCursor id (fun x -> v.ForceCursor <- x)
    updateValue _DefHeight prev._Height this._Height id (fun x -> v.Height <- x)
    updateValue _DefHorizontalAlignment prev._HorizontalAlignment this._HorizontalAlignment id (fun x -> v.HorizontalAlignment <- x)
    updateValue _DefInputScope prev._InputScope this._InputScope id (fun x -> v.InputScope <- x)
    updateValue _DefLayoutTransform prev._LayoutTransform this._LayoutTransform id (fun x -> v.LayoutTransform <- x)
    updateValue _DefMargin prev._Margin this._Margin id (fun x -> v.Margin <- x)
    updateValue _DefMaxHeight prev._MaxHeight this._MaxHeight id (fun x -> v.MaxHeight <- x)
    updateValue _DefMaxWidth prev._MaxWidth this._MaxWidth id (fun x -> v.MaxWidth <- x)
    updateValue _DefMinHeight prev._MinHeight this._MinHeight id (fun x -> v.MinHeight <- x)
    updateValue _DefMinWidth prev._MinWidth this._MinWidth id (fun x -> v.MinWidth <- x)
    updateValue _DefOverridesDefaultStyle prev._OverridesDefaultStyle this._OverridesDefaultStyle id (fun x -> v.OverridesDefaultStyle <- x)
    updateValue Unchecked.defaultof<System.Windows.ResourceDictionary> prev._Resources this._Resources id (fun x -> v.Resources <- x)
    updateValue _DefStyle prev._Style this._Style id (fun x -> v.Style <- x)
    updateValue _DefTag prev._Tag this._Tag id (fun x -> v.Tag <- x)
    updateValue _DefToolTip prev._ToolTip this._ToolTip id (fun x -> v.ToolTip <- x)
    updateValue _DefUseLayoutRounding prev._UseLayoutRounding this._UseLayoutRounding id (fun x -> v.UseLayoutRounding <- x)
    updateValue _DefVerticalAlignment prev._VerticalAlignment this._VerticalAlignment id (fun x -> v.VerticalAlignment <- x)
    updateValue _DefWidth prev._Width this._Width id (fun x -> v.Width <- x)
    updateFn prev._ContextMenuClosing this._ContextMenuClosing v.ContextMenuClosing
    updateFn prev._ContextMenuOpening this._ContextMenuOpening v.ContextMenuOpening
    updateFn prev._Initialized this._Initialized v.Initialized
    updateFn prev._Loaded this._Loaded v.Loaded
    updateFn prev._RequestBringIntoView this._RequestBringIntoView v.RequestBringIntoView
    updateFn prev._SizeChanged this._SizeChanged v.SizeChanged
    updateFn prev._SourceUpdated this._SourceUpdated v.SourceUpdated
    updateFn prev._TargetUpdated this._TargetUpdated v.TargetUpdated
    updateFn prev._ToolTipClosing this._ToolTipClosing v.ToolTipClosing
    updateFn prev._ToolTipOpening this._ToolTipOpening v.ToolTipOpening
    updateFn prev._Unloaded this._Unloaded v.Unloaded
    this._Error |> ValueOption.iter (fun x -> this.SetError(v, x))
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.FrameworkElement())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FrameworkElement as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type AccessText(setProps: AccessText -> unit) as this =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Controls.AccessText.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBaselineOffset = System.Windows.Controls.AccessText.BaselineOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontFamily = System.Windows.Controls.AccessText.FontFamilyProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FontFamily
  static let _DefFontSize = System.Windows.Controls.AccessText.FontSizeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontStretch = System.Windows.Controls.AccessText.FontStretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStretch
  static let _DefFontStyle = System.Windows.Controls.AccessText.FontStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStyle
  static let _DefFontWeight = System.Windows.Controls.AccessText.FontWeightProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontWeight
  static let _DefForeground = System.Windows.Controls.AccessText.ForegroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefLineHeight = System.Windows.Controls.AccessText.LineHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLineStackingStrategy = System.Windows.Controls.AccessText.LineStackingStrategyProperty.DefaultMetadata.DefaultValue :?> System.Windows.LineStackingStrategy
  static let _DefText = System.Windows.Controls.AccessText.TextProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefTextAlignment = System.Windows.Controls.AccessText.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment
  static let _DefTextDecorations = System.Windows.Controls.AccessText.TextDecorationsProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationCollection
  static let _DefTextEffects = System.Windows.Controls.AccessText.TextEffectsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.TextEffectCollection
  static let _DefTextTrimming = System.Windows.Controls.AccessText.TextTrimmingProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextTrimming
  static let _DefTextWrapping = System.Windows.Controls.AccessText.TextWrappingProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextWrapping

  do setProps this

  new() = AccessText(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.AccessText voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.AccessText voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _BaselineOffset: float voption
  member this.BaselineOffset with set x = this._BaselineOffset <- ValueSome x

  [<DefaultValue>] val mutable private _FontFamily: System.Windows.Media.FontFamily voption
  member this.FontFamily with set x = this._FontFamily <- ValueSome x

  [<DefaultValue>] val mutable private _FontSize: float voption
  member this.FontSize with set x = this._FontSize <- ValueSome x

  [<DefaultValue>] val mutable private _FontStretch: System.Windows.FontStretch voption
  member this.FontStretch with set x = this._FontStretch <- ValueSome x

  [<DefaultValue>] val mutable private _FontStyle: System.Windows.FontStyle voption
  member this.FontStyle with set x = this._FontStyle <- ValueSome x

  [<DefaultValue>] val mutable private _FontWeight: System.Windows.FontWeight voption
  member this.FontWeight with set x = this._FontWeight <- ValueSome x

  [<DefaultValue>] val mutable private _Foreground: Brush voption
  member this.Foreground with set x = this._Foreground <- ValueSome x

  [<DefaultValue>] val mutable private _LineHeight: float voption
  member this.LineHeight with set x = this._LineHeight <- ValueSome x

  [<DefaultValue>] val mutable private _LineStackingStrategy: System.Windows.LineStackingStrategy voption
  member this.LineStackingStrategy with set x = this._LineStackingStrategy <- ValueSome x

  [<DefaultValue>] val mutable private _Text: string voption
  member this.Text with set x = this._Text <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _TextDecorations: TextDecorationCollection voption
  member this.TextDecorations with set x = this._TextDecorations <- ValueSome x

  [<DefaultValue>] val mutable private _TextEffects: TextEffectCollection voption
  member this.TextEffects with set x = this._TextEffects <- ValueSome x

  [<DefaultValue>] val mutable private _TextTrimming: System.Windows.TextTrimming voption
  member this.TextTrimming with set x = this._TextTrimming <- ValueSome x

  [<DefaultValue>] val mutable private _TextWrapping: System.Windows.TextWrapping voption
  member this.TextWrapping with set x = this._TextWrapping <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.AccessText> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.AccessText) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BaselineOffset |> ValueOption.iter (fun x -> v.BaselineOffset <- x)
    this._FontFamily |> ValueOption.iter (fun x -> v.FontFamily <- x)
    this._FontSize |> ValueOption.iter (fun x -> v.FontSize <- x)
    this._FontStretch |> ValueOption.iter (fun x -> v.FontStretch <- x)
    this._FontStyle |> ValueOption.iter (fun x -> v.FontStyle <- x)
    this._FontWeight |> ValueOption.iter (fun x -> v.FontWeight <- x)
    this._Foreground |> ValueOption.iter (fun x -> v.Foreground <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._LineHeight |> ValueOption.iter (fun x -> v.LineHeight <- x)
    this._LineStackingStrategy |> ValueOption.iter (fun x -> v.LineStackingStrategy <- x)
    this._Text |> ValueOption.iter (fun x -> v.Text <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._TextDecorations |> ValueOption.iter (fun x -> v.TextDecorations <- x.RenderNew () :?> System.Windows.TextDecorationCollection)
    this._TextEffects |> ValueOption.iter (fun x -> v.TextEffects <- x.RenderNew () :?> System.Windows.Media.TextEffectCollection)
    this._TextTrimming |> ValueOption.iter (fun x -> v.TextTrimming <- x)
    this._TextWrapping |> ValueOption.iter (fun x -> v.TextWrapping <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: AccessText, v: System.Windows.Controls.AccessText) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefBaselineOffset prev._BaselineOffset this._BaselineOffset id (fun x -> v.BaselineOffset <- x)
    updateValue _DefFontFamily prev._FontFamily this._FontFamily id (fun x -> v.FontFamily <- x)
    updateValue _DefFontSize prev._FontSize this._FontSize id (fun x -> v.FontSize <- x)
    updateValue _DefFontStretch prev._FontStretch this._FontStretch id (fun x -> v.FontStretch <- x)
    updateValue _DefFontStyle prev._FontStyle this._FontStyle id (fun x -> v.FontStyle <- x)
    updateValue _DefFontWeight prev._FontWeight this._FontWeight id (fun x -> v.FontWeight <- x)
    updateValue _DefForeground prev._Foreground this._Foreground id (fun x -> v.Foreground <- x)
    updateValue _DefLineHeight prev._LineHeight this._LineHeight id (fun x -> v.LineHeight <- x)
    updateValue _DefLineStackingStrategy prev._LineStackingStrategy this._LineStackingStrategy id (fun x -> v.LineStackingStrategy <- x)
    updateValue _DefText prev._Text this._Text id (fun x -> v.Text <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateValue _DefTextDecorations prev._TextDecorations this._TextDecorations id (fun x -> v.TextDecorations <- x)
    updateValue _DefTextEffects prev._TextEffects this._TextEffects id (fun x -> v.TextEffects <- x)
    updateValue _DefTextTrimming prev._TextTrimming this._TextTrimming id (fun x -> v.TextTrimming <- x)
    updateValue _DefTextWrapping prev._TextWrapping this._TextWrapping id (fun x -> v.TextWrapping <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.AccessText())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? AccessText as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Control(setProps: Control -> unit) as this =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Controls.Control.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderBrush = System.Windows.Controls.Control.BorderBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderThickness = System.Windows.Controls.Control.BorderThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefFontFamily = System.Windows.Controls.Control.FontFamilyProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FontFamily
  static let _DefFontSize = System.Windows.Controls.Control.FontSizeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontStretch = System.Windows.Controls.Control.FontStretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStretch
  static let _DefFontStyle = System.Windows.Controls.Control.FontStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStyle
  static let _DefFontWeight = System.Windows.Controls.Control.FontWeightProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontWeight
  static let _DefForeground = System.Windows.Controls.Control.ForegroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefHorizontalContentAlignment = System.Windows.Controls.Control.HorizontalContentAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.HorizontalAlignment
  static let _DefIsTabStop = System.Windows.Controls.Control.IsTabStopProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefPadding = System.Windows.Controls.Control.PaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefTabIndex = System.Windows.Controls.Control.TabIndexProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefVerticalContentAlignment = System.Windows.Controls.Control.VerticalContentAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.VerticalAlignment

  do setProps this

  new() = Control(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Control voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Control voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _BorderBrush: Brush voption
  member this.BorderBrush with set x = this._BorderBrush <- ValueSome x

  [<DefaultValue>] val mutable private _BorderThickness: System.Windows.Thickness voption
  member this.BorderThickness with set x = this._BorderThickness <- ValueSome x

  [<DefaultValue>] val mutable private _FontFamily: System.Windows.Media.FontFamily voption
  member this.FontFamily with set x = this._FontFamily <- ValueSome x

  [<DefaultValue>] val mutable private _FontSize: float voption
  member this.FontSize with set x = this._FontSize <- ValueSome x

  [<DefaultValue>] val mutable private _FontStretch: System.Windows.FontStretch voption
  member this.FontStretch with set x = this._FontStretch <- ValueSome x

  [<DefaultValue>] val mutable private _FontStyle: System.Windows.FontStyle voption
  member this.FontStyle with set x = this._FontStyle <- ValueSome x

  [<DefaultValue>] val mutable private _FontWeight: System.Windows.FontWeight voption
  member this.FontWeight with set x = this._FontWeight <- ValueSome x

  [<DefaultValue>] val mutable private _Foreground: Brush voption
  member this.Foreground with set x = this._Foreground <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalContentAlignment: System.Windows.HorizontalAlignment voption
  member this.HorizontalContentAlignment with set x = this._HorizontalContentAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _IsTabStop: bool voption
  member this.IsTabStop with set x = this._IsTabStop <- ValueSome x

  [<DefaultValue>] val mutable private _Padding: System.Windows.Thickness voption
  member this.Padding with set x = this._Padding <- ValueSome x

  [<DefaultValue>] val mutable private _TabIndex: int voption
  member this.TabIndex with set x = this._TabIndex <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalContentAlignment: System.Windows.VerticalAlignment voption
  member this.VerticalContentAlignment with set x = this._VerticalContentAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _MouseDoubleClick: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseDoubleClick with set x = this._MouseDoubleClick <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseDoubleClick: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseDoubleClick with set x = this._PreviewMouseDoubleClick <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Control> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Control) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderBrush |> ValueOption.iter (fun x -> v.BorderBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderThickness |> ValueOption.iter (fun x -> v.BorderThickness <- x)
    this._FontFamily |> ValueOption.iter (fun x -> v.FontFamily <- x)
    this._FontSize |> ValueOption.iter (fun x -> v.FontSize <- x)
    this._FontStretch |> ValueOption.iter (fun x -> v.FontStretch <- x)
    this._FontStyle |> ValueOption.iter (fun x -> v.FontStyle <- x)
    this._FontWeight |> ValueOption.iter (fun x -> v.FontWeight <- x)
    this._Foreground |> ValueOption.iter (fun x -> v.Foreground <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._HorizontalContentAlignment |> ValueOption.iter (fun x -> v.HorizontalContentAlignment <- x)
    this._IsTabStop |> ValueOption.iter (fun x -> v.IsTabStop <- x)
    this._Padding |> ValueOption.iter (fun x -> v.Padding <- x)
    this._TabIndex |> ValueOption.iter (fun x -> v.TabIndex <- x)
    this._VerticalContentAlignment |> ValueOption.iter (fun x -> v.VerticalContentAlignment <- x)
    this._MouseDoubleClick |> ValueOption.iter (fun x -> x.Subscription <- v.MouseDoubleClick.Subscribe x.Fn)
    this._PreviewMouseDoubleClick |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseDoubleClick.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Control, v: System.Windows.Controls.Control) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefBorderBrush prev._BorderBrush this._BorderBrush id (fun x -> v.BorderBrush <- x)
    updateValue _DefBorderThickness prev._BorderThickness this._BorderThickness id (fun x -> v.BorderThickness <- x)
    updateValue _DefFontFamily prev._FontFamily this._FontFamily id (fun x -> v.FontFamily <- x)
    updateValue _DefFontSize prev._FontSize this._FontSize id (fun x -> v.FontSize <- x)
    updateValue _DefFontStretch prev._FontStretch this._FontStretch id (fun x -> v.FontStretch <- x)
    updateValue _DefFontStyle prev._FontStyle this._FontStyle id (fun x -> v.FontStyle <- x)
    updateValue _DefFontWeight prev._FontWeight this._FontWeight id (fun x -> v.FontWeight <- x)
    updateValue _DefForeground prev._Foreground this._Foreground id (fun x -> v.Foreground <- x)
    updateValue _DefHorizontalContentAlignment prev._HorizontalContentAlignment this._HorizontalContentAlignment id (fun x -> v.HorizontalContentAlignment <- x)
    updateValue _DefIsTabStop prev._IsTabStop this._IsTabStop id (fun x -> v.IsTabStop <- x)
    updateValue _DefPadding prev._Padding this._Padding id (fun x -> v.Padding <- x)
    updateValue _DefTabIndex prev._TabIndex this._TabIndex id (fun x -> v.TabIndex <- x)
    updateValue _DefVerticalContentAlignment prev._VerticalContentAlignment this._VerticalContentAlignment id (fun x -> v.VerticalContentAlignment <- x)
    updateFn prev._MouseDoubleClick this._MouseDoubleClick v.MouseDoubleClick
    updateFn prev._PreviewMouseDoubleClick this._PreviewMouseDoubleClick v.PreviewMouseDoubleClick
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Control())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Control as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Calendar(setProps: Calendar -> unit) as this =
  inherit Control()

  static let _DefCalendarButtonStyle = System.Windows.Controls.Calendar.CalendarButtonStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefCalendarDayButtonStyle = System.Windows.Controls.Calendar.CalendarDayButtonStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefCalendarItemStyle = System.Windows.Controls.Calendar.CalendarItemStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefDisplayDate = System.Windows.Controls.Calendar.DisplayDateProperty.DefaultMetadata.DefaultValue :?> System.DateTime
  static let _DefDisplayDateEnd = System.Windows.Controls.Calendar.DisplayDateEndProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.DateTime>
  static let _DefDisplayDateStart = System.Windows.Controls.Calendar.DisplayDateStartProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.DateTime>
  static let _DefDisplayMode = System.Windows.Controls.Calendar.DisplayModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.CalendarMode
  static let _DefFirstDayOfWeek = System.Windows.Controls.Calendar.FirstDayOfWeekProperty.DefaultMetadata.DefaultValue :?> System.DayOfWeek
  static let _DefIsTodayHighlighted = System.Windows.Controls.Calendar.IsTodayHighlightedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSelectedDate = System.Windows.Controls.Calendar.SelectedDateProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.DateTime>
  static let _DefSelectionMode = System.Windows.Controls.Calendar.SelectionModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.CalendarSelectionMode

  do setProps this

  new() = Calendar(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Calendar voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Calendar voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CalendarButtonStyle: System.Windows.Style voption
  member this.CalendarButtonStyle with set x = this._CalendarButtonStyle <- ValueSome x

  [<DefaultValue>] val mutable private _CalendarDayButtonStyle: System.Windows.Style voption
  member this.CalendarDayButtonStyle with set x = this._CalendarDayButtonStyle <- ValueSome x

  [<DefaultValue>] val mutable private _CalendarItemStyle: System.Windows.Style voption
  member this.CalendarItemStyle with set x = this._CalendarItemStyle <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayDate: System.DateTime voption
  member this.DisplayDate with set x = this._DisplayDate <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayDateEnd: System.DateTime option voption
  member this.DisplayDateEnd with set x = this._DisplayDateEnd <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayDateStart: System.DateTime option voption
  member this.DisplayDateStart with set x = this._DisplayDateStart <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayMode: System.Windows.Controls.CalendarMode voption
  member this.DisplayMode with set x = this._DisplayMode <- ValueSome x

  [<DefaultValue>] val mutable private _FirstDayOfWeek: System.DayOfWeek voption
  member this.FirstDayOfWeek with set x = this._FirstDayOfWeek <- ValueSome x

  [<DefaultValue>] val mutable private _IsTodayHighlighted: bool voption
  member this.IsTodayHighlighted with set x = this._IsTodayHighlighted <- ValueSome x

  [<DefaultValue>] val mutable private _SelectedDate: System.DateTime option voption
  member this.SelectedDate with set x = this._SelectedDate <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionMode: System.Windows.Controls.CalendarSelectionMode voption
  member this.SelectionMode with set x = this._SelectionMode <- ValueSome x

  [<DefaultValue>] val mutable private _BlackoutDates: System.Windows.Controls.CalendarDateRange list voption
  member this.BlackoutDates with set x = this._BlackoutDates <- ValueSome x

  [<DefaultValue>] val mutable private _SelectedDates: System.DateTime list voption
  member this.SelectedDates with set x = this._SelectedDates <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayDateChanged: EventHandlerWrapper<System.Windows.Controls.CalendarDateChangedEventArgs> voption
  member this.DisplayDateChanged with set x = this._DisplayDateChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DisplayModeChanged: EventHandlerWrapper<System.Windows.Controls.CalendarModeChangedEventArgs> voption
  member this.DisplayModeChanged with set x = this._DisplayModeChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectedDatesChanged: EventHandlerWrapper<System.Windows.Controls.SelectionChangedEventArgs> voption
  member this.SelectedDatesChanged with set x = this._SelectedDatesChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectionModeChanged: EventHandlerWrapper<System.EventArgs> voption
  member this.SelectionModeChanged with set x = this._SelectionModeChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Calendar> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Calendar) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CalendarButtonStyle |> ValueOption.iter (fun x -> v.CalendarButtonStyle <- x)
    this._CalendarDayButtonStyle |> ValueOption.iter (fun x -> v.CalendarDayButtonStyle <- x)
    this._CalendarItemStyle |> ValueOption.iter (fun x -> v.CalendarItemStyle <- x)
    this._DisplayDate |> ValueOption.iter (fun x -> v.DisplayDate <- x)
    this._DisplayDateEnd |> ValueOption.iter (fun x -> v.DisplayDateEnd <- x |> Option.toNullable)
    this._DisplayDateStart |> ValueOption.iter (fun x -> v.DisplayDateStart <- x |> Option.toNullable)
    this._DisplayMode |> ValueOption.iter (fun x -> v.DisplayMode <- x)
    this._FirstDayOfWeek |> ValueOption.iter (fun x -> v.FirstDayOfWeek <- x)
    this._IsTodayHighlighted |> ValueOption.iter (fun x -> v.IsTodayHighlighted <- x)
    this._SelectedDate |> ValueOption.iter (fun x -> v.SelectedDate <- x |> Option.toNullable)
    this._SelectionMode |> ValueOption.iter (fun x -> v.SelectionMode <- x)
    this._BlackoutDates |> ValueOption.iter (fun xs -> xs |> List.iter (v.BlackoutDates.Add >> ignore))
    this._SelectedDates |> ValueOption.iter (fun xs -> xs |> List.iter (v.SelectedDates.Add >> ignore))
    this._DisplayDateChanged |> ValueOption.iter (fun x -> x.Subscription <- v.DisplayDateChanged.Subscribe x.Fn)
    this._DisplayModeChanged |> ValueOption.iter (fun x -> x.Subscription <- v.DisplayModeChanged.Subscribe x.Fn)
    this._SelectedDatesChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SelectedDatesChanged.Subscribe x.Fn)
    this._SelectionModeChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionModeChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Calendar, v: System.Windows.Controls.Calendar) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCalendarButtonStyle prev._CalendarButtonStyle this._CalendarButtonStyle id (fun x -> v.CalendarButtonStyle <- x)
    updateValue _DefCalendarDayButtonStyle prev._CalendarDayButtonStyle this._CalendarDayButtonStyle id (fun x -> v.CalendarDayButtonStyle <- x)
    updateValue _DefCalendarItemStyle prev._CalendarItemStyle this._CalendarItemStyle id (fun x -> v.CalendarItemStyle <- x)
    updateValue _DefDisplayDate prev._DisplayDate this._DisplayDate id (fun x -> v.DisplayDate <- x)
    updateValue _DefDisplayDateEnd prev._DisplayDateEnd this._DisplayDateEnd Option.toNullable (fun x -> v.DisplayDateEnd <- x)
    updateValue _DefDisplayDateStart prev._DisplayDateStart this._DisplayDateStart Option.toNullable (fun x -> v.DisplayDateStart <- x)
    updateValue _DefDisplayMode prev._DisplayMode this._DisplayMode id (fun x -> v.DisplayMode <- x)
    updateValue _DefFirstDayOfWeek prev._FirstDayOfWeek this._FirstDayOfWeek id (fun x -> v.FirstDayOfWeek <- x)
    updateValue _DefIsTodayHighlighted prev._IsTodayHighlighted this._IsTodayHighlighted id (fun x -> v.IsTodayHighlighted <- x)
    updateValue _DefSelectedDate prev._SelectedDate this._SelectedDate Option.toNullable (fun x -> v.SelectedDate <- x)
    updateValue _DefSelectionMode prev._SelectionMode this._SelectionMode id (fun x -> v.SelectionMode <- x)
    updateChildren prev._BlackoutDates this._BlackoutDates v.BlackoutDates
    updateChildren prev._SelectedDates this._SelectedDates v.SelectedDates
    updateFn prev._DisplayDateChanged this._DisplayDateChanged v.DisplayDateChanged
    updateFn prev._DisplayModeChanged this._DisplayModeChanged v.DisplayModeChanged
    updateFn prev._SelectedDatesChanged this._SelectedDatesChanged v.SelectedDatesChanged
    updateFn prev._SelectionModeChanged this._SelectionModeChanged v.SelectionModeChanged
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Calendar())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Calendar as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CalendarItem(setProps: CalendarItem -> unit) as this =
  inherit Control()


  do setProps this

  new() = CalendarItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.CalendarItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.CalendarItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.CalendarItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.CalendarItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CalendarItem, v: System.Windows.Controls.Primitives.CalendarItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.CalendarItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CalendarItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ContentControl(setProps: ContentControl -> unit) as this =
  inherit Control()

  static let _DefContent = System.Windows.Controls.ContentControl.ContentProperty.DefaultMetadata.DefaultValue :?> obj
  static let _DefContentStringFormat = System.Windows.Controls.ContentControl.ContentStringFormatProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = ContentControl(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ContentControl voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ContentControl voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Content: obj voption
  member this.Content with set x = this._Content <- ValueSome x

  [<DefaultValue>] val mutable private _ContentStringFormat: string voption
  member this.ContentStringFormat with set x = this._ContentStringFormat <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ContentControl> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ContentControl) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Content |> ValueOption.iter (fun x -> v.Content <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._ContentStringFormat |> ValueOption.iter (fun x -> v.ContentStringFormat <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ContentControl, v: System.Windows.Controls.ContentControl) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefContent prev._Content this._Content id (fun x -> v.Content <- x)
    updateValue _DefContentStringFormat prev._ContentStringFormat this._ContentStringFormat id (fun x -> v.ContentStringFormat <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ContentControl())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ContentControl as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type ButtonBase() =
  inherit ContentControl()

  static let _DefClickMode = System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ClickMode

  [<DefaultValue>] val mutable private _ClickMode: System.Windows.Controls.ClickMode voption
  member this.ClickMode with set x = this._ClickMode <- ValueSome x

  [<DefaultValue>] val mutable private _Click: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Click with set x = this._Click <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.ButtonBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.ButtonBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ClickMode |> ValueOption.iter (fun x -> v.ClickMode <- x)
    this._Click |> ValueOption.iter (fun x -> x.Subscription <- v.Click.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ButtonBase, v: System.Windows.Controls.Primitives.ButtonBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefClickMode prev._ClickMode this._ClickMode id (fun x -> v.ClickMode <- x)
    updateFn prev._Click this._Click v.Click
    this.SilenceEvents <- false


type Button(setProps: Button -> unit) as this =
  inherit ButtonBase()

  static let _DefIsCancel = System.Windows.Controls.Button.IsCancelProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsDefault = System.Windows.Controls.Button.IsDefaultProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = Button(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Button voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Button voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsCancel: bool voption
  member this.IsCancel with set x = this._IsCancel <- ValueSome x

  [<DefaultValue>] val mutable private _IsDefault: bool voption
  member this.IsDefault with set x = this._IsDefault <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Button> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Button) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsCancel |> ValueOption.iter (fun x -> v.IsCancel <- x)
    this._IsDefault |> ValueOption.iter (fun x -> v.IsDefault <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Button, v: System.Windows.Controls.Button) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsCancel prev._IsCancel this._IsCancel id (fun x -> v.IsCancel <- x)
    updateValue _DefIsDefault prev._IsDefault this._IsDefault id (fun x -> v.IsDefault <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Button())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Button as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CalendarButton(setProps: CalendarButton -> unit) as this =
  inherit Button()


  do setProps this

  new() = CalendarButton(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.CalendarButton voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.CalendarButton voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.CalendarButton> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.CalendarButton) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CalendarButton, v: System.Windows.Controls.Primitives.CalendarButton) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.CalendarButton())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CalendarButton as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CalendarDayButton(setProps: CalendarDayButton -> unit) as this =
  inherit Button()


  do setProps this

  new() = CalendarDayButton(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.CalendarDayButton voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.CalendarDayButton voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.CalendarDayButton> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.CalendarDayButton) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CalendarDayButton, v: System.Windows.Controls.Primitives.CalendarDayButton) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.CalendarDayButton())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CalendarDayButton as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RepeatButton(setProps: RepeatButton -> unit) as this =
  inherit ButtonBase()

  static let _DefDelay = System.Windows.Controls.Primitives.RepeatButton.DelayProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefInterval = System.Windows.Controls.Primitives.RepeatButton.IntervalProperty.DefaultMetadata.DefaultValue :?> int

  do setProps this

  new() = RepeatButton(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.RepeatButton voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.RepeatButton voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Delay: int voption
  member this.Delay with set x = this._Delay <- ValueSome x

  [<DefaultValue>] val mutable private _Interval: int voption
  member this.Interval with set x = this._Interval <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.RepeatButton> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.RepeatButton) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Delay |> ValueOption.iter (fun x -> v.Delay <- x)
    this._Interval |> ValueOption.iter (fun x -> v.Interval <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RepeatButton, v: System.Windows.Controls.Primitives.RepeatButton) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDelay prev._Delay this._Delay id (fun x -> v.Delay <- x)
    updateValue _DefInterval prev._Interval this._Interval id (fun x -> v.Interval <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.RepeatButton())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RepeatButton as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ToggleButton(setProps: ToggleButton -> unit) as this =
  inherit ButtonBase()

  static let _DefIsChecked = System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty.DefaultMetadata.DefaultValue :?> System.Nullable<bool>
  static let _DefIsThreeState = System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = ToggleButton(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.ToggleButton voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.ToggleButton voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsChecked: bool option voption
  member this.IsChecked with set x = this._IsChecked <- ValueSome x

  [<DefaultValue>] val mutable private _IsThreeState: bool voption
  member this.IsThreeState with set x = this._IsThreeState <- ValueSome x

  [<DefaultValue>] val mutable private _Checked: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Checked with set x = this._Checked <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Indeterminate: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Indeterminate with set x = this._Indeterminate <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Unchecked: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Unchecked with set x = this._Unchecked <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.ToggleButton> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.ToggleButton) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsChecked |> ValueOption.iter (fun x -> v.IsChecked <- x |> Option.toNullable)
    this._IsThreeState |> ValueOption.iter (fun x -> v.IsThreeState <- x)
    this._Checked |> ValueOption.iter (fun x -> x.Subscription <- v.Checked.Subscribe x.Fn)
    this._Indeterminate |> ValueOption.iter (fun x -> x.Subscription <- v.Indeterminate.Subscribe x.Fn)
    this._Unchecked |> ValueOption.iter (fun x -> x.Subscription <- v.Unchecked.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ToggleButton, v: System.Windows.Controls.Primitives.ToggleButton) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsChecked prev._IsChecked this._IsChecked Option.toNullable (fun x -> v.IsChecked <- x)
    updateValue _DefIsThreeState prev._IsThreeState this._IsThreeState id (fun x -> v.IsThreeState <- x)
    updateFn prev._Checked this._Checked v.Checked
    updateFn prev._Indeterminate this._Indeterminate v.Indeterminate
    updateFn prev._Unchecked this._Unchecked v.Unchecked
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.ToggleButton())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ToggleButton as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type CheckBox(setProps: CheckBox -> unit) as this =
  inherit ToggleButton()


  do setProps this

  new() = CheckBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.CheckBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.CheckBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.CheckBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.CheckBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: CheckBox, v: System.Windows.Controls.CheckBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.CheckBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? CheckBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type RadioButton(setProps: RadioButton -> unit) as this =
  inherit ToggleButton()

  static let _DefGroupName = System.Windows.Controls.RadioButton.GroupNameProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = RadioButton(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.RadioButton voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.RadioButton voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _GroupName: string voption
  member this.GroupName with set x = this._GroupName <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.RadioButton> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.RadioButton) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._GroupName |> ValueOption.iter (fun x -> v.GroupName <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RadioButton, v: System.Windows.Controls.RadioButton) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefGroupName prev._GroupName this._GroupName id (fun x -> v.GroupName <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.RadioButton())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RadioButton as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Frame(setProps: Frame -> unit) as this =
  inherit ContentControl()

  static let _DefJournalOwnership = System.Windows.Controls.Frame.JournalOwnershipProperty.DefaultMetadata.DefaultValue :?> System.Windows.Navigation.JournalOwnership
  static let _DefNavigationUIVisibility = System.Windows.Controls.Frame.NavigationUIVisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Navigation.NavigationUIVisibility
  static let _DefSandboxExternalContent = System.Windows.Controls.Frame.SandboxExternalContentProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSource = System.Windows.Controls.Frame.SourceProperty.DefaultMetadata.DefaultValue :?> System.Uri

  do setProps this

  new() = Frame(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Frame voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Frame voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _JournalOwnership: System.Windows.Navigation.JournalOwnership voption
  member this.JournalOwnership with set x = this._JournalOwnership <- ValueSome x

  [<DefaultValue>] val mutable private _NavigationUIVisibility: System.Windows.Navigation.NavigationUIVisibility voption
  member this.NavigationUIVisibility with set x = this._NavigationUIVisibility <- ValueSome x

  [<DefaultValue>] val mutable private _SandboxExternalContent: bool voption
  member this.SandboxExternalContent with set x = this._SandboxExternalContent <- ValueSome x

  [<DefaultValue>] val mutable private _Source: System.Uri voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _ContentRendered: EventHandlerWrapper<System.EventArgs> voption
  member this.ContentRendered with set x = this._ContentRendered <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _FragmentNavigation: EventHandlerWrapper<System.Windows.Navigation.FragmentNavigationEventArgs> voption
  member this.FragmentNavigation with set x = this._FragmentNavigation <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LoadCompleted: EventHandlerWrapper<System.Windows.Navigation.NavigationEventArgs> voption
  member this.LoadCompleted with set x = this._LoadCompleted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Navigated: EventHandlerWrapper<System.Windows.Navigation.NavigationEventArgs> voption
  member this.Navigated with set x = this._Navigated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Navigating: EventHandlerWrapper<System.Windows.Navigation.NavigatingCancelEventArgs> voption
  member this.Navigating with set x = this._Navigating <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _NavigationFailed: EventHandlerWrapper<System.Windows.Navigation.NavigationFailedEventArgs> voption
  member this.NavigationFailed with set x = this._NavigationFailed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _NavigationProgress: EventHandlerWrapper<System.Windows.Navigation.NavigationProgressEventArgs> voption
  member this.NavigationProgress with set x = this._NavigationProgress <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _NavigationStopped: EventHandlerWrapper<System.Windows.Navigation.NavigationEventArgs> voption
  member this.NavigationStopped with set x = this._NavigationStopped <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Frame> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Frame) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._JournalOwnership |> ValueOption.iter (fun x -> v.JournalOwnership <- x)
    this._NavigationUIVisibility |> ValueOption.iter (fun x -> v.NavigationUIVisibility <- x)
    this._SandboxExternalContent |> ValueOption.iter (fun x -> v.SandboxExternalContent <- x)
    this._Source |> ValueOption.iter (fun x -> v.Source <- x)
    this._ContentRendered |> ValueOption.iter (fun x -> x.Subscription <- v.ContentRendered.Subscribe x.Fn)
    this._FragmentNavigation |> ValueOption.iter (fun x -> x.Subscription <- v.FragmentNavigation.Subscribe x.Fn)
    this._LoadCompleted |> ValueOption.iter (fun x -> x.Subscription <- v.LoadCompleted.Subscribe x.Fn)
    this._Navigated |> ValueOption.iter (fun x -> x.Subscription <- v.Navigated.Subscribe x.Fn)
    this._Navigating |> ValueOption.iter (fun x -> x.Subscription <- v.Navigating.Subscribe x.Fn)
    this._NavigationFailed |> ValueOption.iter (fun x -> x.Subscription <- v.NavigationFailed.Subscribe x.Fn)
    this._NavigationProgress |> ValueOption.iter (fun x -> x.Subscription <- v.NavigationProgress.Subscribe x.Fn)
    this._NavigationStopped |> ValueOption.iter (fun x -> x.Subscription <- v.NavigationStopped.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Frame, v: System.Windows.Controls.Frame) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefJournalOwnership prev._JournalOwnership this._JournalOwnership id (fun x -> v.JournalOwnership <- x)
    updateValue _DefNavigationUIVisibility prev._NavigationUIVisibility this._NavigationUIVisibility id (fun x -> v.NavigationUIVisibility <- x)
    updateValue _DefSandboxExternalContent prev._SandboxExternalContent this._SandboxExternalContent id (fun x -> v.SandboxExternalContent <- x)
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateFn prev._ContentRendered this._ContentRendered v.ContentRendered
    updateFn prev._FragmentNavigation this._FragmentNavigation v.FragmentNavigation
    updateFn prev._LoadCompleted this._LoadCompleted v.LoadCompleted
    updateFn prev._Navigated this._Navigated v.Navigated
    updateFn prev._Navigating this._Navigating v.Navigating
    updateFn prev._NavigationFailed this._NavigationFailed v.NavigationFailed
    updateFn prev._NavigationProgress this._NavigationProgress v.NavigationProgress
    updateFn prev._NavigationStopped this._NavigationStopped v.NavigationStopped
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Frame())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Frame as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GroupItem(setProps: GroupItem -> unit) as this =
  inherit ContentControl()


  do setProps this

  new() = GroupItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.GroupItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.GroupItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.GroupItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.GroupItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GroupItem, v: System.Windows.Controls.GroupItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.GroupItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GroupItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type HeaderedContentControl(setProps: HeaderedContentControl -> unit) as this =
  inherit ContentControl()

  static let _DefHeader = System.Windows.Controls.HeaderedContentControl.HeaderProperty.DefaultMetadata.DefaultValue :?> obj

  do setProps this

  new() = HeaderedContentControl(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.HeaderedContentControl voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.HeaderedContentControl voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Header: obj voption
  member this.Header with set x = this._Header <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.HeaderedContentControl> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.HeaderedContentControl) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Header |> ValueOption.iter (fun x -> v.Header <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: HeaderedContentControl, v: System.Windows.Controls.HeaderedContentControl) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefHeader prev._Header this._Header id (fun x -> v.Header <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.HeaderedContentControl())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? HeaderedContentControl as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Expander(setProps: Expander -> unit) as this =
  inherit HeaderedContentControl()

  static let _DefExpandDirection = System.Windows.Controls.Expander.ExpandDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ExpandDirection
  static let _DefIsExpanded = System.Windows.Controls.Expander.IsExpandedProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = Expander(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Expander voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Expander voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ExpandDirection: System.Windows.Controls.ExpandDirection voption
  member this.ExpandDirection with set x = this._ExpandDirection <- ValueSome x

  [<DefaultValue>] val mutable private _IsExpanded: bool voption
  member this.IsExpanded with set x = this._IsExpanded <- ValueSome x

  [<DefaultValue>] val mutable private _Collapsed: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Collapsed with set x = this._Collapsed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Expanded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Expanded with set x = this._Expanded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Expander> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Expander) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ExpandDirection |> ValueOption.iter (fun x -> v.ExpandDirection <- x)
    this._IsExpanded |> ValueOption.iter (fun x -> v.IsExpanded <- x)
    this._Collapsed |> ValueOption.iter (fun x -> x.Subscription <- v.Collapsed.Subscribe x.Fn)
    this._Expanded |> ValueOption.iter (fun x -> x.Subscription <- v.Expanded.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Expander, v: System.Windows.Controls.Expander) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefExpandDirection prev._ExpandDirection this._ExpandDirection id (fun x -> v.ExpandDirection <- x)
    updateValue _DefIsExpanded prev._IsExpanded this._IsExpanded id (fun x -> v.IsExpanded <- x)
    updateFn prev._Collapsed this._Collapsed v.Collapsed
    updateFn prev._Expanded this._Expanded v.Expanded
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Expander())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Expander as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GroupBox(setProps: GroupBox -> unit) as this =
  inherit HeaderedContentControl()


  do setProps this

  new() = GroupBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.GroupBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.GroupBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.GroupBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.GroupBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GroupBox, v: System.Windows.Controls.GroupBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.GroupBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GroupBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TabItem(setProps: TabItem -> unit) as this =
  inherit HeaderedContentControl()

  static let _DefIsSelected = System.Windows.Controls.TabItem.IsSelectedProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = TabItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.TabItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.TabItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsSelected: bool voption
  member this.IsSelected with set x = this._IsSelected <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.TabItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.TabItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsSelected |> ValueOption.iter (fun x -> v.IsSelected <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TabItem, v: System.Windows.Controls.TabItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsSelected prev._IsSelected this._IsSelected id (fun x -> v.IsSelected <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.TabItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TabItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Label(setProps: Label -> unit) as this =
  inherit ContentControl()

  static let _DefTarget = System.Windows.Controls.Label.TargetProperty.DefaultMetadata.DefaultValue :?> System.Windows.UIElement

  do setProps this

  new() = Label(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Label voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Label voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Target: UIElement voption
  member this.Target with set x = this._Target <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Label> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Label) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Target |> ValueOption.iter (fun x -> v.Target <- x.RenderNew () :?> System.Windows.UIElement)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Label, v: System.Windows.Controls.Label) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefTarget prev._Target this._Target id (fun x -> v.Target <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Label())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Label as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ListBoxItem(setProps: ListBoxItem -> unit) as this =
  inherit ContentControl()

  static let _DefIsSelected = System.Windows.Controls.ListBoxItem.IsSelectedProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = ListBoxItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ListBoxItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ListBoxItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsSelected: bool voption
  member this.IsSelected with set x = this._IsSelected <- ValueSome x

  [<DefaultValue>] val mutable private _Selected: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Selected with set x = this._Selected <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Unselected: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Unselected with set x = this._Unselected <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ListBoxItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ListBoxItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsSelected |> ValueOption.iter (fun x -> v.IsSelected <- x)
    this._Selected |> ValueOption.iter (fun x -> x.Subscription <- v.Selected.Subscribe x.Fn)
    this._Unselected |> ValueOption.iter (fun x -> x.Subscription <- v.Unselected.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ListBoxItem, v: System.Windows.Controls.ListBoxItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsSelected prev._IsSelected this._IsSelected id (fun x -> v.IsSelected <- x)
    updateFn prev._Selected this._Selected v.Selected
    updateFn prev._Unselected this._Unselected v.Unselected
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ListBoxItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ListBoxItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ComboBoxItem(setProps: ComboBoxItem -> unit) as this =
  inherit ListBoxItem()


  do setProps this

  new() = ComboBoxItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ComboBoxItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ComboBoxItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ComboBoxItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ComboBoxItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ComboBoxItem, v: System.Windows.Controls.ComboBoxItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ComboBoxItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ComboBoxItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ScrollViewer(setProps: ScrollViewer -> unit) as this =
  inherit ContentControl()

  static let _DefCanContentScroll = System.Windows.Controls.ScrollViewer.CanContentScrollProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefHorizontalScrollBarVisibility = System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ScrollBarVisibility
  static let _DefIsDeferredScrollingEnabled = System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefPanningDeceleration = System.Windows.Controls.ScrollViewer.PanningDecelerationProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPanningMode = System.Windows.Controls.ScrollViewer.PanningModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.PanningMode
  static let _DefPanningRatio = System.Windows.Controls.ScrollViewer.PanningRatioProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefVerticalScrollBarVisibility = System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ScrollBarVisibility

  do setProps this

  new() = ScrollViewer(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ScrollViewer voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ScrollViewer voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CanContentScroll: bool voption
  member this.CanContentScroll with set x = this._CanContentScroll <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalScrollBarVisibility: System.Windows.Controls.ScrollBarVisibility voption
  member this.HorizontalScrollBarVisibility with set x = this._HorizontalScrollBarVisibility <- ValueSome x

  [<DefaultValue>] val mutable private _IsDeferredScrollingEnabled: bool voption
  member this.IsDeferredScrollingEnabled with set x = this._IsDeferredScrollingEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _PanningDeceleration: float voption
  member this.PanningDeceleration with set x = this._PanningDeceleration <- ValueSome x

  [<DefaultValue>] val mutable private _PanningMode: System.Windows.Controls.PanningMode voption
  member this.PanningMode with set x = this._PanningMode <- ValueSome x

  [<DefaultValue>] val mutable private _PanningRatio: float voption
  member this.PanningRatio with set x = this._PanningRatio <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalScrollBarVisibility: System.Windows.Controls.ScrollBarVisibility voption
  member this.VerticalScrollBarVisibility with set x = this._VerticalScrollBarVisibility <- ValueSome x

  [<DefaultValue>] val mutable private _ScrollChanged: EventHandlerWrapper<System.Windows.Controls.ScrollChangedEventArgs> voption
  member this.ScrollChanged with set x = this._ScrollChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ScrollViewer> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ScrollViewer) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CanContentScroll |> ValueOption.iter (fun x -> v.CanContentScroll <- x)
    this._HorizontalScrollBarVisibility |> ValueOption.iter (fun x -> v.HorizontalScrollBarVisibility <- x)
    this._IsDeferredScrollingEnabled |> ValueOption.iter (fun x -> v.IsDeferredScrollingEnabled <- x)
    this._PanningDeceleration |> ValueOption.iter (fun x -> v.PanningDeceleration <- x)
    this._PanningMode |> ValueOption.iter (fun x -> v.PanningMode <- x)
    this._PanningRatio |> ValueOption.iter (fun x -> v.PanningRatio <- x)
    this._VerticalScrollBarVisibility |> ValueOption.iter (fun x -> v.VerticalScrollBarVisibility <- x)
    this._ScrollChanged |> ValueOption.iter (fun x -> x.Subscription <- v.ScrollChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ScrollViewer, v: System.Windows.Controls.ScrollViewer) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCanContentScroll prev._CanContentScroll this._CanContentScroll id (fun x -> v.CanContentScroll <- x)
    updateValue _DefHorizontalScrollBarVisibility prev._HorizontalScrollBarVisibility this._HorizontalScrollBarVisibility id (fun x -> v.HorizontalScrollBarVisibility <- x)
    updateValue _DefIsDeferredScrollingEnabled prev._IsDeferredScrollingEnabled this._IsDeferredScrollingEnabled id (fun x -> v.IsDeferredScrollingEnabled <- x)
    updateValue _DefPanningDeceleration prev._PanningDeceleration this._PanningDeceleration id (fun x -> v.PanningDeceleration <- x)
    updateValue _DefPanningMode prev._PanningMode this._PanningMode id (fun x -> v.PanningMode <- x)
    updateValue _DefPanningRatio prev._PanningRatio this._PanningRatio id (fun x -> v.PanningRatio <- x)
    updateValue _DefVerticalScrollBarVisibility prev._VerticalScrollBarVisibility this._VerticalScrollBarVisibility id (fun x -> v.VerticalScrollBarVisibility <- x)
    updateFn prev._ScrollChanged this._ScrollChanged v.ScrollChanged
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ScrollViewer())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ScrollViewer as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type StatusBarItem(setProps: StatusBarItem -> unit) as this =
  inherit ContentControl()


  do setProps this

  new() = StatusBarItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.StatusBarItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.StatusBarItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.StatusBarItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.StatusBarItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StatusBarItem, v: System.Windows.Controls.Primitives.StatusBarItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.StatusBarItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? StatusBarItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ToolTip(setProps: ToolTip -> unit) as this =
  inherit ContentControl()

  static let _DefCustomPopupPlacementCallback = System.Windows.Controls.ToolTip.CustomPopupPlacementCallbackProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.CustomPopupPlacementCallback
  static let _DefHasDropShadow = System.Windows.Controls.ToolTip.HasDropShadowProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefHorizontalOffset = System.Windows.Controls.ToolTip.HorizontalOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefIsOpen = System.Windows.Controls.ToolTip.IsOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefPlacement = System.Windows.Controls.ToolTip.PlacementProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.PlacementMode
  static let _DefPlacementRectangle = System.Windows.Controls.ToolTip.PlacementRectangleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect
  static let _DefPlacementTarget = System.Windows.Controls.ToolTip.PlacementTargetProperty.DefaultMetadata.DefaultValue :?> System.Windows.UIElement
  static let _DefStaysOpen = System.Windows.Controls.ToolTip.StaysOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVerticalOffset = System.Windows.Controls.ToolTip.VerticalOffsetProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ToolTip(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ToolTip voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ToolTip voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CustomPopupPlacementCallback: System.Windows.Controls.Primitives.CustomPopupPlacementCallback voption
  member this.CustomPopupPlacementCallback with set x = this._CustomPopupPlacementCallback <- ValueSome x

  [<DefaultValue>] val mutable private _HasDropShadow: bool voption
  member this.HasDropShadow with set x = this._HasDropShadow <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalOffset: float voption
  member this.HorizontalOffset with set x = this._HorizontalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _IsOpen: bool voption
  member this.IsOpen with set x = this._IsOpen <- ValueSome x

  [<DefaultValue>] val mutable private _Placement: System.Windows.Controls.Primitives.PlacementMode voption
  member this.Placement with set x = this._Placement <- ValueSome x

  [<DefaultValue>] val mutable private _PlacementRectangle: System.Windows.Rect voption
  member this.PlacementRectangle with set x = this._PlacementRectangle <- ValueSome x

  [<DefaultValue>] val mutable private _PlacementTarget: UIElement voption
  member this.PlacementTarget with set x = this._PlacementTarget <- ValueSome x

  [<DefaultValue>] val mutable private _StaysOpen: bool voption
  member this.StaysOpen with set x = this._StaysOpen <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalOffset: float voption
  member this.VerticalOffset with set x = this._VerticalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _Closed: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Closed with set x = this._Closed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Opened: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Opened with set x = this._Opened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ToolTip> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ToolTip) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CustomPopupPlacementCallback |> ValueOption.iter (fun x -> v.CustomPopupPlacementCallback <- x)
    this._HasDropShadow |> ValueOption.iter (fun x -> v.HasDropShadow <- x)
    this._HorizontalOffset |> ValueOption.iter (fun x -> v.HorizontalOffset <- x)
    this._IsOpen |> ValueOption.iter (fun x -> v.IsOpen <- x)
    this._Placement |> ValueOption.iter (fun x -> v.Placement <- x)
    this._PlacementRectangle |> ValueOption.iter (fun x -> v.PlacementRectangle <- x)
    this._PlacementTarget |> ValueOption.iter (fun x -> v.PlacementTarget <- x.RenderNew () :?> System.Windows.UIElement)
    this._StaysOpen |> ValueOption.iter (fun x -> v.StaysOpen <- x)
    this._VerticalOffset |> ValueOption.iter (fun x -> v.VerticalOffset <- x)
    this._Closed |> ValueOption.iter (fun x -> x.Subscription <- v.Closed.Subscribe x.Fn)
    this._Opened |> ValueOption.iter (fun x -> x.Subscription <- v.Opened.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ToolTip, v: System.Windows.Controls.ToolTip) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCustomPopupPlacementCallback prev._CustomPopupPlacementCallback this._CustomPopupPlacementCallback id (fun x -> v.CustomPopupPlacementCallback <- x)
    updateValue _DefHasDropShadow prev._HasDropShadow this._HasDropShadow id (fun x -> v.HasDropShadow <- x)
    updateValue _DefHorizontalOffset prev._HorizontalOffset this._HorizontalOffset id (fun x -> v.HorizontalOffset <- x)
    updateValue _DefIsOpen prev._IsOpen this._IsOpen id (fun x -> v.IsOpen <- x)
    updateValue _DefPlacement prev._Placement this._Placement id (fun x -> v.Placement <- x)
    updateValue _DefPlacementRectangle prev._PlacementRectangle this._PlacementRectangle id (fun x -> v.PlacementRectangle <- x)
    updateValue _DefPlacementTarget prev._PlacementTarget this._PlacementTarget id (fun x -> v.PlacementTarget <- x)
    updateValue _DefStaysOpen prev._StaysOpen this._StaysOpen id (fun x -> v.StaysOpen <- x)
    updateValue _DefVerticalOffset prev._VerticalOffset this._VerticalOffset id (fun x -> v.VerticalOffset <- x)
    updateFn prev._Closed this._Closed v.Closed
    updateFn prev._Opened this._Opened v.Opened
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ToolTip())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ToolTip as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Window(setProps: Window -> unit) as this =
  inherit ContentControl()

  static let _DefAllowsTransparency = System.Windows.Window.AllowsTransparencyProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIcon = System.Windows.Window.IconProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ImageSource
  static let _DefLeft = System.Windows.Window.LeftProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefResizeMode = System.Windows.Window.ResizeModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.ResizeMode
  static let _DefShowActivated = System.Windows.Window.ShowActivatedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefShowInTaskbar = System.Windows.Window.ShowInTaskbarProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSizeToContent = System.Windows.Window.SizeToContentProperty.DefaultMetadata.DefaultValue :?> System.Windows.SizeToContent
  static let _DefTaskbarItemInfo = System.Windows.Window.TaskbarItemInfoProperty.DefaultMetadata.DefaultValue :?> System.Windows.Shell.TaskbarItemInfo
  static let _DefTitle = System.Windows.Window.TitleProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefTop = System.Windows.Window.TopProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefTopmost = System.Windows.Window.TopmostProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefWindowState = System.Windows.Window.WindowStateProperty.DefaultMetadata.DefaultValue :?> System.Windows.WindowState
  static let _DefWindowStyle = System.Windows.Window.WindowStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.WindowStyle

  do setProps this

  new() = Window(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Window voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Window voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AllowsTransparency: bool voption
  member this.AllowsTransparency with set x = this._AllowsTransparency <- ValueSome x

  [<DefaultValue>] val mutable private _DialogResult: bool option voption
  member this.DialogResult with set x = this._DialogResult <- ValueSome x

  [<DefaultValue>] val mutable private _Icon: ImageSource voption
  member this.Icon with set x = this._Icon <- ValueSome x

  [<DefaultValue>] val mutable private _Left: float voption
  member this.Left with set x = this._Left <- ValueSome x

  [<DefaultValue>] val mutable private _Owner: Window voption
  member this.Owner with set x = this._Owner <- ValueSome x

  [<DefaultValue>] val mutable private _ResizeMode: System.Windows.ResizeMode voption
  member this.ResizeMode with set x = this._ResizeMode <- ValueSome x

  [<DefaultValue>] val mutable private _ShowActivated: bool voption
  member this.ShowActivated with set x = this._ShowActivated <- ValueSome x

  [<DefaultValue>] val mutable private _ShowInTaskbar: bool voption
  member this.ShowInTaskbar with set x = this._ShowInTaskbar <- ValueSome x

  [<DefaultValue>] val mutable private _SizeToContent: System.Windows.SizeToContent voption
  member this.SizeToContent with set x = this._SizeToContent <- ValueSome x

  [<DefaultValue>] val mutable private _TaskbarItemInfo: TaskbarItemInfo voption
  member this.TaskbarItemInfo with set x = this._TaskbarItemInfo <- ValueSome x

  [<DefaultValue>] val mutable private _Title: string voption
  member this.Title with set x = this._Title <- ValueSome x

  [<DefaultValue>] val mutable private _Top: float voption
  member this.Top with set x = this._Top <- ValueSome x

  [<DefaultValue>] val mutable private _Topmost: bool voption
  member this.Topmost with set x = this._Topmost <- ValueSome x

  [<DefaultValue>] val mutable private _WindowStartupLocation: System.Windows.WindowStartupLocation voption
  member this.WindowStartupLocation with set x = this._WindowStartupLocation <- ValueSome x

  [<DefaultValue>] val mutable private _WindowState: System.Windows.WindowState voption
  member this.WindowState with set x = this._WindowState <- ValueSome x

  [<DefaultValue>] val mutable private _WindowStyle: System.Windows.WindowStyle voption
  member this.WindowStyle with set x = this._WindowStyle <- ValueSome x

  [<DefaultValue>] val mutable private _Activated: EventHandlerWrapper<System.EventArgs> voption
  member this.Activated with set x = this._Activated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Closed: EventHandlerWrapper<System.EventArgs> voption
  member this.Closed with set x = this._Closed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Closing: EventHandlerWrapper<System.ComponentModel.CancelEventArgs> voption
  member this.Closing with set x = this._Closing <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ContentRendered: EventHandlerWrapper<System.EventArgs> voption
  member this.ContentRendered with set x = this._ContentRendered <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Deactivated: EventHandlerWrapper<System.EventArgs> voption
  member this.Deactivated with set x = this._Deactivated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DpiChanged: EventHandlerWrapper<System.Windows.DpiChangedEventArgs> voption
  member this.DpiChanged with set x = this._DpiChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LocationChanged: EventHandlerWrapper<System.EventArgs> voption
  member this.LocationChanged with set x = this._LocationChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SourceInitialized: EventHandlerWrapper<System.EventArgs> voption
  member this.SourceInitialized with set x = this._SourceInitialized <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StateChanged: EventHandlerWrapper<System.EventArgs> voption
  member this.StateChanged with set x = this._StateChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Window> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Window) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AllowsTransparency |> ValueOption.iter (fun x -> v.AllowsTransparency <- x)
    this._DialogResult |> ValueOption.iter (fun x -> v.DialogResult <- x |> Option.toNullable)
    this._Icon |> ValueOption.iter (fun x -> v.Icon <- x.RenderNew () :?> System.Windows.Media.ImageSource)
    this._Left |> ValueOption.iter (fun x -> v.Left <- x)
    this._Owner |> ValueOption.iter (fun x -> v.Owner <- x.RenderNew () :?> System.Windows.Window)
    this._ResizeMode |> ValueOption.iter (fun x -> v.ResizeMode <- x)
    this._ShowActivated |> ValueOption.iter (fun x -> v.ShowActivated <- x)
    this._ShowInTaskbar |> ValueOption.iter (fun x -> v.ShowInTaskbar <- x)
    this._SizeToContent |> ValueOption.iter (fun x -> v.SizeToContent <- x)
    this._TaskbarItemInfo |> ValueOption.iter (fun x -> v.TaskbarItemInfo <- x.RenderNew () :?> System.Windows.Shell.TaskbarItemInfo)
    this._Title |> ValueOption.iter (fun x -> v.Title <- x)
    this._Top |> ValueOption.iter (fun x -> v.Top <- x)
    this._Topmost |> ValueOption.iter (fun x -> v.Topmost <- x)
    this._WindowStartupLocation |> ValueOption.iter (fun x -> v.WindowStartupLocation <- x)
    this._WindowState |> ValueOption.iter (fun x -> v.WindowState <- x)
    this._WindowStyle |> ValueOption.iter (fun x -> v.WindowStyle <- x)
    this._Activated |> ValueOption.iter (fun x -> x.Subscription <- v.Activated.Subscribe x.Fn)
    this._Closed |> ValueOption.iter (fun x -> x.Subscription <- v.Closed.Subscribe x.Fn)
    this._Closing |> ValueOption.iter (fun x -> x.Subscription <- v.Closing.Subscribe x.Fn)
    this._ContentRendered |> ValueOption.iter (fun x -> x.Subscription <- v.ContentRendered.Subscribe x.Fn)
    this._Deactivated |> ValueOption.iter (fun x -> x.Subscription <- v.Deactivated.Subscribe x.Fn)
    this._DpiChanged |> ValueOption.iter (fun x -> x.Subscription <- v.DpiChanged.Subscribe x.Fn)
    this._LocationChanged |> ValueOption.iter (fun x -> x.Subscription <- v.LocationChanged.Subscribe x.Fn)
    this._SourceInitialized |> ValueOption.iter (fun x -> x.Subscription <- v.SourceInitialized.Subscribe x.Fn)
    this._StateChanged |> ValueOption.iter (fun x -> x.Subscription <- v.StateChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Window, v: System.Windows.Window) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAllowsTransparency prev._AllowsTransparency this._AllowsTransparency id (fun x -> v.AllowsTransparency <- x)
    updateValue Unchecked.defaultof<System.Nullable<bool>> prev._DialogResult this._DialogResult Option.toNullable (fun x -> v.DialogResult <- x)
    updateValue _DefIcon prev._Icon this._Icon id (fun x -> v.Icon <- x)
    updateValue _DefLeft prev._Left this._Left id (fun x -> v.Left <- x)
    updateValue Unchecked.defaultof<System.Windows.Window> prev._Owner this._Owner id (fun x -> v.Owner <- x)
    updateValue _DefResizeMode prev._ResizeMode this._ResizeMode id (fun x -> v.ResizeMode <- x)
    updateValue _DefShowActivated prev._ShowActivated this._ShowActivated id (fun x -> v.ShowActivated <- x)
    updateValue _DefShowInTaskbar prev._ShowInTaskbar this._ShowInTaskbar id (fun x -> v.ShowInTaskbar <- x)
    updateValue _DefSizeToContent prev._SizeToContent this._SizeToContent id (fun x -> v.SizeToContent <- x)
    updateValue _DefTaskbarItemInfo prev._TaskbarItemInfo this._TaskbarItemInfo id (fun x -> v.TaskbarItemInfo <- x)
    updateValue _DefTitle prev._Title this._Title id (fun x -> v.Title <- x)
    updateValue _DefTop prev._Top this._Top id (fun x -> v.Top <- x)
    updateValue _DefTopmost prev._Topmost this._Topmost id (fun x -> v.Topmost <- x)
    updateValue Unchecked.defaultof<System.Windows.WindowStartupLocation> prev._WindowStartupLocation this._WindowStartupLocation id (fun x -> v.WindowStartupLocation <- x)
    updateValue _DefWindowState prev._WindowState this._WindowState id (fun x -> v.WindowState <- x)
    updateValue _DefWindowStyle prev._WindowStyle this._WindowStyle id (fun x -> v.WindowStyle <- x)
    updateFn prev._Activated this._Activated v.Activated
    updateFn prev._Closed this._Closed v.Closed
    updateFn prev._Closing this._Closing v.Closing
    updateFn prev._ContentRendered this._ContentRendered v.ContentRendered
    updateFn prev._Deactivated this._Deactivated v.Deactivated
    updateFn prev._DpiChanged this._DpiChanged v.DpiChanged
    updateFn prev._LocationChanged this._LocationChanged v.LocationChanged
    updateFn prev._SourceInitialized this._SourceInitialized v.SourceInitialized
    updateFn prev._StateChanged this._StateChanged v.StateChanged
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Window())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Window as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type NavigationWindow(setProps: NavigationWindow -> unit) as this =
  inherit Window()

  static let _DefSandboxExternalContent = System.Windows.Navigation.NavigationWindow.SandboxExternalContentProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefShowsNavigationUI = System.Windows.Navigation.NavigationWindow.ShowsNavigationUIProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSource = System.Windows.Navigation.NavigationWindow.SourceProperty.DefaultMetadata.DefaultValue :?> System.Uri

  do setProps this

  new() = NavigationWindow(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Navigation.NavigationWindow voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Navigation.NavigationWindow voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _SandboxExternalContent: bool voption
  member this.SandboxExternalContent with set x = this._SandboxExternalContent <- ValueSome x

  [<DefaultValue>] val mutable private _ShowsNavigationUI: bool voption
  member this.ShowsNavigationUI with set x = this._ShowsNavigationUI <- ValueSome x

  [<DefaultValue>] val mutable private _Source: System.Uri voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _FragmentNavigation: EventHandlerWrapper<System.Windows.Navigation.FragmentNavigationEventArgs> voption
  member this.FragmentNavigation with set x = this._FragmentNavigation <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LoadCompleted: EventHandlerWrapper<System.Windows.Navigation.NavigationEventArgs> voption
  member this.LoadCompleted with set x = this._LoadCompleted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Navigated: EventHandlerWrapper<System.Windows.Navigation.NavigationEventArgs> voption
  member this.Navigated with set x = this._Navigated <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Navigating: EventHandlerWrapper<System.Windows.Navigation.NavigatingCancelEventArgs> voption
  member this.Navigating with set x = this._Navigating <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _NavigationFailed: EventHandlerWrapper<System.Windows.Navigation.NavigationFailedEventArgs> voption
  member this.NavigationFailed with set x = this._NavigationFailed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _NavigationProgress: EventHandlerWrapper<System.Windows.Navigation.NavigationProgressEventArgs> voption
  member this.NavigationProgress with set x = this._NavigationProgress <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _NavigationStopped: EventHandlerWrapper<System.Windows.Navigation.NavigationEventArgs> voption
  member this.NavigationStopped with set x = this._NavigationStopped <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Navigation.NavigationWindow> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Navigation.NavigationWindow) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._SandboxExternalContent |> ValueOption.iter (fun x -> v.SandboxExternalContent <- x)
    this._ShowsNavigationUI |> ValueOption.iter (fun x -> v.ShowsNavigationUI <- x)
    this._Source |> ValueOption.iter (fun x -> v.Source <- x)
    this._FragmentNavigation |> ValueOption.iter (fun x -> x.Subscription <- v.FragmentNavigation.Subscribe x.Fn)
    this._LoadCompleted |> ValueOption.iter (fun x -> x.Subscription <- v.LoadCompleted.Subscribe x.Fn)
    this._Navigated |> ValueOption.iter (fun x -> x.Subscription <- v.Navigated.Subscribe x.Fn)
    this._Navigating |> ValueOption.iter (fun x -> x.Subscription <- v.Navigating.Subscribe x.Fn)
    this._NavigationFailed |> ValueOption.iter (fun x -> x.Subscription <- v.NavigationFailed.Subscribe x.Fn)
    this._NavigationProgress |> ValueOption.iter (fun x -> x.Subscription <- v.NavigationProgress.Subscribe x.Fn)
    this._NavigationStopped |> ValueOption.iter (fun x -> x.Subscription <- v.NavigationStopped.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: NavigationWindow, v: System.Windows.Navigation.NavigationWindow) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSandboxExternalContent prev._SandboxExternalContent this._SandboxExternalContent id (fun x -> v.SandboxExternalContent <- x)
    updateValue _DefShowsNavigationUI prev._ShowsNavigationUI this._ShowsNavigationUI id (fun x -> v.ShowsNavigationUI <- x)
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateFn prev._FragmentNavigation this._FragmentNavigation v.FragmentNavigation
    updateFn prev._LoadCompleted this._LoadCompleted v.LoadCompleted
    updateFn prev._Navigated this._Navigated v.Navigated
    updateFn prev._Navigating this._Navigating v.Navigating
    updateFn prev._NavigationFailed this._NavigationFailed v.NavigationFailed
    updateFn prev._NavigationProgress this._NavigationProgress v.NavigationProgress
    updateFn prev._NavigationStopped this._NavigationStopped v.NavigationStopped
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Navigation.NavigationWindow())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? NavigationWindow as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DatePicker(setProps: DatePicker -> unit) as this =
  inherit Control()

  static let _DefCalendarStyle = System.Windows.Controls.DatePicker.CalendarStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefDisplayDate = System.Windows.Controls.DatePicker.DisplayDateProperty.DefaultMetadata.DefaultValue :?> System.DateTime
  static let _DefDisplayDateEnd = System.Windows.Controls.DatePicker.DisplayDateEndProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.DateTime>
  static let _DefDisplayDateStart = System.Windows.Controls.DatePicker.DisplayDateStartProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.DateTime>
  static let _DefFirstDayOfWeek = System.Windows.Controls.DatePicker.FirstDayOfWeekProperty.DefaultMetadata.DefaultValue :?> System.DayOfWeek
  static let _DefIsDropDownOpen = System.Windows.Controls.DatePicker.IsDropDownOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsTodayHighlighted = System.Windows.Controls.DatePicker.IsTodayHighlightedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSelectedDate = System.Windows.Controls.DatePicker.SelectedDateProperty.DefaultMetadata.DefaultValue :?> System.Nullable<System.DateTime>
  static let _DefSelectedDateFormat = System.Windows.Controls.DatePicker.SelectedDateFormatProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.DatePickerFormat
  static let _DefText = System.Windows.Controls.DatePicker.TextProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = DatePicker(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.DatePicker voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.DatePicker voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CalendarStyle: System.Windows.Style voption
  member this.CalendarStyle with set x = this._CalendarStyle <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayDate: System.DateTime voption
  member this.DisplayDate with set x = this._DisplayDate <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayDateEnd: System.DateTime option voption
  member this.DisplayDateEnd with set x = this._DisplayDateEnd <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayDateStart: System.DateTime option voption
  member this.DisplayDateStart with set x = this._DisplayDateStart <- ValueSome x

  [<DefaultValue>] val mutable private _FirstDayOfWeek: System.DayOfWeek voption
  member this.FirstDayOfWeek with set x = this._FirstDayOfWeek <- ValueSome x

  [<DefaultValue>] val mutable private _IsDropDownOpen: bool voption
  member this.IsDropDownOpen with set x = this._IsDropDownOpen <- ValueSome x

  [<DefaultValue>] val mutable private _IsTodayHighlighted: bool voption
  member this.IsTodayHighlighted with set x = this._IsTodayHighlighted <- ValueSome x

  [<DefaultValue>] val mutable private _SelectedDate: System.DateTime option voption
  member this.SelectedDate with set x = this._SelectedDate <- ValueSome x

  [<DefaultValue>] val mutable private _SelectedDateFormat: System.Windows.Controls.DatePickerFormat voption
  member this.SelectedDateFormat with set x = this._SelectedDateFormat <- ValueSome x

  [<DefaultValue>] val mutable private _Text: string voption
  member this.Text with set x = this._Text <- ValueSome x

  [<DefaultValue>] val mutable private _BlackoutDates: System.Windows.Controls.CalendarDateRange list voption
  member this.BlackoutDates with set x = this._BlackoutDates <- ValueSome x

  [<DefaultValue>] val mutable private _CalendarClosed: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.CalendarClosed with set x = this._CalendarClosed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _CalendarOpened: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.CalendarOpened with set x = this._CalendarOpened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DateValidationError: EventHandlerWrapper<System.Windows.Controls.DatePickerDateValidationErrorEventArgs> voption
  member this.DateValidationError with set x = this._DateValidationError <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectedDateChanged: EventHandlerWrapper<System.Windows.Controls.SelectionChangedEventArgs> voption
  member this.SelectedDateChanged with set x = this._SelectedDateChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.DatePicker> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.DatePicker) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CalendarStyle |> ValueOption.iter (fun x -> v.CalendarStyle <- x)
    this._DisplayDate |> ValueOption.iter (fun x -> v.DisplayDate <- x)
    this._DisplayDateEnd |> ValueOption.iter (fun x -> v.DisplayDateEnd <- x |> Option.toNullable)
    this._DisplayDateStart |> ValueOption.iter (fun x -> v.DisplayDateStart <- x |> Option.toNullable)
    this._FirstDayOfWeek |> ValueOption.iter (fun x -> v.FirstDayOfWeek <- x)
    this._IsDropDownOpen |> ValueOption.iter (fun x -> v.IsDropDownOpen <- x)
    this._IsTodayHighlighted |> ValueOption.iter (fun x -> v.IsTodayHighlighted <- x)
    this._SelectedDate |> ValueOption.iter (fun x -> v.SelectedDate <- x |> Option.toNullable)
    this._SelectedDateFormat |> ValueOption.iter (fun x -> v.SelectedDateFormat <- x)
    this._Text |> ValueOption.iter (fun x -> v.Text <- x)
    this._BlackoutDates |> ValueOption.iter (fun xs -> xs |> List.iter (v.BlackoutDates.Add >> ignore))
    this._CalendarClosed |> ValueOption.iter (fun x -> x.Subscription <- v.CalendarClosed.Subscribe x.Fn)
    this._CalendarOpened |> ValueOption.iter (fun x -> x.Subscription <- v.CalendarOpened.Subscribe x.Fn)
    this._DateValidationError |> ValueOption.iter (fun x -> x.Subscription <- v.DateValidationError.Subscribe x.Fn)
    this._SelectedDateChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SelectedDateChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DatePicker, v: System.Windows.Controls.DatePicker) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCalendarStyle prev._CalendarStyle this._CalendarStyle id (fun x -> v.CalendarStyle <- x)
    updateValue _DefDisplayDate prev._DisplayDate this._DisplayDate id (fun x -> v.DisplayDate <- x)
    updateValue _DefDisplayDateEnd prev._DisplayDateEnd this._DisplayDateEnd Option.toNullable (fun x -> v.DisplayDateEnd <- x)
    updateValue _DefDisplayDateStart prev._DisplayDateStart this._DisplayDateStart Option.toNullable (fun x -> v.DisplayDateStart <- x)
    updateValue _DefFirstDayOfWeek prev._FirstDayOfWeek this._FirstDayOfWeek id (fun x -> v.FirstDayOfWeek <- x)
    updateValue _DefIsDropDownOpen prev._IsDropDownOpen this._IsDropDownOpen id (fun x -> v.IsDropDownOpen <- x)
    updateValue _DefIsTodayHighlighted prev._IsTodayHighlighted this._IsTodayHighlighted id (fun x -> v.IsTodayHighlighted <- x)
    updateValue _DefSelectedDate prev._SelectedDate this._SelectedDate Option.toNullable (fun x -> v.SelectedDate <- x)
    updateValue _DefSelectedDateFormat prev._SelectedDateFormat this._SelectedDateFormat id (fun x -> v.SelectedDateFormat <- x)
    updateValue _DefText prev._Text this._Text id (fun x -> v.Text <- x)
    updateChildren prev._BlackoutDates this._BlackoutDates v.BlackoutDates
    updateFn prev._CalendarClosed this._CalendarClosed v.CalendarClosed
    updateFn prev._CalendarOpened this._CalendarOpened v.CalendarOpened
    updateFn prev._DateValidationError this._DateValidationError v.DateValidationError
    updateFn prev._SelectedDateChanged this._SelectedDateChanged v.SelectedDateChanged
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.DatePicker())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DatePicker as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type DocumentViewerBase() =
  inherit Control()

  static let _DefDocument = System.Windows.Controls.Primitives.DocumentViewerBase.DocumentProperty.DefaultMetadata.DefaultValue :?> System.Windows.Documents.IDocumentPaginatorSource

  [<DefaultValue>] val mutable private _Document: System.Windows.Documents.IDocumentPaginatorSource voption
  member this.Document with set x = this._Document <- ValueSome x

  [<DefaultValue>] val mutable private _PageViewsChanged: EventHandlerWrapper<System.EventArgs> voption
  member this.PageViewsChanged with set x = this._PageViewsChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.DocumentViewerBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.DocumentViewerBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Document |> ValueOption.iter (fun x -> v.Document <- x)
    this._PageViewsChanged |> ValueOption.iter (fun x -> x.Subscription <- v.PageViewsChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DocumentViewerBase, v: System.Windows.Controls.Primitives.DocumentViewerBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDocument prev._Document this._Document id (fun x -> v.Document <- x)
    updateFn prev._PageViewsChanged this._PageViewsChanged v.PageViewsChanged
    this.SilenceEvents <- false


type DocumentViewer(setProps: DocumentViewer -> unit) as this =
  inherit DocumentViewerBase()

  static let _DefHorizontalOffset = System.Windows.Controls.DocumentViewer.HorizontalOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefHorizontalPageSpacing = System.Windows.Controls.DocumentViewer.HorizontalPageSpacingProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMaxPagesAcross = System.Windows.Controls.DocumentViewer.MaxPagesAcrossProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefShowPageBorders = System.Windows.Controls.DocumentViewer.ShowPageBordersProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVerticalOffset = System.Windows.Controls.DocumentViewer.VerticalOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefVerticalPageSpacing = System.Windows.Controls.DocumentViewer.VerticalPageSpacingProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefZoom = System.Windows.Controls.DocumentViewer.ZoomProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = DocumentViewer(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.DocumentViewer voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.DocumentViewer voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalOffset: float voption
  member this.HorizontalOffset with set x = this._HorizontalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalPageSpacing: float voption
  member this.HorizontalPageSpacing with set x = this._HorizontalPageSpacing <- ValueSome x

  [<DefaultValue>] val mutable private _MaxPagesAcross: int voption
  member this.MaxPagesAcross with set x = this._MaxPagesAcross <- ValueSome x

  [<DefaultValue>] val mutable private _ShowPageBorders: bool voption
  member this.ShowPageBorders with set x = this._ShowPageBorders <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalOffset: float voption
  member this.VerticalOffset with set x = this._VerticalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalPageSpacing: float voption
  member this.VerticalPageSpacing with set x = this._VerticalPageSpacing <- ValueSome x

  [<DefaultValue>] val mutable private _Zoom: float voption
  member this.Zoom with set x = this._Zoom <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.DocumentViewer> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.DocumentViewer) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._HorizontalOffset |> ValueOption.iter (fun x -> v.HorizontalOffset <- x)
    this._HorizontalPageSpacing |> ValueOption.iter (fun x -> v.HorizontalPageSpacing <- x)
    this._MaxPagesAcross |> ValueOption.iter (fun x -> v.MaxPagesAcross <- x)
    this._ShowPageBorders |> ValueOption.iter (fun x -> v.ShowPageBorders <- x)
    this._VerticalOffset |> ValueOption.iter (fun x -> v.VerticalOffset <- x)
    this._VerticalPageSpacing |> ValueOption.iter (fun x -> v.VerticalPageSpacing <- x)
    this._Zoom |> ValueOption.iter (fun x -> v.Zoom <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DocumentViewer, v: System.Windows.Controls.DocumentViewer) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefHorizontalOffset prev._HorizontalOffset this._HorizontalOffset id (fun x -> v.HorizontalOffset <- x)
    updateValue _DefHorizontalPageSpacing prev._HorizontalPageSpacing this._HorizontalPageSpacing id (fun x -> v.HorizontalPageSpacing <- x)
    updateValue _DefMaxPagesAcross prev._MaxPagesAcross this._MaxPagesAcross id (fun x -> v.MaxPagesAcross <- x)
    updateValue _DefShowPageBorders prev._ShowPageBorders this._ShowPageBorders id (fun x -> v.ShowPageBorders <- x)
    updateValue _DefVerticalOffset prev._VerticalOffset this._VerticalOffset id (fun x -> v.VerticalOffset <- x)
    updateValue _DefVerticalPageSpacing prev._VerticalPageSpacing this._VerticalPageSpacing id (fun x -> v.VerticalPageSpacing <- x)
    updateValue _DefZoom prev._Zoom this._Zoom id (fun x -> v.Zoom <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.DocumentViewer())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DocumentViewer as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FlowDocumentPageViewer(setProps: FlowDocumentPageViewer -> unit) as this =
  inherit DocumentViewerBase()

  static let _DefIsInactiveSelectionHighlightEnabled = System.Windows.Controls.FlowDocumentPageViewer.IsInactiveSelectionHighlightEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMaxZoom = System.Windows.Controls.FlowDocumentPageViewer.MaxZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinZoom = System.Windows.Controls.FlowDocumentPageViewer.MinZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionBrush = System.Windows.Controls.FlowDocumentPageViewer.SelectionBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefSelectionOpacity = System.Windows.Controls.FlowDocumentPageViewer.SelectionOpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefZoom = System.Windows.Controls.FlowDocumentPageViewer.ZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefZoomIncrement = System.Windows.Controls.FlowDocumentPageViewer.ZoomIncrementProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = FlowDocumentPageViewer(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.FlowDocumentPageViewer voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.FlowDocumentPageViewer voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsInactiveSelectionHighlightEnabled: bool voption
  member this.IsInactiveSelectionHighlightEnabled with set x = this._IsInactiveSelectionHighlightEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _MaxZoom: float voption
  member this.MaxZoom with set x = this._MaxZoom <- ValueSome x

  [<DefaultValue>] val mutable private _MinZoom: float voption
  member this.MinZoom with set x = this._MinZoom <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionBrush: Brush voption
  member this.SelectionBrush with set x = this._SelectionBrush <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionOpacity: float voption
  member this.SelectionOpacity with set x = this._SelectionOpacity <- ValueSome x

  [<DefaultValue>] val mutable private _Zoom: float voption
  member this.Zoom with set x = this._Zoom <- ValueSome x

  [<DefaultValue>] val mutable private _ZoomIncrement: float voption
  member this.ZoomIncrement with set x = this._ZoomIncrement <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.FlowDocumentPageViewer> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.FlowDocumentPageViewer) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsInactiveSelectionHighlightEnabled |> ValueOption.iter (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    this._MaxZoom |> ValueOption.iter (fun x -> v.MaxZoom <- x)
    this._MinZoom |> ValueOption.iter (fun x -> v.MinZoom <- x)
    this._SelectionBrush |> ValueOption.iter (fun x -> v.SelectionBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._SelectionOpacity |> ValueOption.iter (fun x -> v.SelectionOpacity <- x)
    this._Zoom |> ValueOption.iter (fun x -> v.Zoom <- x)
    this._ZoomIncrement |> ValueOption.iter (fun x -> v.ZoomIncrement <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FlowDocumentPageViewer, v: System.Windows.Controls.FlowDocumentPageViewer) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsInactiveSelectionHighlightEnabled prev._IsInactiveSelectionHighlightEnabled this._IsInactiveSelectionHighlightEnabled id (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    updateValue _DefMaxZoom prev._MaxZoom this._MaxZoom id (fun x -> v.MaxZoom <- x)
    updateValue _DefMinZoom prev._MinZoom this._MinZoom id (fun x -> v.MinZoom <- x)
    updateValue _DefSelectionBrush prev._SelectionBrush this._SelectionBrush id (fun x -> v.SelectionBrush <- x)
    updateValue _DefSelectionOpacity prev._SelectionOpacity this._SelectionOpacity id (fun x -> v.SelectionOpacity <- x)
    updateValue _DefZoom prev._Zoom this._Zoom id (fun x -> v.Zoom <- x)
    updateValue _DefZoomIncrement prev._ZoomIncrement this._ZoomIncrement id (fun x -> v.ZoomIncrement <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.FlowDocumentPageViewer())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FlowDocumentPageViewer as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FlowDocumentReader(setProps: FlowDocumentReader -> unit) as this =
  inherit Control()

  static let _DefDocument = System.Windows.Controls.FlowDocumentReader.DocumentProperty.DefaultMetadata.DefaultValue :?> System.Windows.Documents.FlowDocument
  static let _DefIsFindEnabled = System.Windows.Controls.FlowDocumentReader.IsFindEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsInactiveSelectionHighlightEnabled = System.Windows.Controls.FlowDocumentReader.IsInactiveSelectionHighlightEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsPageViewEnabled = System.Windows.Controls.FlowDocumentReader.IsPageViewEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsPrintEnabled = System.Windows.Controls.FlowDocumentReader.IsPrintEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsScrollViewEnabled = System.Windows.Controls.FlowDocumentReader.IsScrollViewEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsTwoPageViewEnabled = System.Windows.Controls.FlowDocumentReader.IsTwoPageViewEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMaxZoom = System.Windows.Controls.FlowDocumentReader.MaxZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinZoom = System.Windows.Controls.FlowDocumentReader.MinZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionBrush = System.Windows.Controls.FlowDocumentReader.SelectionBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefSelectionOpacity = System.Windows.Controls.FlowDocumentReader.SelectionOpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefViewingMode = System.Windows.Controls.FlowDocumentReader.ViewingModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.FlowDocumentReaderViewingMode
  static let _DefZoom = System.Windows.Controls.FlowDocumentReader.ZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefZoomIncrement = System.Windows.Controls.FlowDocumentReader.ZoomIncrementProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = FlowDocumentReader(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.FlowDocumentReader voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.FlowDocumentReader voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Document: FlowDocument voption
  member this.Document with set x = this._Document <- ValueSome x

  [<DefaultValue>] val mutable private _IsFindEnabled: bool voption
  member this.IsFindEnabled with set x = this._IsFindEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsInactiveSelectionHighlightEnabled: bool voption
  member this.IsInactiveSelectionHighlightEnabled with set x = this._IsInactiveSelectionHighlightEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsPageViewEnabled: bool voption
  member this.IsPageViewEnabled with set x = this._IsPageViewEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsPrintEnabled: bool voption
  member this.IsPrintEnabled with set x = this._IsPrintEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsScrollViewEnabled: bool voption
  member this.IsScrollViewEnabled with set x = this._IsScrollViewEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsTwoPageViewEnabled: bool voption
  member this.IsTwoPageViewEnabled with set x = this._IsTwoPageViewEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _MaxZoom: float voption
  member this.MaxZoom with set x = this._MaxZoom <- ValueSome x

  [<DefaultValue>] val mutable private _MinZoom: float voption
  member this.MinZoom with set x = this._MinZoom <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionBrush: Brush voption
  member this.SelectionBrush with set x = this._SelectionBrush <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionOpacity: float voption
  member this.SelectionOpacity with set x = this._SelectionOpacity <- ValueSome x

  [<DefaultValue>] val mutable private _ViewingMode: System.Windows.Controls.FlowDocumentReaderViewingMode voption
  member this.ViewingMode with set x = this._ViewingMode <- ValueSome x

  [<DefaultValue>] val mutable private _Zoom: float voption
  member this.Zoom with set x = this._Zoom <- ValueSome x

  [<DefaultValue>] val mutable private _ZoomIncrement: float voption
  member this.ZoomIncrement with set x = this._ZoomIncrement <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.FlowDocumentReader> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.FlowDocumentReader) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Document |> ValueOption.iter (fun x -> v.Document <- x.RenderNew () :?> System.Windows.Documents.FlowDocument)
    this._IsFindEnabled |> ValueOption.iter (fun x -> v.IsFindEnabled <- x)
    this._IsInactiveSelectionHighlightEnabled |> ValueOption.iter (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    this._IsPageViewEnabled |> ValueOption.iter (fun x -> v.IsPageViewEnabled <- x)
    this._IsPrintEnabled |> ValueOption.iter (fun x -> v.IsPrintEnabled <- x)
    this._IsScrollViewEnabled |> ValueOption.iter (fun x -> v.IsScrollViewEnabled <- x)
    this._IsTwoPageViewEnabled |> ValueOption.iter (fun x -> v.IsTwoPageViewEnabled <- x)
    this._MaxZoom |> ValueOption.iter (fun x -> v.MaxZoom <- x)
    this._MinZoom |> ValueOption.iter (fun x -> v.MinZoom <- x)
    this._SelectionBrush |> ValueOption.iter (fun x -> v.SelectionBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._SelectionOpacity |> ValueOption.iter (fun x -> v.SelectionOpacity <- x)
    this._ViewingMode |> ValueOption.iter (fun x -> v.ViewingMode <- x)
    this._Zoom |> ValueOption.iter (fun x -> v.Zoom <- x)
    this._ZoomIncrement |> ValueOption.iter (fun x -> v.ZoomIncrement <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FlowDocumentReader, v: System.Windows.Controls.FlowDocumentReader) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDocument prev._Document this._Document id (fun x -> v.Document <- x)
    updateValue _DefIsFindEnabled prev._IsFindEnabled this._IsFindEnabled id (fun x -> v.IsFindEnabled <- x)
    updateValue _DefIsInactiveSelectionHighlightEnabled prev._IsInactiveSelectionHighlightEnabled this._IsInactiveSelectionHighlightEnabled id (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    updateValue _DefIsPageViewEnabled prev._IsPageViewEnabled this._IsPageViewEnabled id (fun x -> v.IsPageViewEnabled <- x)
    updateValue _DefIsPrintEnabled prev._IsPrintEnabled this._IsPrintEnabled id (fun x -> v.IsPrintEnabled <- x)
    updateValue _DefIsScrollViewEnabled prev._IsScrollViewEnabled this._IsScrollViewEnabled id (fun x -> v.IsScrollViewEnabled <- x)
    updateValue _DefIsTwoPageViewEnabled prev._IsTwoPageViewEnabled this._IsTwoPageViewEnabled id (fun x -> v.IsTwoPageViewEnabled <- x)
    updateValue _DefMaxZoom prev._MaxZoom this._MaxZoom id (fun x -> v.MaxZoom <- x)
    updateValue _DefMinZoom prev._MinZoom this._MinZoom id (fun x -> v.MinZoom <- x)
    updateValue _DefSelectionBrush prev._SelectionBrush this._SelectionBrush id (fun x -> v.SelectionBrush <- x)
    updateValue _DefSelectionOpacity prev._SelectionOpacity this._SelectionOpacity id (fun x -> v.SelectionOpacity <- x)
    updateValue _DefViewingMode prev._ViewingMode this._ViewingMode id (fun x -> v.ViewingMode <- x)
    updateValue _DefZoom prev._Zoom this._Zoom id (fun x -> v.Zoom <- x)
    updateValue _DefZoomIncrement prev._ZoomIncrement this._ZoomIncrement id (fun x -> v.ZoomIncrement <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.FlowDocumentReader())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FlowDocumentReader as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FlowDocumentScrollViewer(setProps: FlowDocumentScrollViewer -> unit) as this =
  inherit Control()

  static let _DefDocument = System.Windows.Controls.FlowDocumentScrollViewer.DocumentProperty.DefaultMetadata.DefaultValue :?> System.Windows.Documents.FlowDocument
  static let _DefHorizontalScrollBarVisibility = System.Windows.Controls.FlowDocumentScrollViewer.HorizontalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ScrollBarVisibility
  static let _DefIsInactiveSelectionHighlightEnabled = System.Windows.Controls.FlowDocumentScrollViewer.IsInactiveSelectionHighlightEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsSelectionEnabled = System.Windows.Controls.FlowDocumentScrollViewer.IsSelectionEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsToolBarVisible = System.Windows.Controls.FlowDocumentScrollViewer.IsToolBarVisibleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMaxZoom = System.Windows.Controls.FlowDocumentScrollViewer.MaxZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinZoom = System.Windows.Controls.FlowDocumentScrollViewer.MinZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionBrush = System.Windows.Controls.FlowDocumentScrollViewer.SelectionBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefSelectionOpacity = System.Windows.Controls.FlowDocumentScrollViewer.SelectionOpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefVerticalScrollBarVisibility = System.Windows.Controls.FlowDocumentScrollViewer.VerticalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ScrollBarVisibility
  static let _DefZoom = System.Windows.Controls.FlowDocumentScrollViewer.ZoomProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefZoomIncrement = System.Windows.Controls.FlowDocumentScrollViewer.ZoomIncrementProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = FlowDocumentScrollViewer(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.FlowDocumentScrollViewer voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.FlowDocumentScrollViewer voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Document: FlowDocument voption
  member this.Document with set x = this._Document <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalScrollBarVisibility: System.Windows.Controls.ScrollBarVisibility voption
  member this.HorizontalScrollBarVisibility with set x = this._HorizontalScrollBarVisibility <- ValueSome x

  [<DefaultValue>] val mutable private _IsInactiveSelectionHighlightEnabled: bool voption
  member this.IsInactiveSelectionHighlightEnabled with set x = this._IsInactiveSelectionHighlightEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsSelectionEnabled: bool voption
  member this.IsSelectionEnabled with set x = this._IsSelectionEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsToolBarVisible: bool voption
  member this.IsToolBarVisible with set x = this._IsToolBarVisible <- ValueSome x

  [<DefaultValue>] val mutable private _MaxZoom: float voption
  member this.MaxZoom with set x = this._MaxZoom <- ValueSome x

  [<DefaultValue>] val mutable private _MinZoom: float voption
  member this.MinZoom with set x = this._MinZoom <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionBrush: Brush voption
  member this.SelectionBrush with set x = this._SelectionBrush <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionOpacity: float voption
  member this.SelectionOpacity with set x = this._SelectionOpacity <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalScrollBarVisibility: System.Windows.Controls.ScrollBarVisibility voption
  member this.VerticalScrollBarVisibility with set x = this._VerticalScrollBarVisibility <- ValueSome x

  [<DefaultValue>] val mutable private _Zoom: float voption
  member this.Zoom with set x = this._Zoom <- ValueSome x

  [<DefaultValue>] val mutable private _ZoomIncrement: float voption
  member this.ZoomIncrement with set x = this._ZoomIncrement <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.FlowDocumentScrollViewer> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.FlowDocumentScrollViewer) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Document |> ValueOption.iter (fun x -> v.Document <- x.RenderNew () :?> System.Windows.Documents.FlowDocument)
    this._HorizontalScrollBarVisibility |> ValueOption.iter (fun x -> v.HorizontalScrollBarVisibility <- x)
    this._IsInactiveSelectionHighlightEnabled |> ValueOption.iter (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    this._IsSelectionEnabled |> ValueOption.iter (fun x -> v.IsSelectionEnabled <- x)
    this._IsToolBarVisible |> ValueOption.iter (fun x -> v.IsToolBarVisible <- x)
    this._MaxZoom |> ValueOption.iter (fun x -> v.MaxZoom <- x)
    this._MinZoom |> ValueOption.iter (fun x -> v.MinZoom <- x)
    this._SelectionBrush |> ValueOption.iter (fun x -> v.SelectionBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._SelectionOpacity |> ValueOption.iter (fun x -> v.SelectionOpacity <- x)
    this._VerticalScrollBarVisibility |> ValueOption.iter (fun x -> v.VerticalScrollBarVisibility <- x)
    this._Zoom |> ValueOption.iter (fun x -> v.Zoom <- x)
    this._ZoomIncrement |> ValueOption.iter (fun x -> v.ZoomIncrement <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FlowDocumentScrollViewer, v: System.Windows.Controls.FlowDocumentScrollViewer) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDocument prev._Document this._Document id (fun x -> v.Document <- x)
    updateValue _DefHorizontalScrollBarVisibility prev._HorizontalScrollBarVisibility this._HorizontalScrollBarVisibility id (fun x -> v.HorizontalScrollBarVisibility <- x)
    updateValue _DefIsInactiveSelectionHighlightEnabled prev._IsInactiveSelectionHighlightEnabled this._IsInactiveSelectionHighlightEnabled id (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    updateValue _DefIsSelectionEnabled prev._IsSelectionEnabled this._IsSelectionEnabled id (fun x -> v.IsSelectionEnabled <- x)
    updateValue _DefIsToolBarVisible prev._IsToolBarVisible this._IsToolBarVisible id (fun x -> v.IsToolBarVisible <- x)
    updateValue _DefMaxZoom prev._MaxZoom this._MaxZoom id (fun x -> v.MaxZoom <- x)
    updateValue _DefMinZoom prev._MinZoom this._MinZoom id (fun x -> v.MinZoom <- x)
    updateValue _DefSelectionBrush prev._SelectionBrush this._SelectionBrush id (fun x -> v.SelectionBrush <- x)
    updateValue _DefSelectionOpacity prev._SelectionOpacity this._SelectionOpacity id (fun x -> v.SelectionOpacity <- x)
    updateValue _DefVerticalScrollBarVisibility prev._VerticalScrollBarVisibility this._VerticalScrollBarVisibility id (fun x -> v.VerticalScrollBarVisibility <- x)
    updateValue _DefZoom prev._Zoom this._Zoom id (fun x -> v.Zoom <- x)
    updateValue _DefZoomIncrement prev._ZoomIncrement this._ZoomIncrement id (fun x -> v.ZoomIncrement <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.FlowDocumentScrollViewer())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FlowDocumentScrollViewer as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ItemsControl(setProps: ItemsControl -> unit) as this =
  inherit Control()

  static let _DefAlternationCount = System.Windows.Controls.ItemsControl.AlternationCountProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefDisplayMemberPath = System.Windows.Controls.ItemsControl.DisplayMemberPathProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefGroupStyleSelector = System.Windows.Controls.ItemsControl.GroupStyleSelectorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.GroupStyleSelector
  static let _DefIsTextSearchCaseSensitive = System.Windows.Controls.ItemsControl.IsTextSearchCaseSensitiveProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsTextSearchEnabled = System.Windows.Controls.ItemsControl.IsTextSearchEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefItemContainerStyle = System.Windows.Controls.ItemsControl.ItemContainerStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefItemContainerStyleSelector = System.Windows.Controls.ItemsControl.ItemContainerStyleSelectorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.StyleSelector
  static let _DefItemStringFormat = System.Windows.Controls.ItemsControl.ItemStringFormatProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = ItemsControl(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ItemsControl voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ItemsControl voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AlternationCount: int voption
  member this.AlternationCount with set x = this._AlternationCount <- ValueSome x

  [<DefaultValue>] val mutable private _DisplayMemberPath: string voption
  member this.DisplayMemberPath with set x = this._DisplayMemberPath <- ValueSome x

  [<DefaultValue>] val mutable private _GroupStyleSelector: System.Windows.Controls.GroupStyleSelector voption
  member this.GroupStyleSelector with set x = this._GroupStyleSelector <- ValueSome x

  [<DefaultValue>] val mutable private _IsTextSearchCaseSensitive: bool voption
  member this.IsTextSearchCaseSensitive with set x = this._IsTextSearchCaseSensitive <- ValueSome x

  [<DefaultValue>] val mutable private _IsTextSearchEnabled: bool voption
  member this.IsTextSearchEnabled with set x = this._IsTextSearchEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _ItemContainerStyle: System.Windows.Style voption
  member this.ItemContainerStyle with set x = this._ItemContainerStyle <- ValueSome x

  [<DefaultValue>] val mutable private _ItemContainerStyleSelector: System.Windows.Controls.StyleSelector voption
  member this.ItemContainerStyleSelector with set x = this._ItemContainerStyleSelector <- ValueSome x

  [<DefaultValue>] val mutable private _ItemStringFormat: string voption
  member this.ItemStringFormat with set x = this._ItemStringFormat <- ValueSome x

  [<DefaultValue>] val mutable private _GroupStyle: System.Windows.Controls.GroupStyle list voption
  member this.GroupStyle with set x = this._GroupStyle <- ValueSome x

  [<DefaultValue>] val mutable private _Items: obj list voption
  member this.Items with set x = this._Items <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ItemsControl> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ItemsControl) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AlternationCount |> ValueOption.iter (fun x -> v.AlternationCount <- x)
    this._DisplayMemberPath |> ValueOption.iter (fun x -> v.DisplayMemberPath <- x)
    this._GroupStyleSelector |> ValueOption.iter (fun x -> v.GroupStyleSelector <- x)
    this._IsTextSearchCaseSensitive |> ValueOption.iter (fun x -> v.IsTextSearchCaseSensitive <- x)
    this._IsTextSearchEnabled |> ValueOption.iter (fun x -> v.IsTextSearchEnabled <- x)
    this._ItemContainerStyle |> ValueOption.iter (fun x -> v.ItemContainerStyle <- x)
    this._ItemContainerStyleSelector |> ValueOption.iter (fun x -> v.ItemContainerStyleSelector <- x)
    this._ItemStringFormat |> ValueOption.iter (fun x -> v.ItemStringFormat <- x)
    this._GroupStyle |> ValueOption.iter (fun xs -> xs |> List.iter (v.GroupStyle.Add >> ignore))
    this._Items |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> (match x with :? Node as n -> n.RenderNew () |> box | _ -> x) :?> obj |> v.Items.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ItemsControl, v: System.Windows.Controls.ItemsControl) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAlternationCount prev._AlternationCount this._AlternationCount id (fun x -> v.AlternationCount <- x)
    updateValue _DefDisplayMemberPath prev._DisplayMemberPath this._DisplayMemberPath id (fun x -> v.DisplayMemberPath <- x)
    updateValue _DefGroupStyleSelector prev._GroupStyleSelector this._GroupStyleSelector id (fun x -> v.GroupStyleSelector <- x)
    updateValue _DefIsTextSearchCaseSensitive prev._IsTextSearchCaseSensitive this._IsTextSearchCaseSensitive id (fun x -> v.IsTextSearchCaseSensitive <- x)
    updateValue _DefIsTextSearchEnabled prev._IsTextSearchEnabled this._IsTextSearchEnabled id (fun x -> v.IsTextSearchEnabled <- x)
    updateValue _DefItemContainerStyle prev._ItemContainerStyle this._ItemContainerStyle id (fun x -> v.ItemContainerStyle <- x)
    updateValue _DefItemContainerStyleSelector prev._ItemContainerStyleSelector this._ItemContainerStyleSelector id (fun x -> v.ItemContainerStyleSelector <- x)
    updateValue _DefItemStringFormat prev._ItemStringFormat this._ItemStringFormat id (fun x -> v.ItemStringFormat <- x)
    updateChildren prev._GroupStyle this._GroupStyle v.GroupStyle
    updateChildren prev._Items this._Items v.Items
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ItemsControl())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ItemsControl as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type HeaderedItemsControl(setProps: HeaderedItemsControl -> unit) as this =
  inherit ItemsControl()

  static let _DefHeader = System.Windows.Controls.HeaderedItemsControl.HeaderProperty.DefaultMetadata.DefaultValue :?> obj

  do setProps this

  new() = HeaderedItemsControl(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.HeaderedItemsControl voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.HeaderedItemsControl voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Header: obj voption
  member this.Header with set x = this._Header <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.HeaderedItemsControl> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.HeaderedItemsControl) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Header |> ValueOption.iter (fun x -> v.Header <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: HeaderedItemsControl, v: System.Windows.Controls.HeaderedItemsControl) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefHeader prev._Header this._Header id (fun x -> v.Header <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.HeaderedItemsControl())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? HeaderedItemsControl as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MenuItem(setProps: MenuItem -> unit) as this =
  inherit HeaderedItemsControl()

  static let _DefIcon = System.Windows.Controls.MenuItem.IconProperty.DefaultMetadata.DefaultValue :?> obj
  static let _DefInputGestureText = System.Windows.Controls.MenuItem.InputGestureTextProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefIsCheckable = System.Windows.Controls.MenuItem.IsCheckableProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsChecked = System.Windows.Controls.MenuItem.IsCheckedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsSubmenuOpen = System.Windows.Controls.MenuItem.IsSubmenuOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefStaysOpenOnClick = System.Windows.Controls.MenuItem.StaysOpenOnClickProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = MenuItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.MenuItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.MenuItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Icon: obj voption
  member this.Icon with set x = this._Icon <- ValueSome x

  [<DefaultValue>] val mutable private _InputGestureText: string voption
  member this.InputGestureText with set x = this._InputGestureText <- ValueSome x

  [<DefaultValue>] val mutable private _IsCheckable: bool voption
  member this.IsCheckable with set x = this._IsCheckable <- ValueSome x

  [<DefaultValue>] val mutable private _IsChecked: bool voption
  member this.IsChecked with set x = this._IsChecked <- ValueSome x

  [<DefaultValue>] val mutable private _IsSubmenuOpen: bool voption
  member this.IsSubmenuOpen with set x = this._IsSubmenuOpen <- ValueSome x

  [<DefaultValue>] val mutable private _StaysOpenOnClick: bool voption
  member this.StaysOpenOnClick with set x = this._StaysOpenOnClick <- ValueSome x

  [<DefaultValue>] val mutable private _Checked: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Checked with set x = this._Checked <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Click: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Click with set x = this._Click <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SubmenuClosed: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.SubmenuClosed with set x = this._SubmenuClosed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SubmenuOpened: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.SubmenuOpened with set x = this._SubmenuOpened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Unchecked: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Unchecked with set x = this._Unchecked <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.MenuItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.MenuItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Icon |> ValueOption.iter (fun x -> v.Icon <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._InputGestureText |> ValueOption.iter (fun x -> v.InputGestureText <- x)
    this._IsCheckable |> ValueOption.iter (fun x -> v.IsCheckable <- x)
    this._IsChecked |> ValueOption.iter (fun x -> v.IsChecked <- x)
    this._IsSubmenuOpen |> ValueOption.iter (fun x -> v.IsSubmenuOpen <- x)
    this._StaysOpenOnClick |> ValueOption.iter (fun x -> v.StaysOpenOnClick <- x)
    this._Checked |> ValueOption.iter (fun x -> x.Subscription <- v.Checked.Subscribe x.Fn)
    this._Click |> ValueOption.iter (fun x -> x.Subscription <- v.Click.Subscribe x.Fn)
    this._SubmenuClosed |> ValueOption.iter (fun x -> x.Subscription <- v.SubmenuClosed.Subscribe x.Fn)
    this._SubmenuOpened |> ValueOption.iter (fun x -> x.Subscription <- v.SubmenuOpened.Subscribe x.Fn)
    this._Unchecked |> ValueOption.iter (fun x -> x.Subscription <- v.Unchecked.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MenuItem, v: System.Windows.Controls.MenuItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIcon prev._Icon this._Icon id (fun x -> v.Icon <- x)
    updateValue _DefInputGestureText prev._InputGestureText this._InputGestureText id (fun x -> v.InputGestureText <- x)
    updateValue _DefIsCheckable prev._IsCheckable this._IsCheckable id (fun x -> v.IsCheckable <- x)
    updateValue _DefIsChecked prev._IsChecked this._IsChecked id (fun x -> v.IsChecked <- x)
    updateValue _DefIsSubmenuOpen prev._IsSubmenuOpen this._IsSubmenuOpen id (fun x -> v.IsSubmenuOpen <- x)
    updateValue _DefStaysOpenOnClick prev._StaysOpenOnClick this._StaysOpenOnClick id (fun x -> v.StaysOpenOnClick <- x)
    updateFn prev._Checked this._Checked v.Checked
    updateFn prev._Click this._Click v.Click
    updateFn prev._SubmenuClosed this._SubmenuClosed v.SubmenuClosed
    updateFn prev._SubmenuOpened this._SubmenuOpened v.SubmenuOpened
    updateFn prev._Unchecked this._Unchecked v.Unchecked
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.MenuItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MenuItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ToolBar(setProps: ToolBar -> unit) as this =
  inherit HeaderedItemsControl()

  static let _DefBand = System.Windows.Controls.ToolBar.BandProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefBandIndex = System.Windows.Controls.ToolBar.BandIndexProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefIsOverflowOpen = System.Windows.Controls.ToolBar.IsOverflowOpenProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = ToolBar(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ToolBar voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ToolBar voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Band: int voption
  member this.Band with set x = this._Band <- ValueSome x

  [<DefaultValue>] val mutable private _BandIndex: int voption
  member this.BandIndex with set x = this._BandIndex <- ValueSome x

  [<DefaultValue>] val mutable private _IsOverflowOpen: bool voption
  member this.IsOverflowOpen with set x = this._IsOverflowOpen <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ToolBar> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ToolBar) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Band |> ValueOption.iter (fun x -> v.Band <- x)
    this._BandIndex |> ValueOption.iter (fun x -> v.BandIndex <- x)
    this._IsOverflowOpen |> ValueOption.iter (fun x -> v.IsOverflowOpen <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ToolBar, v: System.Windows.Controls.ToolBar) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBand prev._Band this._Band id (fun x -> v.Band <- x)
    updateValue _DefBandIndex prev._BandIndex this._BandIndex id (fun x -> v.BandIndex <- x)
    updateValue _DefIsOverflowOpen prev._IsOverflowOpen this._IsOverflowOpen id (fun x -> v.IsOverflowOpen <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ToolBar())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ToolBar as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TreeViewItem(setProps: TreeViewItem -> unit) as this =
  inherit HeaderedItemsControl()

  static let _DefIsExpanded = System.Windows.Controls.TreeViewItem.IsExpandedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsSelected = System.Windows.Controls.TreeViewItem.IsSelectedProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = TreeViewItem(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.TreeViewItem voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.TreeViewItem voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsExpanded: bool voption
  member this.IsExpanded with set x = this._IsExpanded <- ValueSome x

  [<DefaultValue>] val mutable private _IsSelected: bool voption
  member this.IsSelected with set x = this._IsSelected <- ValueSome x

  [<DefaultValue>] val mutable private _Collapsed: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Collapsed with set x = this._Collapsed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Expanded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Expanded with set x = this._Expanded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Selected: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Selected with set x = this._Selected <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Unselected: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Unselected with set x = this._Unselected <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.TreeViewItem> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.TreeViewItem) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsExpanded |> ValueOption.iter (fun x -> v.IsExpanded <- x)
    this._IsSelected |> ValueOption.iter (fun x -> v.IsSelected <- x)
    this._Collapsed |> ValueOption.iter (fun x -> x.Subscription <- v.Collapsed.Subscribe x.Fn)
    this._Expanded |> ValueOption.iter (fun x -> x.Subscription <- v.Expanded.Subscribe x.Fn)
    this._Selected |> ValueOption.iter (fun x -> x.Subscription <- v.Selected.Subscribe x.Fn)
    this._Unselected |> ValueOption.iter (fun x -> x.Subscription <- v.Unselected.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TreeViewItem, v: System.Windows.Controls.TreeViewItem) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsExpanded prev._IsExpanded this._IsExpanded id (fun x -> v.IsExpanded <- x)
    updateValue _DefIsSelected prev._IsSelected this._IsSelected id (fun x -> v.IsSelected <- x)
    updateFn prev._Collapsed this._Collapsed v.Collapsed
    updateFn prev._Expanded this._Expanded v.Expanded
    updateFn prev._Selected this._Selected v.Selected
    updateFn prev._Unselected this._Unselected v.Unselected
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.TreeViewItem())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TreeViewItem as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type MenuBase() =
  inherit ItemsControl()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.MenuBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.MenuBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MenuBase, v: System.Windows.Controls.Primitives.MenuBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type ContextMenu(setProps: ContextMenu -> unit) as this =
  inherit MenuBase()

  static let _DefCustomPopupPlacementCallback = System.Windows.Controls.ContextMenu.CustomPopupPlacementCallbackProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.CustomPopupPlacementCallback
  static let _DefHasDropShadow = System.Windows.Controls.ContextMenu.HasDropShadowProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefHorizontalOffset = System.Windows.Controls.ContextMenu.HorizontalOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefIsOpen = System.Windows.Controls.ContextMenu.IsOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefPlacement = System.Windows.Controls.ContextMenu.PlacementProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.PlacementMode
  static let _DefPlacementRectangle = System.Windows.Controls.ContextMenu.PlacementRectangleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect
  static let _DefPlacementTarget = System.Windows.Controls.ContextMenu.PlacementTargetProperty.DefaultMetadata.DefaultValue :?> System.Windows.UIElement
  static let _DefStaysOpen = System.Windows.Controls.ContextMenu.StaysOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVerticalOffset = System.Windows.Controls.ContextMenu.VerticalOffsetProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ContextMenu(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ContextMenu voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ContextMenu voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CustomPopupPlacementCallback: System.Windows.Controls.Primitives.CustomPopupPlacementCallback voption
  member this.CustomPopupPlacementCallback with set x = this._CustomPopupPlacementCallback <- ValueSome x

  [<DefaultValue>] val mutable private _HasDropShadow: bool voption
  member this.HasDropShadow with set x = this._HasDropShadow <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalOffset: float voption
  member this.HorizontalOffset with set x = this._HorizontalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _IsOpen: bool voption
  member this.IsOpen with set x = this._IsOpen <- ValueSome x

  [<DefaultValue>] val mutable private _Placement: System.Windows.Controls.Primitives.PlacementMode voption
  member this.Placement with set x = this._Placement <- ValueSome x

  [<DefaultValue>] val mutable private _PlacementRectangle: System.Windows.Rect voption
  member this.PlacementRectangle with set x = this._PlacementRectangle <- ValueSome x

  [<DefaultValue>] val mutable private _PlacementTarget: UIElement voption
  member this.PlacementTarget with set x = this._PlacementTarget <- ValueSome x

  [<DefaultValue>] val mutable private _StaysOpen: bool voption
  member this.StaysOpen with set x = this._StaysOpen <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalOffset: float voption
  member this.VerticalOffset with set x = this._VerticalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _Closed: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Closed with set x = this._Closed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Opened: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.Opened with set x = this._Opened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ContextMenu> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ContextMenu) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CustomPopupPlacementCallback |> ValueOption.iter (fun x -> v.CustomPopupPlacementCallback <- x)
    this._HasDropShadow |> ValueOption.iter (fun x -> v.HasDropShadow <- x)
    this._HorizontalOffset |> ValueOption.iter (fun x -> v.HorizontalOffset <- x)
    this._IsOpen |> ValueOption.iter (fun x -> v.IsOpen <- x)
    this._Placement |> ValueOption.iter (fun x -> v.Placement <- x)
    this._PlacementRectangle |> ValueOption.iter (fun x -> v.PlacementRectangle <- x)
    this._PlacementTarget |> ValueOption.iter (fun x -> v.PlacementTarget <- x.RenderNew () :?> System.Windows.UIElement)
    this._StaysOpen |> ValueOption.iter (fun x -> v.StaysOpen <- x)
    this._VerticalOffset |> ValueOption.iter (fun x -> v.VerticalOffset <- x)
    this._Closed |> ValueOption.iter (fun x -> x.Subscription <- v.Closed.Subscribe x.Fn)
    this._Opened |> ValueOption.iter (fun x -> x.Subscription <- v.Opened.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ContextMenu, v: System.Windows.Controls.ContextMenu) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCustomPopupPlacementCallback prev._CustomPopupPlacementCallback this._CustomPopupPlacementCallback id (fun x -> v.CustomPopupPlacementCallback <- x)
    updateValue _DefHasDropShadow prev._HasDropShadow this._HasDropShadow id (fun x -> v.HasDropShadow <- x)
    updateValue _DefHorizontalOffset prev._HorizontalOffset this._HorizontalOffset id (fun x -> v.HorizontalOffset <- x)
    updateValue _DefIsOpen prev._IsOpen this._IsOpen id (fun x -> v.IsOpen <- x)
    updateValue _DefPlacement prev._Placement this._Placement id (fun x -> v.Placement <- x)
    updateValue _DefPlacementRectangle prev._PlacementRectangle this._PlacementRectangle id (fun x -> v.PlacementRectangle <- x)
    updateValue _DefPlacementTarget prev._PlacementTarget this._PlacementTarget id (fun x -> v.PlacementTarget <- x)
    updateValue _DefStaysOpen prev._StaysOpen this._StaysOpen id (fun x -> v.StaysOpen <- x)
    updateValue _DefVerticalOffset prev._VerticalOffset this._VerticalOffset id (fun x -> v.VerticalOffset <- x)
    updateFn prev._Closed this._Closed v.Closed
    updateFn prev._Opened this._Opened v.Opened
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ContextMenu())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ContextMenu as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Menu(setProps: Menu -> unit) as this =
  inherit MenuBase()

  static let _DefIsMainMenu = System.Windows.Controls.Menu.IsMainMenuProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = Menu(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Menu voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Menu voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsMainMenu: bool voption
  member this.IsMainMenu with set x = this._IsMainMenu <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Menu> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Menu) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsMainMenu |> ValueOption.iter (fun x -> v.IsMainMenu <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Menu, v: System.Windows.Controls.Menu) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsMainMenu prev._IsMainMenu this._IsMainMenu id (fun x -> v.IsMainMenu <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Menu())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Menu as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Selector() =
  inherit ItemsControl()


  [<DefaultValue>] val mutable private _SelectionChanged: EventHandlerWrapper<System.Windows.Controls.SelectionChangedEventArgs> voption
  member this.SelectionChanged with set x = this._SelectionChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.Selector> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.Selector) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._SelectionChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Selector, v: System.Windows.Controls.Primitives.Selector) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateFn prev._SelectionChanged this._SelectionChanged v.SelectionChanged
    this.SilenceEvents <- false


type ComboBox(setProps: ComboBox -> unit) as this =
  inherit Selector()

  static let _DefIsDropDownOpen = System.Windows.Controls.ComboBox.IsDropDownOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsEditable = System.Windows.Controls.ComboBox.IsEditableProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsReadOnly = System.Windows.Controls.ComboBox.IsReadOnlyProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMaxDropDownHeight = System.Windows.Controls.ComboBox.MaxDropDownHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefShouldPreserveUserEnteredPrefix = System.Windows.Controls.ComboBox.ShouldPreserveUserEnteredPrefixProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefStaysOpenOnEdit = System.Windows.Controls.ComboBox.StaysOpenOnEditProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefText = System.Windows.Controls.ComboBox.TextProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = ComboBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ComboBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ComboBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsDropDownOpen: bool voption
  member this.IsDropDownOpen with set x = this._IsDropDownOpen <- ValueSome x

  [<DefaultValue>] val mutable private _IsEditable: bool voption
  member this.IsEditable with set x = this._IsEditable <- ValueSome x

  [<DefaultValue>] val mutable private _IsReadOnly: bool voption
  member this.IsReadOnly with set x = this._IsReadOnly <- ValueSome x

  [<DefaultValue>] val mutable private _MaxDropDownHeight: float voption
  member this.MaxDropDownHeight with set x = this._MaxDropDownHeight <- ValueSome x

  [<DefaultValue>] val mutable private _ShouldPreserveUserEnteredPrefix: bool voption
  member this.ShouldPreserveUserEnteredPrefix with set x = this._ShouldPreserveUserEnteredPrefix <- ValueSome x

  [<DefaultValue>] val mutable private _StaysOpenOnEdit: bool voption
  member this.StaysOpenOnEdit with set x = this._StaysOpenOnEdit <- ValueSome x

  [<DefaultValue>] val mutable private _Text: string voption
  member this.Text with set x = this._Text <- ValueSome x

  [<DefaultValue>] val mutable private _DropDownClosed: EventHandlerWrapper<System.EventArgs> voption
  member this.DropDownClosed with set x = this._DropDownClosed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DropDownOpened: EventHandlerWrapper<System.EventArgs> voption
  member this.DropDownOpened with set x = this._DropDownOpened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ComboBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ComboBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsDropDownOpen |> ValueOption.iter (fun x -> v.IsDropDownOpen <- x)
    this._IsEditable |> ValueOption.iter (fun x -> v.IsEditable <- x)
    this._IsReadOnly |> ValueOption.iter (fun x -> v.IsReadOnly <- x)
    this._MaxDropDownHeight |> ValueOption.iter (fun x -> v.MaxDropDownHeight <- x)
    this._ShouldPreserveUserEnteredPrefix |> ValueOption.iter (fun x -> v.ShouldPreserveUserEnteredPrefix <- x)
    this._StaysOpenOnEdit |> ValueOption.iter (fun x -> v.StaysOpenOnEdit <- x)
    this._Text |> ValueOption.iter (fun x -> v.Text <- x)
    this._DropDownClosed |> ValueOption.iter (fun x -> x.Subscription <- v.DropDownClosed.Subscribe x.Fn)
    this._DropDownOpened |> ValueOption.iter (fun x -> x.Subscription <- v.DropDownOpened.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ComboBox, v: System.Windows.Controls.ComboBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsDropDownOpen prev._IsDropDownOpen this._IsDropDownOpen id (fun x -> v.IsDropDownOpen <- x)
    updateValue _DefIsEditable prev._IsEditable this._IsEditable id (fun x -> v.IsEditable <- x)
    updateValue _DefIsReadOnly prev._IsReadOnly this._IsReadOnly id (fun x -> v.IsReadOnly <- x)
    updateValue _DefMaxDropDownHeight prev._MaxDropDownHeight this._MaxDropDownHeight id (fun x -> v.MaxDropDownHeight <- x)
    updateValue _DefShouldPreserveUserEnteredPrefix prev._ShouldPreserveUserEnteredPrefix this._ShouldPreserveUserEnteredPrefix id (fun x -> v.ShouldPreserveUserEnteredPrefix <- x)
    updateValue _DefStaysOpenOnEdit prev._StaysOpenOnEdit this._StaysOpenOnEdit id (fun x -> v.StaysOpenOnEdit <- x)
    updateValue _DefText prev._Text this._Text id (fun x -> v.Text <- x)
    updateFn prev._DropDownClosed this._DropDownClosed v.DropDownClosed
    updateFn prev._DropDownOpened this._DropDownOpened v.DropDownOpened
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ComboBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ComboBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ListBox(setProps: ListBox -> unit) as this =
  inherit Selector()

  static let _DefSelectionMode = System.Windows.Controls.ListBox.SelectionModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.SelectionMode

  do setProps this

  new() = ListBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ListBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ListBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionMode: System.Windows.Controls.SelectionMode voption
  member this.SelectionMode with set x = this._SelectionMode <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ListBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ListBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._SelectionMode |> ValueOption.iter (fun x -> v.SelectionMode <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ListBox, v: System.Windows.Controls.ListBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSelectionMode prev._SelectionMode this._SelectionMode id (fun x -> v.SelectionMode <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ListBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ListBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TabControl(setProps: TabControl -> unit) as this =
  inherit Selector()

  static let _DefTabStripPlacement = System.Windows.Controls.TabControl.TabStripPlacementProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Dock

  do setProps this

  new() = TabControl(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.TabControl voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.TabControl voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _TabStripPlacement: System.Windows.Controls.Dock voption
  member this.TabStripPlacement with set x = this._TabStripPlacement <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.TabControl> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.TabControl) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._TabStripPlacement |> ValueOption.iter (fun x -> v.TabStripPlacement <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TabControl, v: System.Windows.Controls.TabControl) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefTabStripPlacement prev._TabStripPlacement this._TabStripPlacement id (fun x -> v.TabStripPlacement <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.TabControl())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TabControl as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type StatusBar(setProps: StatusBar -> unit) as this =
  inherit ItemsControl()


  do setProps this

  new() = StatusBar(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.StatusBar voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.StatusBar voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.StatusBar> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.StatusBar) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StatusBar, v: System.Windows.Controls.Primitives.StatusBar) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.StatusBar())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? StatusBar as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TreeView(setProps: TreeView -> unit) as this =
  inherit ItemsControl()


  do setProps this

  new() = TreeView(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.TreeView voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.TreeView voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _SelectedItemChanged: EventHandlerWrapper<System.Windows.RoutedPropertyChangedEventArgs<obj>> voption
  member this.SelectedItemChanged with set x = this._SelectedItemChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.TreeView> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.TreeView) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._SelectedItemChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SelectedItemChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TreeView, v: System.Windows.Controls.TreeView) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateFn prev._SelectedItemChanged this._SelectedItemChanged v.SelectedItemChanged
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.TreeView())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TreeView as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PasswordBox(setProps: PasswordBox -> unit) as this =
  inherit Control()

  static let _DefCaretBrush = System.Windows.Controls.PasswordBox.CaretBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefIsInactiveSelectionHighlightEnabled = System.Windows.Controls.PasswordBox.IsInactiveSelectionHighlightEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMaxLength = System.Windows.Controls.PasswordBox.MaxLengthProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefPasswordChar = System.Windows.Controls.PasswordBox.PasswordCharProperty.DefaultMetadata.DefaultValue :?> char
  static let _DefSelectionBrush = System.Windows.Controls.PasswordBox.SelectionBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefSelectionOpacity = System.Windows.Controls.PasswordBox.SelectionOpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionTextBrush = System.Windows.Controls.PasswordBox.SelectionTextBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush

  do setProps this

  new() = PasswordBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.PasswordBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.PasswordBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CaretBrush: Brush voption
  member this.CaretBrush with set x = this._CaretBrush <- ValueSome x

  [<DefaultValue>] val mutable private _IsInactiveSelectionHighlightEnabled: bool voption
  member this.IsInactiveSelectionHighlightEnabled with set x = this._IsInactiveSelectionHighlightEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _MaxLength: int voption
  member this.MaxLength with set x = this._MaxLength <- ValueSome x

  [<DefaultValue>] val mutable private _Password: string voption
  member this.Password with set x = this._Password <- ValueSome x

  [<DefaultValue>] val mutable private _PasswordChar: char voption
  member this.PasswordChar with set x = this._PasswordChar <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionBrush: Brush voption
  member this.SelectionBrush with set x = this._SelectionBrush <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionOpacity: float voption
  member this.SelectionOpacity with set x = this._SelectionOpacity <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionTextBrush: Brush voption
  member this.SelectionTextBrush with set x = this._SelectionTextBrush <- ValueSome x

  [<DefaultValue>] val mutable private _PasswordChanged: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.PasswordChanged with set x = this._PasswordChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.PasswordBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.PasswordBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CaretBrush |> ValueOption.iter (fun x -> v.CaretBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._IsInactiveSelectionHighlightEnabled |> ValueOption.iter (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    this._MaxLength |> ValueOption.iter (fun x -> v.MaxLength <- x)
    this._Password |> ValueOption.iter (fun x -> v.Password <- x)
    this._PasswordChar |> ValueOption.iter (fun x -> v.PasswordChar <- x)
    this._SelectionBrush |> ValueOption.iter (fun x -> v.SelectionBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._SelectionOpacity |> ValueOption.iter (fun x -> v.SelectionOpacity <- x)
    this._SelectionTextBrush |> ValueOption.iter (fun x -> v.SelectionTextBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._PasswordChanged |> ValueOption.iter (fun x -> x.Subscription <- v.PasswordChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PasswordBox, v: System.Windows.Controls.PasswordBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCaretBrush prev._CaretBrush this._CaretBrush id (fun x -> v.CaretBrush <- x)
    updateValue _DefIsInactiveSelectionHighlightEnabled prev._IsInactiveSelectionHighlightEnabled this._IsInactiveSelectionHighlightEnabled id (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    updateValue _DefMaxLength prev._MaxLength this._MaxLength id (fun x -> v.MaxLength <- x)
    updateValue Unchecked.defaultof<string> prev._Password this._Password id (fun x -> v.Password <- x)
    updateValue _DefPasswordChar prev._PasswordChar this._PasswordChar id (fun x -> v.PasswordChar <- x)
    updateValue _DefSelectionBrush prev._SelectionBrush this._SelectionBrush id (fun x -> v.SelectionBrush <- x)
    updateValue _DefSelectionOpacity prev._SelectionOpacity this._SelectionOpacity id (fun x -> v.SelectionOpacity <- x)
    updateValue _DefSelectionTextBrush prev._SelectionTextBrush this._SelectionTextBrush id (fun x -> v.SelectionTextBrush <- x)
    updateFn prev._PasswordChanged this._PasswordChanged v.PasswordChanged
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.PasswordBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PasswordBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type RangeBase() =
  inherit Control()

  static let _DefLargeChange = System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMaximum = System.Windows.Controls.Primitives.RangeBase.MaximumProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinimum = System.Windows.Controls.Primitives.RangeBase.MinimumProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSmallChange = System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefValue = System.Windows.Controls.Primitives.RangeBase.ValueProperty.DefaultMetadata.DefaultValue :?> float

  [<DefaultValue>] val mutable private _LargeChange: float voption
  member this.LargeChange with set x = this._LargeChange <- ValueSome x

  [<DefaultValue>] val mutable private _Maximum: float voption
  member this.Maximum with set x = this._Maximum <- ValueSome x

  [<DefaultValue>] val mutable private _Minimum: float voption
  member this.Minimum with set x = this._Minimum <- ValueSome x

  [<DefaultValue>] val mutable private _SmallChange: float voption
  member this.SmallChange with set x = this._SmallChange <- ValueSome x

  [<DefaultValue>] val mutable private _Value: float voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable private _ValueChanged: EventHandlerWrapper<System.Windows.RoutedPropertyChangedEventArgs<float>> voption
  member this.ValueChanged with set x = this._ValueChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.RangeBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.RangeBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._LargeChange |> ValueOption.iter (fun x -> v.LargeChange <- x)
    this._Maximum |> ValueOption.iter (fun x -> v.Maximum <- x)
    this._Minimum |> ValueOption.iter (fun x -> v.Minimum <- x)
    this._SmallChange |> ValueOption.iter (fun x -> v.SmallChange <- x)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this._ValueChanged |> ValueOption.iter (fun x -> x.Subscription <- v.ValueChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RangeBase, v: System.Windows.Controls.Primitives.RangeBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefLargeChange prev._LargeChange this._LargeChange id (fun x -> v.LargeChange <- x)
    updateValue _DefMaximum prev._Maximum this._Maximum id (fun x -> v.Maximum <- x)
    updateValue _DefMinimum prev._Minimum this._Minimum id (fun x -> v.Minimum <- x)
    updateValue _DefSmallChange prev._SmallChange this._SmallChange id (fun x -> v.SmallChange <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    updateFn prev._ValueChanged this._ValueChanged v.ValueChanged
    this.SilenceEvents <- false


type ProgressBar(setProps: ProgressBar -> unit) as this =
  inherit RangeBase()

  static let _DefIsIndeterminate = System.Windows.Controls.ProgressBar.IsIndeterminateProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefOrientation = System.Windows.Controls.ProgressBar.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation

  do setProps this

  new() = ProgressBar(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ProgressBar voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ProgressBar voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _IsIndeterminate: bool voption
  member this.IsIndeterminate with set x = this._IsIndeterminate <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ProgressBar> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ProgressBar) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._IsIndeterminate |> ValueOption.iter (fun x -> v.IsIndeterminate <- x)
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ProgressBar, v: System.Windows.Controls.ProgressBar) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefIsIndeterminate prev._IsIndeterminate this._IsIndeterminate id (fun x -> v.IsIndeterminate <- x)
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ProgressBar())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ProgressBar as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ScrollBar(setProps: ScrollBar -> unit) as this =
  inherit RangeBase()

  static let _DefOrientation = System.Windows.Controls.Primitives.ScrollBar.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation
  static let _DefViewportSize = System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ScrollBar(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.ScrollBar voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.ScrollBar voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable private _ViewportSize: float voption
  member this.ViewportSize with set x = this._ViewportSize <- ValueSome x

  [<DefaultValue>] val mutable private _Scroll: EventHandlerWrapper<System.Windows.Controls.Primitives.ScrollEventArgs> voption
  member this.Scroll with set x = this._Scroll <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.ScrollBar> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.ScrollBar) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this._ViewportSize |> ValueOption.iter (fun x -> v.ViewportSize <- x)
    this._Scroll |> ValueOption.iter (fun x -> x.Subscription <- v.Scroll.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ScrollBar, v: System.Windows.Controls.Primitives.ScrollBar) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    updateValue _DefViewportSize prev._ViewportSize this._ViewportSize id (fun x -> v.ViewportSize <- x)
    updateFn prev._Scroll this._Scroll v.Scroll
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.ScrollBar())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ScrollBar as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Slider(setProps: Slider -> unit) as this =
  inherit RangeBase()

  static let _DefAutoToolTipPlacement = System.Windows.Controls.Slider.AutoToolTipPlacementProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.AutoToolTipPlacement
  static let _DefAutoToolTipPrecision = System.Windows.Controls.Slider.AutoToolTipPrecisionProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefDelay = System.Windows.Controls.Slider.DelayProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefInterval = System.Windows.Controls.Slider.IntervalProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefIsDirectionReversed = System.Windows.Controls.Slider.IsDirectionReversedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsMoveToPointEnabled = System.Windows.Controls.Slider.IsMoveToPointEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsSelectionRangeEnabled = System.Windows.Controls.Slider.IsSelectionRangeEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsSnapToTickEnabled = System.Windows.Controls.Slider.IsSnapToTickEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefOrientation = System.Windows.Controls.Slider.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation
  static let _DefSelectionEnd = System.Windows.Controls.Slider.SelectionEndProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionStart = System.Windows.Controls.Slider.SelectionStartProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefTickFrequency = System.Windows.Controls.Slider.TickFrequencyProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefTickPlacement = System.Windows.Controls.Slider.TickPlacementProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.TickPlacement
  static let _DefTicks = System.Windows.Controls.Slider.TicksProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DoubleCollection

  do setProps this

  new() = Slider(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Slider voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Slider voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AutoToolTipPlacement: System.Windows.Controls.Primitives.AutoToolTipPlacement voption
  member this.AutoToolTipPlacement with set x = this._AutoToolTipPlacement <- ValueSome x

  [<DefaultValue>] val mutable private _AutoToolTipPrecision: int voption
  member this.AutoToolTipPrecision with set x = this._AutoToolTipPrecision <- ValueSome x

  [<DefaultValue>] val mutable private _Delay: int voption
  member this.Delay with set x = this._Delay <- ValueSome x

  [<DefaultValue>] val mutable private _Interval: int voption
  member this.Interval with set x = this._Interval <- ValueSome x

  [<DefaultValue>] val mutable private _IsDirectionReversed: bool voption
  member this.IsDirectionReversed with set x = this._IsDirectionReversed <- ValueSome x

  [<DefaultValue>] val mutable private _IsMoveToPointEnabled: bool voption
  member this.IsMoveToPointEnabled with set x = this._IsMoveToPointEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsSelectionRangeEnabled: bool voption
  member this.IsSelectionRangeEnabled with set x = this._IsSelectionRangeEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsSnapToTickEnabled: bool voption
  member this.IsSnapToTickEnabled with set x = this._IsSnapToTickEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionEnd: float voption
  member this.SelectionEnd with set x = this._SelectionEnd <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionStart: float voption
  member this.SelectionStart with set x = this._SelectionStart <- ValueSome x

  [<DefaultValue>] val mutable private _TickFrequency: float voption
  member this.TickFrequency with set x = this._TickFrequency <- ValueSome x

  [<DefaultValue>] val mutable private _TickPlacement: System.Windows.Controls.Primitives.TickPlacement voption
  member this.TickPlacement with set x = this._TickPlacement <- ValueSome x

  [<DefaultValue>] val mutable private _Ticks: DoubleCollection voption
  member this.Ticks with set x = this._Ticks <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Slider> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Slider) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AutoToolTipPlacement |> ValueOption.iter (fun x -> v.AutoToolTipPlacement <- x)
    this._AutoToolTipPrecision |> ValueOption.iter (fun x -> v.AutoToolTipPrecision <- x)
    this._Delay |> ValueOption.iter (fun x -> v.Delay <- x)
    this._Interval |> ValueOption.iter (fun x -> v.Interval <- x)
    this._IsDirectionReversed |> ValueOption.iter (fun x -> v.IsDirectionReversed <- x)
    this._IsMoveToPointEnabled |> ValueOption.iter (fun x -> v.IsMoveToPointEnabled <- x)
    this._IsSelectionRangeEnabled |> ValueOption.iter (fun x -> v.IsSelectionRangeEnabled <- x)
    this._IsSnapToTickEnabled |> ValueOption.iter (fun x -> v.IsSnapToTickEnabled <- x)
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this._SelectionEnd |> ValueOption.iter (fun x -> v.SelectionEnd <- x)
    this._SelectionStart |> ValueOption.iter (fun x -> v.SelectionStart <- x)
    this._TickFrequency |> ValueOption.iter (fun x -> v.TickFrequency <- x)
    this._TickPlacement |> ValueOption.iter (fun x -> v.TickPlacement <- x)
    this._Ticks |> ValueOption.iter (fun x -> v.Ticks <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Slider, v: System.Windows.Controls.Slider) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAutoToolTipPlacement prev._AutoToolTipPlacement this._AutoToolTipPlacement id (fun x -> v.AutoToolTipPlacement <- x)
    updateValue _DefAutoToolTipPrecision prev._AutoToolTipPrecision this._AutoToolTipPrecision id (fun x -> v.AutoToolTipPrecision <- x)
    updateValue _DefDelay prev._Delay this._Delay id (fun x -> v.Delay <- x)
    updateValue _DefInterval prev._Interval this._Interval id (fun x -> v.Interval <- x)
    updateValue _DefIsDirectionReversed prev._IsDirectionReversed this._IsDirectionReversed id (fun x -> v.IsDirectionReversed <- x)
    updateValue _DefIsMoveToPointEnabled prev._IsMoveToPointEnabled this._IsMoveToPointEnabled id (fun x -> v.IsMoveToPointEnabled <- x)
    updateValue _DefIsSelectionRangeEnabled prev._IsSelectionRangeEnabled this._IsSelectionRangeEnabled id (fun x -> v.IsSelectionRangeEnabled <- x)
    updateValue _DefIsSnapToTickEnabled prev._IsSnapToTickEnabled this._IsSnapToTickEnabled id (fun x -> v.IsSnapToTickEnabled <- x)
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    updateValue _DefSelectionEnd prev._SelectionEnd this._SelectionEnd id (fun x -> v.SelectionEnd <- x)
    updateValue _DefSelectionStart prev._SelectionStart this._SelectionStart id (fun x -> v.SelectionStart <- x)
    updateValue _DefTickFrequency prev._TickFrequency this._TickFrequency id (fun x -> v.TickFrequency <- x)
    updateValue _DefTickPlacement prev._TickPlacement this._TickPlacement id (fun x -> v.TickPlacement <- x)
    updateValue _DefTicks prev._Ticks this._Ticks id (fun x -> v.Ticks <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Slider())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Slider as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ResizeGrip(setProps: ResizeGrip -> unit) as this =
  inherit Control()


  do setProps this

  new() = ResizeGrip(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.ResizeGrip voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.ResizeGrip voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.ResizeGrip> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.ResizeGrip) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ResizeGrip, v: System.Windows.Controls.Primitives.ResizeGrip) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.ResizeGrip())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ResizeGrip as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Separator(setProps: Separator -> unit) as this =
  inherit Control()


  do setProps this

  new() = Separator(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Separator voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Separator voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Separator> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Separator) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Separator, v: System.Windows.Controls.Separator) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Separator())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Separator as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type TextBoxBase() =
  inherit Control()

  static let _DefAcceptsReturn = System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturnProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefAcceptsTab = System.Windows.Controls.Primitives.TextBoxBase.AcceptsTabProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefAutoWordSelection = System.Windows.Controls.Primitives.TextBoxBase.AutoWordSelectionProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefCaretBrush = System.Windows.Controls.Primitives.TextBoxBase.CaretBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefHorizontalScrollBarVisibility = System.Windows.Controls.Primitives.TextBoxBase.HorizontalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ScrollBarVisibility
  static let _DefIsInactiveSelectionHighlightEnabled = System.Windows.Controls.Primitives.TextBoxBase.IsInactiveSelectionHighlightEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsReadOnly = System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsReadOnlyCaretVisible = System.Windows.Controls.Primitives.TextBoxBase.IsReadOnlyCaretVisibleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsUndoEnabled = System.Windows.Controls.Primitives.TextBoxBase.IsUndoEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSelectionBrush = System.Windows.Controls.Primitives.TextBoxBase.SelectionBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefSelectionOpacity = System.Windows.Controls.Primitives.TextBoxBase.SelectionOpacityProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionTextBrush = System.Windows.Controls.Primitives.TextBoxBase.SelectionTextBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefUndoLimit = System.Windows.Controls.Primitives.TextBoxBase.UndoLimitProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefVerticalScrollBarVisibility = System.Windows.Controls.Primitives.TextBoxBase.VerticalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.ScrollBarVisibility

  [<DefaultValue>] val mutable private _AcceptsReturn: bool voption
  member this.AcceptsReturn with set x = this._AcceptsReturn <- ValueSome x

  [<DefaultValue>] val mutable private _AcceptsTab: bool voption
  member this.AcceptsTab with set x = this._AcceptsTab <- ValueSome x

  [<DefaultValue>] val mutable private _AutoWordSelection: bool voption
  member this.AutoWordSelection with set x = this._AutoWordSelection <- ValueSome x

  [<DefaultValue>] val mutable private _CaretBrush: Brush voption
  member this.CaretBrush with set x = this._CaretBrush <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalScrollBarVisibility: System.Windows.Controls.ScrollBarVisibility voption
  member this.HorizontalScrollBarVisibility with set x = this._HorizontalScrollBarVisibility <- ValueSome x

  [<DefaultValue>] val mutable private _IsInactiveSelectionHighlightEnabled: bool voption
  member this.IsInactiveSelectionHighlightEnabled with set x = this._IsInactiveSelectionHighlightEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsReadOnly: bool voption
  member this.IsReadOnly with set x = this._IsReadOnly <- ValueSome x

  [<DefaultValue>] val mutable private _IsReadOnlyCaretVisible: bool voption
  member this.IsReadOnlyCaretVisible with set x = this._IsReadOnlyCaretVisible <- ValueSome x

  [<DefaultValue>] val mutable private _IsUndoEnabled: bool voption
  member this.IsUndoEnabled with set x = this._IsUndoEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionBrush: Brush voption
  member this.SelectionBrush with set x = this._SelectionBrush <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionOpacity: float voption
  member this.SelectionOpacity with set x = this._SelectionOpacity <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionTextBrush: Brush voption
  member this.SelectionTextBrush with set x = this._SelectionTextBrush <- ValueSome x

  [<DefaultValue>] val mutable private _UndoLimit: int voption
  member this.UndoLimit with set x = this._UndoLimit <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalScrollBarVisibility: System.Windows.Controls.ScrollBarVisibility voption
  member this.VerticalScrollBarVisibility with set x = this._VerticalScrollBarVisibility <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionChanged: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.SelectionChanged with set x = this._SelectionChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TextChanged: EventHandlerWrapper<System.Windows.Controls.TextChangedEventArgs> voption
  member this.TextChanged with set x = this._TextChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.TextBoxBase> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.TextBoxBase) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AcceptsReturn |> ValueOption.iter (fun x -> v.AcceptsReturn <- x)
    this._AcceptsTab |> ValueOption.iter (fun x -> v.AcceptsTab <- x)
    this._AutoWordSelection |> ValueOption.iter (fun x -> v.AutoWordSelection <- x)
    this._CaretBrush |> ValueOption.iter (fun x -> v.CaretBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._HorizontalScrollBarVisibility |> ValueOption.iter (fun x -> v.HorizontalScrollBarVisibility <- x)
    this._IsInactiveSelectionHighlightEnabled |> ValueOption.iter (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    this._IsReadOnly |> ValueOption.iter (fun x -> v.IsReadOnly <- x)
    this._IsReadOnlyCaretVisible |> ValueOption.iter (fun x -> v.IsReadOnlyCaretVisible <- x)
    this._IsUndoEnabled |> ValueOption.iter (fun x -> v.IsUndoEnabled <- x)
    this._SelectionBrush |> ValueOption.iter (fun x -> v.SelectionBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._SelectionOpacity |> ValueOption.iter (fun x -> v.SelectionOpacity <- x)
    this._SelectionTextBrush |> ValueOption.iter (fun x -> v.SelectionTextBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._UndoLimit |> ValueOption.iter (fun x -> v.UndoLimit <- x)
    this._VerticalScrollBarVisibility |> ValueOption.iter (fun x -> v.VerticalScrollBarVisibility <- x)
    this._SelectionChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionChanged.Subscribe x.Fn)
    this._TextChanged |> ValueOption.iter (fun x -> x.Subscription <- v.TextChanged.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextBoxBase, v: System.Windows.Controls.Primitives.TextBoxBase) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAcceptsReturn prev._AcceptsReturn this._AcceptsReturn id (fun x -> v.AcceptsReturn <- x)
    updateValue _DefAcceptsTab prev._AcceptsTab this._AcceptsTab id (fun x -> v.AcceptsTab <- x)
    updateValue _DefAutoWordSelection prev._AutoWordSelection this._AutoWordSelection id (fun x -> v.AutoWordSelection <- x)
    updateValue _DefCaretBrush prev._CaretBrush this._CaretBrush id (fun x -> v.CaretBrush <- x)
    updateValue _DefHorizontalScrollBarVisibility prev._HorizontalScrollBarVisibility this._HorizontalScrollBarVisibility id (fun x -> v.HorizontalScrollBarVisibility <- x)
    updateValue _DefIsInactiveSelectionHighlightEnabled prev._IsInactiveSelectionHighlightEnabled this._IsInactiveSelectionHighlightEnabled id (fun x -> v.IsInactiveSelectionHighlightEnabled <- x)
    updateValue _DefIsReadOnly prev._IsReadOnly this._IsReadOnly id (fun x -> v.IsReadOnly <- x)
    updateValue _DefIsReadOnlyCaretVisible prev._IsReadOnlyCaretVisible this._IsReadOnlyCaretVisible id (fun x -> v.IsReadOnlyCaretVisible <- x)
    updateValue _DefIsUndoEnabled prev._IsUndoEnabled this._IsUndoEnabled id (fun x -> v.IsUndoEnabled <- x)
    updateValue _DefSelectionBrush prev._SelectionBrush this._SelectionBrush id (fun x -> v.SelectionBrush <- x)
    updateValue _DefSelectionOpacity prev._SelectionOpacity this._SelectionOpacity id (fun x -> v.SelectionOpacity <- x)
    updateValue _DefSelectionTextBrush prev._SelectionTextBrush this._SelectionTextBrush id (fun x -> v.SelectionTextBrush <- x)
    updateValue _DefUndoLimit prev._UndoLimit this._UndoLimit id (fun x -> v.UndoLimit <- x)
    updateValue _DefVerticalScrollBarVisibility prev._VerticalScrollBarVisibility this._VerticalScrollBarVisibility id (fun x -> v.VerticalScrollBarVisibility <- x)
    updateFn prev._SelectionChanged this._SelectionChanged v.SelectionChanged
    updateFn prev._TextChanged this._TextChanged v.TextChanged
    this.SilenceEvents <- false


type RichTextBox(setProps: RichTextBox -> unit) as this =
  inherit TextBoxBase()

  static let _DefIsDocumentEnabled = System.Windows.Controls.RichTextBox.IsDocumentEnabledProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = RichTextBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.RichTextBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.RichTextBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CaretPosition: System.Windows.Documents.TextPointer voption
  member this.CaretPosition with set x = this._CaretPosition <- ValueSome x

  [<DefaultValue>] val mutable private _Document: FlowDocument voption
  member this.Document with set x = this._Document <- ValueSome x

  [<DefaultValue>] val mutable private _IsDocumentEnabled: bool voption
  member this.IsDocumentEnabled with set x = this._IsDocumentEnabled <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.RichTextBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.RichTextBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CaretPosition |> ValueOption.iter (fun x -> v.CaretPosition <- x)
    this._Document |> ValueOption.iter (fun x -> v.Document <- x.RenderNew () :?> System.Windows.Documents.FlowDocument)
    this._IsDocumentEnabled |> ValueOption.iter (fun x -> v.IsDocumentEnabled <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: RichTextBox, v: System.Windows.Controls.RichTextBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Documents.TextPointer> prev._CaretPosition this._CaretPosition id (fun x -> v.CaretPosition <- x)
    updateValue Unchecked.defaultof<System.Windows.Documents.FlowDocument> prev._Document this._Document id (fun x -> v.Document <- x)
    updateValue _DefIsDocumentEnabled prev._IsDocumentEnabled this._IsDocumentEnabled id (fun x -> v.IsDocumentEnabled <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.RichTextBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? RichTextBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TextBox(setProps: TextBox -> unit) as this =
  inherit TextBoxBase()

  static let _DefCharacterCasing = System.Windows.Controls.TextBox.CharacterCasingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.CharacterCasing
  static let _DefMaxLength = System.Windows.Controls.TextBox.MaxLengthProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefMaxLines = System.Windows.Controls.TextBox.MaxLinesProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefMinLines = System.Windows.Controls.TextBox.MinLinesProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefText = System.Windows.Controls.TextBox.TextProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefTextAlignment = System.Windows.Controls.TextBox.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment
  static let _DefTextDecorations = System.Windows.Controls.TextBox.TextDecorationsProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationCollection
  static let _DefTextWrapping = System.Windows.Controls.TextBox.TextWrappingProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextWrapping

  do setProps this

  new() = TextBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.TextBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.TextBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CaretIndex: int voption
  member this.CaretIndex with set x = this._CaretIndex <- ValueSome x

  [<DefaultValue>] val mutable private _CharacterCasing: System.Windows.Controls.CharacterCasing voption
  member this.CharacterCasing with set x = this._CharacterCasing <- ValueSome x

  [<DefaultValue>] val mutable private _MaxLength: int voption
  member this.MaxLength with set x = this._MaxLength <- ValueSome x

  [<DefaultValue>] val mutable private _MaxLines: int voption
  member this.MaxLines with set x = this._MaxLines <- ValueSome x

  [<DefaultValue>] val mutable private _MinLines: int voption
  member this.MinLines with set x = this._MinLines <- ValueSome x

  [<DefaultValue>] val mutable private _SelectedText: string voption
  member this.SelectedText with set x = this._SelectedText <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionLength: int voption
  member this.SelectionLength with set x = this._SelectionLength <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionStart: int voption
  member this.SelectionStart with set x = this._SelectionStart <- ValueSome x

  [<DefaultValue>] val mutable private _Text: string voption
  member this.Text with set x = this._Text <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _TextDecorations: TextDecorationCollection voption
  member this.TextDecorations with set x = this._TextDecorations <- ValueSome x

  [<DefaultValue>] val mutable private _TextWrapping: System.Windows.TextWrapping voption
  member this.TextWrapping with set x = this._TextWrapping <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.TextBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.TextBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CaretIndex |> ValueOption.iter (fun x -> v.CaretIndex <- x)
    this._CharacterCasing |> ValueOption.iter (fun x -> v.CharacterCasing <- x)
    this._MaxLength |> ValueOption.iter (fun x -> v.MaxLength <- x)
    this._MaxLines |> ValueOption.iter (fun x -> v.MaxLines <- x)
    this._MinLines |> ValueOption.iter (fun x -> v.MinLines <- x)
    this._SelectedText |> ValueOption.iter (fun x -> v.SelectedText <- x)
    this._SelectionLength |> ValueOption.iter (fun x -> v.SelectionLength <- x)
    this._SelectionStart |> ValueOption.iter (fun x -> v.SelectionStart <- x)
    this._Text |> ValueOption.iter (fun x -> v.Text <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._TextDecorations |> ValueOption.iter (fun x -> v.TextDecorations <- x.RenderNew () :?> System.Windows.TextDecorationCollection)
    this._TextWrapping |> ValueOption.iter (fun x -> v.TextWrapping <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextBox, v: System.Windows.Controls.TextBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<int> prev._CaretIndex this._CaretIndex id (fun x -> v.CaretIndex <- x)
    updateValue _DefCharacterCasing prev._CharacterCasing this._CharacterCasing id (fun x -> v.CharacterCasing <- x)
    updateValue _DefMaxLength prev._MaxLength this._MaxLength id (fun x -> v.MaxLength <- x)
    updateValue _DefMaxLines prev._MaxLines this._MaxLines id (fun x -> v.MaxLines <- x)
    updateValue _DefMinLines prev._MinLines this._MinLines id (fun x -> v.MinLines <- x)
    updateValue Unchecked.defaultof<string> prev._SelectedText this._SelectedText id (fun x -> v.SelectedText <- x)
    updateValue Unchecked.defaultof<int> prev._SelectionLength this._SelectionLength id (fun x -> v.SelectionLength <- x)
    updateValue Unchecked.defaultof<int> prev._SelectionStart this._SelectionStart id (fun x -> v.SelectionStart <- x)
    updateValue _DefText prev._Text this._Text id (fun x -> v.Text <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateValue _DefTextDecorations prev._TextDecorations this._TextDecorations id (fun x -> v.TextDecorations <- x)
    updateValue _DefTextWrapping prev._TextWrapping this._TextWrapping id (fun x -> v.TextWrapping <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.TextBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TextBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DatePickerTextBox(setProps: DatePickerTextBox -> unit) as this =
  inherit TextBox()


  do setProps this

  new() = DatePickerTextBox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.DatePickerTextBox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.DatePickerTextBox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.DatePickerTextBox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.DatePickerTextBox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DatePickerTextBox, v: System.Windows.Controls.Primitives.DatePickerTextBox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.DatePickerTextBox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DatePickerTextBox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Thumb(setProps: Thumb -> unit) as this =
  inherit Control()


  do setProps this

  new() = Thumb(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.Thumb voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.Thumb voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _DragCompleted: EventHandlerWrapper<System.Windows.Controls.Primitives.DragCompletedEventArgs> voption
  member this.DragCompleted with set x = this._DragCompleted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragDelta: EventHandlerWrapper<System.Windows.Controls.Primitives.DragDeltaEventArgs> voption
  member this.DragDelta with set x = this._DragDelta <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragStarted: EventHandlerWrapper<System.Windows.Controls.Primitives.DragStartedEventArgs> voption
  member this.DragStarted with set x = this._DragStarted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.Thumb> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.Thumb) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._DragCompleted |> ValueOption.iter (fun x -> x.Subscription <- v.DragCompleted.Subscribe x.Fn)
    this._DragDelta |> ValueOption.iter (fun x -> x.Subscription <- v.DragDelta.Subscribe x.Fn)
    this._DragStarted |> ValueOption.iter (fun x -> x.Subscription <- v.DragStarted.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Thumb, v: System.Windows.Controls.Primitives.Thumb) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateFn prev._DragCompleted this._DragCompleted v.DragCompleted
    updateFn prev._DragDelta this._DragDelta v.DragDelta
    updateFn prev._DragStarted this._DragStarted v.DragStarted
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.Thumb())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Thumb as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type GridSplitter(setProps: GridSplitter -> unit) as this =
  inherit Thumb()

  static let _DefDragIncrement = System.Windows.Controls.GridSplitter.DragIncrementProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefKeyboardIncrement = System.Windows.Controls.GridSplitter.KeyboardIncrementProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPreviewStyle = System.Windows.Controls.GridSplitter.PreviewStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Style
  static let _DefResizeBehavior = System.Windows.Controls.GridSplitter.ResizeBehaviorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.GridResizeBehavior
  static let _DefResizeDirection = System.Windows.Controls.GridSplitter.ResizeDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.GridResizeDirection
  static let _DefShowsPreview = System.Windows.Controls.GridSplitter.ShowsPreviewProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = GridSplitter(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.GridSplitter voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.GridSplitter voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _DragIncrement: float voption
  member this.DragIncrement with set x = this._DragIncrement <- ValueSome x

  [<DefaultValue>] val mutable private _KeyboardIncrement: float voption
  member this.KeyboardIncrement with set x = this._KeyboardIncrement <- ValueSome x

  [<DefaultValue>] val mutable private _PreviewStyle: System.Windows.Style voption
  member this.PreviewStyle with set x = this._PreviewStyle <- ValueSome x

  [<DefaultValue>] val mutable private _ResizeBehavior: System.Windows.Controls.GridResizeBehavior voption
  member this.ResizeBehavior with set x = this._ResizeBehavior <- ValueSome x

  [<DefaultValue>] val mutable private _ResizeDirection: System.Windows.Controls.GridResizeDirection voption
  member this.ResizeDirection with set x = this._ResizeDirection <- ValueSome x

  [<DefaultValue>] val mutable private _ShowsPreview: bool voption
  member this.ShowsPreview with set x = this._ShowsPreview <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.GridSplitter> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.GridSplitter) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._DragIncrement |> ValueOption.iter (fun x -> v.DragIncrement <- x)
    this._KeyboardIncrement |> ValueOption.iter (fun x -> v.KeyboardIncrement <- x)
    this._PreviewStyle |> ValueOption.iter (fun x -> v.PreviewStyle <- x)
    this._ResizeBehavior |> ValueOption.iter (fun x -> v.ResizeBehavior <- x)
    this._ResizeDirection |> ValueOption.iter (fun x -> v.ResizeDirection <- x)
    this._ShowsPreview |> ValueOption.iter (fun x -> v.ShowsPreview <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: GridSplitter, v: System.Windows.Controls.GridSplitter) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefDragIncrement prev._DragIncrement this._DragIncrement id (fun x -> v.DragIncrement <- x)
    updateValue _DefKeyboardIncrement prev._KeyboardIncrement this._KeyboardIncrement id (fun x -> v.KeyboardIncrement <- x)
    updateValue _DefPreviewStyle prev._PreviewStyle this._PreviewStyle id (fun x -> v.PreviewStyle <- x)
    updateValue _DefResizeBehavior prev._ResizeBehavior this._ResizeBehavior id (fun x -> v.ResizeBehavior <- x)
    updateValue _DefResizeDirection prev._ResizeDirection this._ResizeDirection id (fun x -> v.ResizeDirection <- x)
    updateValue _DefShowsPreview prev._ShowsPreview this._ShowsPreview id (fun x -> v.ShowsPreview <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.GridSplitter())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? GridSplitter as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Decorator(setProps: Decorator -> unit) as this =
  inherit FrameworkElement()


  do setProps this

  new() = Decorator(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Decorator voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Decorator voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Child: UIElement voption
  member this.Child with set x = this._Child <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Decorator> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Decorator) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Child |> ValueOption.iter (fun x -> v.Child <- x.RenderNew () :?> System.Windows.UIElement)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Decorator, v: System.Windows.Controls.Decorator) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.UIElement> prev._Child this._Child id (fun x -> v.Child <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Decorator())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Decorator as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type AdornerDecorator(setProps: AdornerDecorator -> unit) as this =
  inherit Decorator()


  do setProps this

  new() = AdornerDecorator(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.AdornerDecorator voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.AdornerDecorator voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Child: UIElement voption
  member this.Child with set x = this._Child <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.AdornerDecorator> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.AdornerDecorator) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Child |> ValueOption.iter (fun x -> v.Child <- x.RenderNew () :?> System.Windows.UIElement)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: AdornerDecorator, v: System.Windows.Documents.AdornerDecorator) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.UIElement> prev._Child this._Child id (fun x -> v.Child <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.AdornerDecorator())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? AdornerDecorator as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Border(setProps: Border -> unit) as this =
  inherit Decorator()

  static let _DefBackground = System.Windows.Controls.Border.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderBrush = System.Windows.Controls.Border.BorderBrushProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBorderThickness = System.Windows.Controls.Border.BorderThicknessProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefCornerRadius = System.Windows.Controls.Border.CornerRadiusProperty.DefaultMetadata.DefaultValue :?> System.Windows.CornerRadius
  static let _DefPadding = System.Windows.Controls.Border.PaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness

  do setProps this

  new() = Border(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Border voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Border voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _BorderBrush: Brush voption
  member this.BorderBrush with set x = this._BorderBrush <- ValueSome x

  [<DefaultValue>] val mutable private _BorderThickness: System.Windows.Thickness voption
  member this.BorderThickness with set x = this._BorderThickness <- ValueSome x

  [<DefaultValue>] val mutable private _CornerRadius: System.Windows.CornerRadius voption
  member this.CornerRadius with set x = this._CornerRadius <- ValueSome x

  [<DefaultValue>] val mutable private _Padding: System.Windows.Thickness voption
  member this.Padding with set x = this._Padding <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Border> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Border) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderBrush |> ValueOption.iter (fun x -> v.BorderBrush <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BorderThickness |> ValueOption.iter (fun x -> v.BorderThickness <- x)
    this._CornerRadius |> ValueOption.iter (fun x -> v.CornerRadius <- x)
    this._Padding |> ValueOption.iter (fun x -> v.Padding <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Border, v: System.Windows.Controls.Border) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefBorderBrush prev._BorderBrush this._BorderBrush id (fun x -> v.BorderBrush <- x)
    updateValue _DefBorderThickness prev._BorderThickness this._BorderThickness id (fun x -> v.BorderThickness <- x)
    updateValue _DefCornerRadius prev._CornerRadius this._CornerRadius id (fun x -> v.CornerRadius <- x)
    updateValue _DefPadding prev._Padding this._Padding id (fun x -> v.Padding <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Border())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Border as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type BulletDecorator(setProps: BulletDecorator -> unit) as this =
  inherit Decorator()

  static let _DefBackground = System.Windows.Controls.Primitives.BulletDecorator.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush

  do setProps this

  new() = BulletDecorator(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.BulletDecorator voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.BulletDecorator voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _Bullet: UIElement voption
  member this.Bullet with set x = this._Bullet <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.BulletDecorator> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.BulletDecorator) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Bullet |> ValueOption.iter (fun x -> v.Bullet <- x.RenderNew () :?> System.Windows.UIElement)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: BulletDecorator, v: System.Windows.Controls.Primitives.BulletDecorator) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue Unchecked.defaultof<System.Windows.UIElement> prev._Bullet this._Bullet id (fun x -> v.Bullet <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.BulletDecorator())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? BulletDecorator as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type InkPresenter(setProps: InkPresenter -> unit) as this =
  inherit Decorator()


  do setProps this

  new() = InkPresenter(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.InkPresenter voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.InkPresenter voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Strokes: System.Windows.Ink.Stroke list voption
  member this.Strokes with set x = this._Strokes <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.InkPresenter> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.InkPresenter) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Strokes |> ValueOption.iter (fun xs -> xs |> List.iter (v.Strokes.Add >> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: InkPresenter, v: System.Windows.Controls.InkPresenter) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Strokes this._Strokes v.Strokes
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.InkPresenter())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? InkPresenter as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Viewbox(setProps: Viewbox -> unit) as this =
  inherit Decorator()

  static let _DefStretch = System.Windows.Controls.Viewbox.StretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Stretch
  static let _DefStretchDirection = System.Windows.Controls.Viewbox.StretchDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.StretchDirection

  do setProps this

  new() = Viewbox(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Viewbox voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Viewbox voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Child: UIElement voption
  member this.Child with set x = this._Child <- ValueSome x

  [<DefaultValue>] val mutable private _Stretch: System.Windows.Media.Stretch voption
  member this.Stretch with set x = this._Stretch <- ValueSome x

  [<DefaultValue>] val mutable private _StretchDirection: System.Windows.Controls.StretchDirection voption
  member this.StretchDirection with set x = this._StretchDirection <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Viewbox> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Viewbox) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Child |> ValueOption.iter (fun x -> v.Child <- x.RenderNew () :?> System.Windows.UIElement)
    this._Stretch |> ValueOption.iter (fun x -> v.Stretch <- x)
    this._StretchDirection |> ValueOption.iter (fun x -> v.StretchDirection <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Viewbox, v: System.Windows.Controls.Viewbox) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.UIElement> prev._Child this._Child id (fun x -> v.Child <- x)
    updateValue _DefStretch prev._Stretch this._Stretch id (fun x -> v.Stretch <- x)
    updateValue _DefStretchDirection prev._StretchDirection this._StretchDirection id (fun x -> v.StretchDirection <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Viewbox())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Viewbox as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DocumentPageView(setProps: DocumentPageView -> unit) as this =
  inherit FrameworkElement()

  static let _DefPageNumber = System.Windows.Controls.Primitives.DocumentPageView.PageNumberProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefStretch = System.Windows.Controls.Primitives.DocumentPageView.StretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Stretch
  static let _DefStretchDirection = System.Windows.Controls.Primitives.DocumentPageView.StretchDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.StretchDirection

  do setProps this

  new() = DocumentPageView(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.DocumentPageView voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.DocumentPageView voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _DocumentPaginator: System.Windows.Documents.DocumentPaginator voption
  member this.DocumentPaginator with set x = this._DocumentPaginator <- ValueSome x

  [<DefaultValue>] val mutable private _PageNumber: int voption
  member this.PageNumber with set x = this._PageNumber <- ValueSome x

  [<DefaultValue>] val mutable private _Stretch: System.Windows.Media.Stretch voption
  member this.Stretch with set x = this._Stretch <- ValueSome x

  [<DefaultValue>] val mutable private _StretchDirection: System.Windows.Controls.StretchDirection voption
  member this.StretchDirection with set x = this._StretchDirection <- ValueSome x

  [<DefaultValue>] val mutable private _PageConnected: EventHandlerWrapper<System.EventArgs> voption
  member this.PageConnected with set x = this._PageConnected <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PageDisconnected: EventHandlerWrapper<System.EventArgs> voption
  member this.PageDisconnected with set x = this._PageDisconnected <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.DocumentPageView> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.DocumentPageView) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._DocumentPaginator |> ValueOption.iter (fun x -> v.DocumentPaginator <- x)
    this._PageNumber |> ValueOption.iter (fun x -> v.PageNumber <- x)
    this._Stretch |> ValueOption.iter (fun x -> v.Stretch <- x)
    this._StretchDirection |> ValueOption.iter (fun x -> v.StretchDirection <- x)
    this._PageConnected |> ValueOption.iter (fun x -> x.Subscription <- v.PageConnected.Subscribe x.Fn)
    this._PageDisconnected |> ValueOption.iter (fun x -> x.Subscription <- v.PageDisconnected.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DocumentPageView, v: System.Windows.Controls.Primitives.DocumentPageView) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Documents.DocumentPaginator> prev._DocumentPaginator this._DocumentPaginator id (fun x -> v.DocumentPaginator <- x)
    updateValue _DefPageNumber prev._PageNumber this._PageNumber id (fun x -> v.PageNumber <- x)
    updateValue _DefStretch prev._Stretch this._Stretch id (fun x -> v.Stretch <- x)
    updateValue _DefStretchDirection prev._StretchDirection this._StretchDirection id (fun x -> v.StretchDirection <- x)
    updateFn prev._PageConnected this._PageConnected v.PageConnected
    updateFn prev._PageDisconnected this._PageDisconnected v.PageDisconnected
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.DocumentPageView())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DocumentPageView as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DocumentReference(setProps: DocumentReference -> unit) as this =
  inherit FrameworkElement()

  static let _DefSource = System.Windows.Documents.DocumentReference.SourceProperty.DefaultMetadata.DefaultValue :?> System.Uri

  do setProps this

  new() = DocumentReference(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.DocumentReference voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.DocumentReference voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Source: System.Uri voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.DocumentReference> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.DocumentReference) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Source |> ValueOption.iter (fun x -> v.Source <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DocumentReference, v: System.Windows.Documents.DocumentReference) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.DocumentReference())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DocumentReference as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type FixedPage(setProps: FixedPage -> unit) as this =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Documents.FixedPage.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBleedBox = System.Windows.Documents.FixedPage.BleedBoxProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect
  static let _DefContentBox = System.Windows.Documents.FixedPage.ContentBoxProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect
  static let _DefPrintTicket = System.Windows.Documents.FixedPage.PrintTicketProperty.DefaultMetadata.DefaultValue :?> obj

  do setProps this

  new() = FixedPage(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.FixedPage voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.FixedPage voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _BleedBox: System.Windows.Rect voption
  member this.BleedBox with set x = this._BleedBox <- ValueSome x

  [<DefaultValue>] val mutable private _ContentBox: System.Windows.Rect voption
  member this.ContentBox with set x = this._ContentBox <- ValueSome x

  [<DefaultValue>] val mutable private _PrintTicket: obj voption
  member this.PrintTicket with set x = this._PrintTicket <- ValueSome x

  [<DefaultValue>] val mutable private _Children: UIElement list voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.FixedPage> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.FixedPage) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BleedBox |> ValueOption.iter (fun x -> v.BleedBox <- x)
    this._ContentBox |> ValueOption.iter (fun x -> v.ContentBox <- x)
    this._PrintTicket |> ValueOption.iter (fun x -> v.PrintTicket <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._Children |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.UIElement |> v.Children.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: FixedPage, v: System.Windows.Documents.FixedPage) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefBleedBox prev._BleedBox this._BleedBox id (fun x -> v.BleedBox <- x)
    updateValue _DefContentBox prev._ContentBox this._ContentBox id (fun x -> v.ContentBox <- x)
    updateValue _DefPrintTicket prev._PrintTicket this._PrintTicket id (fun x -> v.PrintTicket <- x)
    updateChildren prev._Children this._Children v.Children
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.FixedPage())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? FixedPage as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Glyphs(setProps: Glyphs -> unit) as this =
  inherit FrameworkElement()

  static let _DefBidiLevel = System.Windows.Documents.Glyphs.BidiLevelProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefCaretStops = System.Windows.Documents.Glyphs.CaretStopsProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefDeviceFontName = System.Windows.Documents.Glyphs.DeviceFontNameProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefFill = System.Windows.Documents.Glyphs.FillProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefFontRenderingEmSize = System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontUri = System.Windows.Documents.Glyphs.FontUriProperty.DefaultMetadata.DefaultValue :?> System.Uri
  static let _DefIndices = System.Windows.Documents.Glyphs.IndicesProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefIsSideways = System.Windows.Documents.Glyphs.IsSidewaysProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefOriginX = System.Windows.Documents.Glyphs.OriginXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOriginY = System.Windows.Documents.Glyphs.OriginYProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefStyleSimulations = System.Windows.Documents.Glyphs.StyleSimulationsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.StyleSimulations
  static let _DefUnicodeString = System.Windows.Documents.Glyphs.UnicodeStringProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = Glyphs(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.Glyphs voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.Glyphs voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _BidiLevel: int voption
  member this.BidiLevel with set x = this._BidiLevel <- ValueSome x

  [<DefaultValue>] val mutable private _CaretStops: string voption
  member this.CaretStops with set x = this._CaretStops <- ValueSome x

  [<DefaultValue>] val mutable private _DeviceFontName: string voption
  member this.DeviceFontName with set x = this._DeviceFontName <- ValueSome x

  [<DefaultValue>] val mutable private _Fill: Brush voption
  member this.Fill with set x = this._Fill <- ValueSome x

  [<DefaultValue>] val mutable private _FontRenderingEmSize: float voption
  member this.FontRenderingEmSize with set x = this._FontRenderingEmSize <- ValueSome x

  [<DefaultValue>] val mutable private _FontUri: System.Uri voption
  member this.FontUri with set x = this._FontUri <- ValueSome x

  [<DefaultValue>] val mutable private _Indices: string voption
  member this.Indices with set x = this._Indices <- ValueSome x

  [<DefaultValue>] val mutable private _IsSideways: bool voption
  member this.IsSideways with set x = this._IsSideways <- ValueSome x

  [<DefaultValue>] val mutable private _OriginX: float voption
  member this.OriginX with set x = this._OriginX <- ValueSome x

  [<DefaultValue>] val mutable private _OriginY: float voption
  member this.OriginY with set x = this._OriginY <- ValueSome x

  [<DefaultValue>] val mutable private _StyleSimulations: System.Windows.Media.StyleSimulations voption
  member this.StyleSimulations with set x = this._StyleSimulations <- ValueSome x

  [<DefaultValue>] val mutable private _UnicodeString: string voption
  member this.UnicodeString with set x = this._UnicodeString <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.Glyphs> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.Glyphs) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._BidiLevel |> ValueOption.iter (fun x -> v.BidiLevel <- x)
    this._CaretStops |> ValueOption.iter (fun x -> v.CaretStops <- x)
    this._DeviceFontName |> ValueOption.iter (fun x -> v.DeviceFontName <- x)
    this._Fill |> ValueOption.iter (fun x -> v.Fill <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._FontRenderingEmSize |> ValueOption.iter (fun x -> v.FontRenderingEmSize <- x)
    this._FontUri |> ValueOption.iter (fun x -> v.FontUri <- x)
    this._Indices |> ValueOption.iter (fun x -> v.Indices <- x)
    this._IsSideways |> ValueOption.iter (fun x -> v.IsSideways <- x)
    this._OriginX |> ValueOption.iter (fun x -> v.OriginX <- x)
    this._OriginY |> ValueOption.iter (fun x -> v.OriginY <- x)
    this._StyleSimulations |> ValueOption.iter (fun x -> v.StyleSimulations <- x)
    this._UnicodeString |> ValueOption.iter (fun x -> v.UnicodeString <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Glyphs, v: System.Windows.Documents.Glyphs) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBidiLevel prev._BidiLevel this._BidiLevel id (fun x -> v.BidiLevel <- x)
    updateValue _DefCaretStops prev._CaretStops this._CaretStops id (fun x -> v.CaretStops <- x)
    updateValue _DefDeviceFontName prev._DeviceFontName this._DeviceFontName id (fun x -> v.DeviceFontName <- x)
    updateValue _DefFill prev._Fill this._Fill id (fun x -> v.Fill <- x)
    updateValue _DefFontRenderingEmSize prev._FontRenderingEmSize this._FontRenderingEmSize id (fun x -> v.FontRenderingEmSize <- x)
    updateValue _DefFontUri prev._FontUri this._FontUri id (fun x -> v.FontUri <- x)
    updateValue _DefIndices prev._Indices this._Indices id (fun x -> v.Indices <- x)
    updateValue _DefIsSideways prev._IsSideways this._IsSideways id (fun x -> v.IsSideways <- x)
    updateValue _DefOriginX prev._OriginX this._OriginX id (fun x -> v.OriginX <- x)
    updateValue _DefOriginY prev._OriginY this._OriginY id (fun x -> v.OriginY <- x)
    updateValue _DefStyleSimulations prev._StyleSimulations this._StyleSimulations id (fun x -> v.StyleSimulations <- x)
    updateValue _DefUnicodeString prev._UnicodeString this._UnicodeString id (fun x -> v.UnicodeString <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.Glyphs())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Glyphs as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Image(setProps: Image -> unit) as this =
  inherit FrameworkElement()

  static let _DefSource = System.Windows.Controls.Image.SourceProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.ImageSource
  static let _DefStretch = System.Windows.Controls.Image.StretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Stretch
  static let _DefStretchDirection = System.Windows.Controls.Image.StretchDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.StretchDirection

  do setProps this

  new() = Image(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Image voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Image voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Source: ImageSource voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _Stretch: System.Windows.Media.Stretch voption
  member this.Stretch with set x = this._Stretch <- ValueSome x

  [<DefaultValue>] val mutable private _StretchDirection: System.Windows.Controls.StretchDirection voption
  member this.StretchDirection with set x = this._StretchDirection <- ValueSome x

  [<DefaultValue>] val mutable private _DpiChanged: EventHandlerWrapper<System.Windows.DpiChangedEventArgs> voption
  member this.DpiChanged with set x = this._DpiChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ImageFailed: EventHandlerWrapper<System.Windows.ExceptionRoutedEventArgs> voption
  member this.ImageFailed with set x = this._ImageFailed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Image> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Image) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Source |> ValueOption.iter (fun x -> v.Source <- x.RenderNew () :?> System.Windows.Media.ImageSource)
    this._Stretch |> ValueOption.iter (fun x -> v.Stretch <- x)
    this._StretchDirection |> ValueOption.iter (fun x -> v.StretchDirection <- x)
    this._DpiChanged |> ValueOption.iter (fun x -> x.Subscription <- v.DpiChanged.Subscribe x.Fn)
    this._ImageFailed |> ValueOption.iter (fun x -> x.Subscription <- v.ImageFailed.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Image, v: System.Windows.Controls.Image) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateValue _DefStretch prev._Stretch this._Stretch id (fun x -> v.Stretch <- x)
    updateValue _DefStretchDirection prev._StretchDirection this._StretchDirection id (fun x -> v.StretchDirection <- x)
    updateFn prev._DpiChanged this._DpiChanged v.DpiChanged
    updateFn prev._ImageFailed this._ImageFailed v.ImageFailed
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Image())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Image as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type InkCanvas(setProps: InkCanvas -> unit) as this =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Controls.InkCanvas.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefDefaultDrawingAttributes = System.Windows.Controls.InkCanvas.DefaultDrawingAttributesProperty.DefaultMetadata.DefaultValue :?> System.Windows.Ink.DrawingAttributes
  static let _DefEditingMode = System.Windows.Controls.InkCanvas.EditingModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.InkCanvasEditingMode
  static let _DefEditingModeInverted = System.Windows.Controls.InkCanvas.EditingModeInvertedProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.InkCanvasEditingMode

  do setProps this

  new() = InkCanvas(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.InkCanvas voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.InkCanvas voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _DefaultDrawingAttributes: System.Windows.Ink.DrawingAttributes voption
  member this.DefaultDrawingAttributes with set x = this._DefaultDrawingAttributes <- ValueSome x

  [<DefaultValue>] val mutable private _DefaultStylusPointDescription: System.Windows.Input.StylusPointDescription voption
  member this.DefaultStylusPointDescription with set x = this._DefaultStylusPointDescription <- ValueSome x

  [<DefaultValue>] val mutable private _EditingMode: System.Windows.Controls.InkCanvasEditingMode voption
  member this.EditingMode with set x = this._EditingMode <- ValueSome x

  [<DefaultValue>] val mutable private _EditingModeInverted: System.Windows.Controls.InkCanvasEditingMode voption
  member this.EditingModeInverted with set x = this._EditingModeInverted <- ValueSome x

  [<DefaultValue>] val mutable private _EraserShape: System.Windows.Ink.StylusShape voption
  member this.EraserShape with set x = this._EraserShape <- ValueSome x

  [<DefaultValue>] val mutable private _MoveEnabled: bool voption
  member this.MoveEnabled with set x = this._MoveEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _PreferredPasteFormats: System.Collections.Generic.IEnumerable<System.Windows.Controls.InkCanvasClipboardFormat> voption
  member this.PreferredPasteFormats with set x = this._PreferredPasteFormats <- ValueSome x

  [<DefaultValue>] val mutable private _ResizeEnabled: bool voption
  member this.ResizeEnabled with set x = this._ResizeEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _UseCustomCursor: bool voption
  member this.UseCustomCursor with set x = this._UseCustomCursor <- ValueSome x

  [<DefaultValue>] val mutable private _Children: UIElement list voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable private _Strokes: System.Windows.Ink.Stroke list voption
  member this.Strokes with set x = this._Strokes <- ValueSome x

  [<DefaultValue>] val mutable private _ActiveEditingModeChanged: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.ActiveEditingModeChanged with set x = this._ActiveEditingModeChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DefaultDrawingAttributesReplaced: EventHandlerWrapper<System.Windows.Ink.DrawingAttributesReplacedEventArgs> voption
  member this.DefaultDrawingAttributesReplaced with set x = this._DefaultDrawingAttributesReplaced <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _EditingModeChanged: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.EditingModeChanged with set x = this._EditingModeChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _EditingModeInvertedChanged: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.EditingModeInvertedChanged with set x = this._EditingModeInvertedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Gesture: EventHandlerWrapper<System.Windows.Controls.InkCanvasGestureEventArgs> voption
  member this.Gesture with set x = this._Gesture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectionChanged: EventHandlerWrapper<System.EventArgs> voption
  member this.SelectionChanged with set x = this._SelectionChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectionChanging: EventHandlerWrapper<System.Windows.Controls.InkCanvasSelectionChangingEventArgs> voption
  member this.SelectionChanging with set x = this._SelectionChanging <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectionMoved: EventHandlerWrapper<System.EventArgs> voption
  member this.SelectionMoved with set x = this._SelectionMoved <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectionMoving: EventHandlerWrapper<System.Windows.Controls.InkCanvasSelectionEditingEventArgs> voption
  member this.SelectionMoving with set x = this._SelectionMoving <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectionResized: EventHandlerWrapper<System.EventArgs> voption
  member this.SelectionResized with set x = this._SelectionResized <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _SelectionResizing: EventHandlerWrapper<System.Windows.Controls.InkCanvasSelectionEditingEventArgs> voption
  member this.SelectionResizing with set x = this._SelectionResizing <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StrokeCollected: EventHandlerWrapper<System.Windows.Controls.InkCanvasStrokeCollectedEventArgs> voption
  member this.StrokeCollected with set x = this._StrokeCollected <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StrokeErased: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.StrokeErased with set x = this._StrokeErased <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StrokeErasing: EventHandlerWrapper<System.Windows.Controls.InkCanvasStrokeErasingEventArgs> voption
  member this.StrokeErasing with set x = this._StrokeErasing <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StrokesReplaced: EventHandlerWrapper<System.Windows.Controls.InkCanvasStrokesReplacedEventArgs> voption
  member this.StrokesReplaced with set x = this._StrokesReplaced <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.InkCanvas> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.InkCanvas) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._DefaultDrawingAttributes |> ValueOption.iter (fun x -> v.DefaultDrawingAttributes <- x)
    this._DefaultStylusPointDescription |> ValueOption.iter (fun x -> v.DefaultStylusPointDescription <- x)
    this._EditingMode |> ValueOption.iter (fun x -> v.EditingMode <- x)
    this._EditingModeInverted |> ValueOption.iter (fun x -> v.EditingModeInverted <- x)
    this._EraserShape |> ValueOption.iter (fun x -> v.EraserShape <- x)
    this._MoveEnabled |> ValueOption.iter (fun x -> v.MoveEnabled <- x)
    this._PreferredPasteFormats |> ValueOption.iter (fun x -> v.PreferredPasteFormats <- x)
    this._ResizeEnabled |> ValueOption.iter (fun x -> v.ResizeEnabled <- x)
    this._UseCustomCursor |> ValueOption.iter (fun x -> v.UseCustomCursor <- x)
    this._Children |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.UIElement |> v.Children.Add |> ignore))
    this._Strokes |> ValueOption.iter (fun xs -> xs |> List.iter (v.Strokes.Add >> ignore))
    this._ActiveEditingModeChanged |> ValueOption.iter (fun x -> x.Subscription <- v.ActiveEditingModeChanged.Subscribe x.Fn)
    this._DefaultDrawingAttributesReplaced |> ValueOption.iter (fun x -> x.Subscription <- v.DefaultDrawingAttributesReplaced.Subscribe x.Fn)
    this._EditingModeChanged |> ValueOption.iter (fun x -> x.Subscription <- v.EditingModeChanged.Subscribe x.Fn)
    this._EditingModeInvertedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.EditingModeInvertedChanged.Subscribe x.Fn)
    this._Gesture |> ValueOption.iter (fun x -> x.Subscription <- v.Gesture.Subscribe x.Fn)
    this._SelectionChanged |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionChanged.Subscribe x.Fn)
    this._SelectionChanging |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionChanging.Subscribe x.Fn)
    this._SelectionMoved |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionMoved.Subscribe x.Fn)
    this._SelectionMoving |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionMoving.Subscribe x.Fn)
    this._SelectionResized |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionResized.Subscribe x.Fn)
    this._SelectionResizing |> ValueOption.iter (fun x -> x.Subscription <- v.SelectionResizing.Subscribe x.Fn)
    this._StrokeCollected |> ValueOption.iter (fun x -> x.Subscription <- v.StrokeCollected.Subscribe x.Fn)
    this._StrokeErased |> ValueOption.iter (fun x -> x.Subscription <- v.StrokeErased.Subscribe x.Fn)
    this._StrokeErasing |> ValueOption.iter (fun x -> x.Subscription <- v.StrokeErasing.Subscribe x.Fn)
    this._StrokesReplaced |> ValueOption.iter (fun x -> x.Subscription <- v.StrokesReplaced.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: InkCanvas, v: System.Windows.Controls.InkCanvas) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefDefaultDrawingAttributes prev._DefaultDrawingAttributes this._DefaultDrawingAttributes id (fun x -> v.DefaultDrawingAttributes <- x)
    updateValue Unchecked.defaultof<System.Windows.Input.StylusPointDescription> prev._DefaultStylusPointDescription this._DefaultStylusPointDescription id (fun x -> v.DefaultStylusPointDescription <- x)
    updateValue _DefEditingMode prev._EditingMode this._EditingMode id (fun x -> v.EditingMode <- x)
    updateValue _DefEditingModeInverted prev._EditingModeInverted this._EditingModeInverted id (fun x -> v.EditingModeInverted <- x)
    updateValue Unchecked.defaultof<System.Windows.Ink.StylusShape> prev._EraserShape this._EraserShape id (fun x -> v.EraserShape <- x)
    updateValue Unchecked.defaultof<bool> prev._MoveEnabled this._MoveEnabled id (fun x -> v.MoveEnabled <- x)
    updateValue Unchecked.defaultof<System.Collections.Generic.IEnumerable<System.Windows.Controls.InkCanvasClipboardFormat>> prev._PreferredPasteFormats this._PreferredPasteFormats id (fun x -> v.PreferredPasteFormats <- x)
    updateValue Unchecked.defaultof<bool> prev._ResizeEnabled this._ResizeEnabled id (fun x -> v.ResizeEnabled <- x)
    updateValue Unchecked.defaultof<bool> prev._UseCustomCursor this._UseCustomCursor id (fun x -> v.UseCustomCursor <- x)
    updateChildren prev._Children this._Children v.Children
    updateChildren prev._Strokes this._Strokes v.Strokes
    updateFn prev._ActiveEditingModeChanged this._ActiveEditingModeChanged v.ActiveEditingModeChanged
    updateFn prev._DefaultDrawingAttributesReplaced this._DefaultDrawingAttributesReplaced v.DefaultDrawingAttributesReplaced
    updateFn prev._EditingModeChanged this._EditingModeChanged v.EditingModeChanged
    updateFn prev._EditingModeInvertedChanged this._EditingModeInvertedChanged v.EditingModeInvertedChanged
    updateFn prev._Gesture this._Gesture v.Gesture
    updateFn prev._SelectionChanged this._SelectionChanged v.SelectionChanged
    updateFn prev._SelectionChanging this._SelectionChanging v.SelectionChanging
    updateFn prev._SelectionMoved this._SelectionMoved v.SelectionMoved
    updateFn prev._SelectionMoving this._SelectionMoving v.SelectionMoving
    updateFn prev._SelectionResized this._SelectionResized v.SelectionResized
    updateFn prev._SelectionResizing this._SelectionResizing v.SelectionResizing
    updateFn prev._StrokeCollected this._StrokeCollected v.StrokeCollected
    updateFn prev._StrokeErased this._StrokeErased v.StrokeErased
    updateFn prev._StrokeErasing this._StrokeErasing v.StrokeErasing
    updateFn prev._StrokesReplaced this._StrokesReplaced v.StrokesReplaced
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.InkCanvas())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? InkCanvas as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type MediaElement(setProps: MediaElement -> unit) as this =
  inherit FrameworkElement()

  static let _DefBalance = System.Windows.Controls.MediaElement.BalanceProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefIsMuted = System.Windows.Controls.MediaElement.IsMutedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefLoadedBehavior = System.Windows.Controls.MediaElement.LoadedBehaviorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.MediaState
  static let _DefScrubbingEnabled = System.Windows.Controls.MediaElement.ScrubbingEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefSource = System.Windows.Controls.MediaElement.SourceProperty.DefaultMetadata.DefaultValue :?> System.Uri
  static let _DefStretch = System.Windows.Controls.MediaElement.StretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Stretch
  static let _DefStretchDirection = System.Windows.Controls.MediaElement.StretchDirectionProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.StretchDirection
  static let _DefUnloadedBehavior = System.Windows.Controls.MediaElement.UnloadedBehaviorProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.MediaState
  static let _DefVolume = System.Windows.Controls.MediaElement.VolumeProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = MediaElement(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.MediaElement voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.MediaElement voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Balance: float voption
  member this.Balance with set x = this._Balance <- ValueSome x

  [<DefaultValue>] val mutable private _Clock: System.Windows.Media.MediaClock voption
  member this.Clock with set x = this._Clock <- ValueSome x

  [<DefaultValue>] val mutable private _IsMuted: bool voption
  member this.IsMuted with set x = this._IsMuted <- ValueSome x

  [<DefaultValue>] val mutable private _LoadedBehavior: System.Windows.Controls.MediaState voption
  member this.LoadedBehavior with set x = this._LoadedBehavior <- ValueSome x

  [<DefaultValue>] val mutable private _Position: System.TimeSpan voption
  member this.Position with set x = this._Position <- ValueSome x

  [<DefaultValue>] val mutable private _ScrubbingEnabled: bool voption
  member this.ScrubbingEnabled with set x = this._ScrubbingEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _Source: System.Uri voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _SpeedRatio: float voption
  member this.SpeedRatio with set x = this._SpeedRatio <- ValueSome x

  [<DefaultValue>] val mutable private _Stretch: System.Windows.Media.Stretch voption
  member this.Stretch with set x = this._Stretch <- ValueSome x

  [<DefaultValue>] val mutable private _StretchDirection: System.Windows.Controls.StretchDirection voption
  member this.StretchDirection with set x = this._StretchDirection <- ValueSome x

  [<DefaultValue>] val mutable private _UnloadedBehavior: System.Windows.Controls.MediaState voption
  member this.UnloadedBehavior with set x = this._UnloadedBehavior <- ValueSome x

  [<DefaultValue>] val mutable private _Volume: float voption
  member this.Volume with set x = this._Volume <- ValueSome x

  [<DefaultValue>] val mutable private _BufferingEnded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.BufferingEnded with set x = this._BufferingEnded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _BufferingStarted: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.BufferingStarted with set x = this._BufferingStarted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MediaEnded: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.MediaEnded with set x = this._MediaEnded <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MediaFailed: EventHandlerWrapper<System.Windows.ExceptionRoutedEventArgs> voption
  member this.MediaFailed with set x = this._MediaFailed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MediaOpened: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.MediaOpened with set x = this._MediaOpened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _ScriptCommand: EventHandlerWrapper<System.Windows.MediaScriptCommandRoutedEventArgs> voption
  member this.ScriptCommand with set x = this._ScriptCommand <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.MediaElement> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.MediaElement) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Balance |> ValueOption.iter (fun x -> v.Balance <- x)
    this._Clock |> ValueOption.iter (fun x -> v.Clock <- x)
    this._IsMuted |> ValueOption.iter (fun x -> v.IsMuted <- x)
    this._LoadedBehavior |> ValueOption.iter (fun x -> v.LoadedBehavior <- x)
    this._Position |> ValueOption.iter (fun x -> v.Position <- x)
    this._ScrubbingEnabled |> ValueOption.iter (fun x -> v.ScrubbingEnabled <- x)
    this._Source |> ValueOption.iter (fun x -> v.Source <- x)
    this._SpeedRatio |> ValueOption.iter (fun x -> v.SpeedRatio <- x)
    this._Stretch |> ValueOption.iter (fun x -> v.Stretch <- x)
    this._StretchDirection |> ValueOption.iter (fun x -> v.StretchDirection <- x)
    this._UnloadedBehavior |> ValueOption.iter (fun x -> v.UnloadedBehavior <- x)
    this._Volume |> ValueOption.iter (fun x -> v.Volume <- x)
    this._BufferingEnded |> ValueOption.iter (fun x -> x.Subscription <- v.BufferingEnded.Subscribe x.Fn)
    this._BufferingStarted |> ValueOption.iter (fun x -> x.Subscription <- v.BufferingStarted.Subscribe x.Fn)
    this._MediaEnded |> ValueOption.iter (fun x -> x.Subscription <- v.MediaEnded.Subscribe x.Fn)
    this._MediaFailed |> ValueOption.iter (fun x -> x.Subscription <- v.MediaFailed.Subscribe x.Fn)
    this._MediaOpened |> ValueOption.iter (fun x -> x.Subscription <- v.MediaOpened.Subscribe x.Fn)
    this._ScriptCommand |> ValueOption.iter (fun x -> x.Subscription <- v.ScriptCommand.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: MediaElement, v: System.Windows.Controls.MediaElement) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBalance prev._Balance this._Balance id (fun x -> v.Balance <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.MediaClock> prev._Clock this._Clock id (fun x -> v.Clock <- x)
    updateValue _DefIsMuted prev._IsMuted this._IsMuted id (fun x -> v.IsMuted <- x)
    updateValue _DefLoadedBehavior prev._LoadedBehavior this._LoadedBehavior id (fun x -> v.LoadedBehavior <- x)
    updateValue Unchecked.defaultof<System.TimeSpan> prev._Position this._Position id (fun x -> v.Position <- x)
    updateValue _DefScrubbingEnabled prev._ScrubbingEnabled this._ScrubbingEnabled id (fun x -> v.ScrubbingEnabled <- x)
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateValue Unchecked.defaultof<float> prev._SpeedRatio this._SpeedRatio id (fun x -> v.SpeedRatio <- x)
    updateValue _DefStretch prev._Stretch this._Stretch id (fun x -> v.Stretch <- x)
    updateValue _DefStretchDirection prev._StretchDirection this._StretchDirection id (fun x -> v.StretchDirection <- x)
    updateValue _DefUnloadedBehavior prev._UnloadedBehavior this._UnloadedBehavior id (fun x -> v.UnloadedBehavior <- x)
    updateValue _DefVolume prev._Volume this._Volume id (fun x -> v.Volume <- x)
    updateFn prev._BufferingEnded this._BufferingEnded v.BufferingEnded
    updateFn prev._BufferingStarted this._BufferingStarted v.BufferingStarted
    updateFn prev._MediaEnded this._MediaEnded v.MediaEnded
    updateFn prev._MediaFailed this._MediaFailed v.MediaFailed
    updateFn prev._MediaOpened this._MediaOpened v.MediaOpened
    updateFn prev._ScriptCommand this._ScriptCommand v.ScriptCommand
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.MediaElement())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? MediaElement as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Page(setProps: Page -> unit) as this =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Controls.Page.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefContent = System.Windows.Controls.Page.ContentProperty.DefaultMetadata.DefaultValue :?> obj
  static let _DefFontFamily = System.Windows.Controls.Page.FontFamilyProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FontFamily
  static let _DefFontSize = System.Windows.Controls.Page.FontSizeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefForeground = System.Windows.Controls.Page.ForegroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefKeepAlive = System.Windows.Controls.Page.KeepAliveProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefTitle = System.Windows.Controls.Page.TitleProperty.DefaultMetadata.DefaultValue :?> string

  do setProps this

  new() = Page(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Page voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Page voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _Content: obj voption
  member this.Content with set x = this._Content <- ValueSome x

  [<DefaultValue>] val mutable private _FontFamily: System.Windows.Media.FontFamily voption
  member this.FontFamily with set x = this._FontFamily <- ValueSome x

  [<DefaultValue>] val mutable private _FontSize: float voption
  member this.FontSize with set x = this._FontSize <- ValueSome x

  [<DefaultValue>] val mutable private _Foreground: Brush voption
  member this.Foreground with set x = this._Foreground <- ValueSome x

  [<DefaultValue>] val mutable private _KeepAlive: bool voption
  member this.KeepAlive with set x = this._KeepAlive <- ValueSome x

  [<DefaultValue>] val mutable private _ShowsNavigationUI: bool voption
  member this.ShowsNavigationUI with set x = this._ShowsNavigationUI <- ValueSome x

  [<DefaultValue>] val mutable private _Title: string voption
  member this.Title with set x = this._Title <- ValueSome x

  [<DefaultValue>] val mutable private _WindowHeight: float voption
  member this.WindowHeight with set x = this._WindowHeight <- ValueSome x

  [<DefaultValue>] val mutable private _WindowTitle: string voption
  member this.WindowTitle with set x = this._WindowTitle <- ValueSome x

  [<DefaultValue>] val mutable private _WindowWidth: float voption
  member this.WindowWidth with set x = this._WindowWidth <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Page> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Page) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Content |> ValueOption.iter (fun x -> v.Content <- (match x with :? Node as n -> n.RenderNew () |> box | _ -> x))
    this._FontFamily |> ValueOption.iter (fun x -> v.FontFamily <- x)
    this._FontSize |> ValueOption.iter (fun x -> v.FontSize <- x)
    this._Foreground |> ValueOption.iter (fun x -> v.Foreground <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._KeepAlive |> ValueOption.iter (fun x -> v.KeepAlive <- x)
    this._ShowsNavigationUI |> ValueOption.iter (fun x -> v.ShowsNavigationUI <- x)
    this._Title |> ValueOption.iter (fun x -> v.Title <- x)
    this._WindowHeight |> ValueOption.iter (fun x -> v.WindowHeight <- x)
    this._WindowTitle |> ValueOption.iter (fun x -> v.WindowTitle <- x)
    this._WindowWidth |> ValueOption.iter (fun x -> v.WindowWidth <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Page, v: System.Windows.Controls.Page) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefContent prev._Content this._Content id (fun x -> v.Content <- x)
    updateValue _DefFontFamily prev._FontFamily this._FontFamily id (fun x -> v.FontFamily <- x)
    updateValue _DefFontSize prev._FontSize this._FontSize id (fun x -> v.FontSize <- x)
    updateValue _DefForeground prev._Foreground this._Foreground id (fun x -> v.Foreground <- x)
    updateValue _DefKeepAlive prev._KeepAlive this._KeepAlive id (fun x -> v.KeepAlive <- x)
    updateValue Unchecked.defaultof<bool> prev._ShowsNavigationUI this._ShowsNavigationUI id (fun x -> v.ShowsNavigationUI <- x)
    updateValue _DefTitle prev._Title this._Title id (fun x -> v.Title <- x)
    updateValue Unchecked.defaultof<float> prev._WindowHeight this._WindowHeight id (fun x -> v.WindowHeight <- x)
    updateValue Unchecked.defaultof<string> prev._WindowTitle this._WindowTitle id (fun x -> v.WindowTitle <- x)
    updateValue Unchecked.defaultof<float> prev._WindowWidth this._WindowWidth id (fun x -> v.WindowWidth <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Page())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Page as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type PageContent(setProps: PageContent -> unit) as this =
  inherit FrameworkElement()

  static let _DefSource = System.Windows.Documents.PageContent.SourceProperty.DefaultMetadata.DefaultValue :?> System.Uri

  do setProps this

  new() = PageContent(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Documents.PageContent voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Documents.PageContent voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Child: FixedPage voption
  member this.Child with set x = this._Child <- ValueSome x

  [<DefaultValue>] val mutable private _Source: System.Uri voption
  member this.Source with set x = this._Source <- ValueSome x

  [<DefaultValue>] val mutable private _LinkTargets: System.Windows.Documents.LinkTarget list voption
  member this.LinkTargets with set x = this._LinkTargets <- ValueSome x

  [<DefaultValue>] val mutable private _GetPageRootCompleted: EventHandlerWrapper<System.Windows.Documents.GetPageRootCompletedEventArgs> voption
  member this.GetPageRootCompleted with set x = this._GetPageRootCompleted <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Documents.PageContent> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Documents.PageContent) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Child |> ValueOption.iter (fun x -> v.Child <- x.RenderNew () :?> System.Windows.Documents.FixedPage)
    this._Source |> ValueOption.iter (fun x -> v.Source <- x)
    this._LinkTargets |> ValueOption.iter (fun xs -> xs |> List.iter (v.LinkTargets.Add >> ignore))
    this._GetPageRootCompleted |> ValueOption.iter (fun x -> x.Subscription <- v.GetPageRootCompleted.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: PageContent, v: System.Windows.Documents.PageContent) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Documents.FixedPage> prev._Child this._Child id (fun x -> v.Child <- x)
    updateValue _DefSource prev._Source this._Source id (fun x -> v.Source <- x)
    updateChildren prev._LinkTargets this._LinkTargets v.LinkTargets
    updateFn prev._GetPageRootCompleted this._GetPageRootCompleted v.GetPageRootCompleted
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Documents.PageContent())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? PageContent as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Panel() =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Controls.Panel.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefIsItemsHost = System.Windows.Controls.Panel.IsItemsHostProperty.DefaultMetadata.DefaultValue :?> bool

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _IsItemsHost: bool voption
  member this.IsItemsHost with set x = this._IsItemsHost <- ValueSome x

  [<DefaultValue>] val mutable private _Children: UIElement list voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Panel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Panel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._IsItemsHost |> ValueOption.iter (fun x -> v.IsItemsHost <- x)
    this._Children |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.UIElement |> v.Children.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Panel, v: System.Windows.Controls.Panel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefIsItemsHost prev._IsItemsHost this._IsItemsHost id (fun x -> v.IsItemsHost <- x)
    updateChildren prev._Children this._Children v.Children
    this.SilenceEvents <- false


type Canvas(setProps: Canvas -> unit) as this =
  inherit Panel()


  do setProps this

  new() = Canvas(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Canvas voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Canvas voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Canvas> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Canvas) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Canvas, v: System.Windows.Controls.Canvas) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Canvas())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Canvas as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type DockPanel(setProps: DockPanel -> unit) as this =
  inherit Panel()

  static let _DefLastChildFill = System.Windows.Controls.DockPanel.LastChildFillProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = DockPanel(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.DockPanel voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.DockPanel voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _LastChildFill: bool voption
  member this.LastChildFill with set x = this._LastChildFill <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.DockPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.DockPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._LastChildFill |> ValueOption.iter (fun x -> v.LastChildFill <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: DockPanel, v: System.Windows.Controls.DockPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefLastChildFill prev._LastChildFill this._LastChildFill id (fun x -> v.LastChildFill <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.DockPanel())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? DockPanel as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Grid(setProps: Grid -> unit) as this =
  inherit Panel()

  static let _DefShowGridLines = System.Windows.Controls.Grid.ShowGridLinesProperty.DefaultMetadata.DefaultValue :?> bool

  do setProps this

  new() = Grid(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Grid voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Grid voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ShowGridLines: bool voption
  member this.ShowGridLines with set x = this._ShowGridLines <- ValueSome x

  [<DefaultValue>] val mutable private _ColumnDefinitions: ColumnDefinition list voption
  member this.ColumnDefinitions with set x = this._ColumnDefinitions <- ValueSome x

  [<DefaultValue>] val mutable private _RowDefinitions: RowDefinition list voption
  member this.RowDefinitions with set x = this._RowDefinitions <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Grid> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Grid) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ShowGridLines |> ValueOption.iter (fun x -> v.ShowGridLines <- x)
    this._ColumnDefinitions |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Controls.ColumnDefinition |> v.ColumnDefinitions.Add |> ignore))
    this._RowDefinitions |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Controls.RowDefinition |> v.RowDefinitions.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Grid, v: System.Windows.Controls.Grid) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefShowGridLines prev._ShowGridLines this._ShowGridLines id (fun x -> v.ShowGridLines <- x)
    updateChildren prev._ColumnDefinitions this._ColumnDefinitions v.ColumnDefinitions
    updateChildren prev._RowDefinitions this._RowDefinitions v.RowDefinitions
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Grid())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Grid as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type SelectiveScrollingGrid(setProps: SelectiveScrollingGrid -> unit) as this =
  inherit Grid()


  do setProps this

  new() = SelectiveScrollingGrid(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.SelectiveScrollingGrid voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.SelectiveScrollingGrid voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.SelectiveScrollingGrid> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.SelectiveScrollingGrid) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: SelectiveScrollingGrid, v: System.Windows.Controls.Primitives.SelectiveScrollingGrid) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.SelectiveScrollingGrid())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? SelectiveScrollingGrid as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type StackPanel(setProps: StackPanel -> unit) as this =
  inherit Panel()

  static let _DefOrientation = System.Windows.Controls.StackPanel.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation

  do setProps this

  new() = StackPanel(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.StackPanel voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.StackPanel voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CanHorizontallyScroll: bool voption
  member this.CanHorizontallyScroll with set x = this._CanHorizontallyScroll <- ValueSome x

  [<DefaultValue>] val mutable private _CanVerticallyScroll: bool voption
  member this.CanVerticallyScroll with set x = this._CanVerticallyScroll <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable private _ScrollOwner: ScrollViewer voption
  member this.ScrollOwner with set x = this._ScrollOwner <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.StackPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.StackPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CanHorizontallyScroll |> ValueOption.iter (fun x -> v.CanHorizontallyScroll <- x)
    this._CanVerticallyScroll |> ValueOption.iter (fun x -> v.CanVerticallyScroll <- x)
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this._ScrollOwner |> ValueOption.iter (fun x -> v.ScrollOwner <- x.RenderNew () :?> System.Windows.Controls.ScrollViewer)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: StackPanel, v: System.Windows.Controls.StackPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._CanHorizontallyScroll this._CanHorizontallyScroll id (fun x -> v.CanHorizontallyScroll <- x)
    updateValue Unchecked.defaultof<bool> prev._CanVerticallyScroll this._CanVerticallyScroll id (fun x -> v.CanVerticallyScroll <- x)
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    updateValue Unchecked.defaultof<System.Windows.Controls.ScrollViewer> prev._ScrollOwner this._ScrollOwner id (fun x -> v.ScrollOwner <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.StackPanel())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? StackPanel as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ToolBarPanel(setProps: ToolBarPanel -> unit) as this =
  inherit StackPanel()


  do setProps this

  new() = ToolBarPanel(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.ToolBarPanel voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.ToolBarPanel voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.ToolBarPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.ToolBarPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ToolBarPanel, v: System.Windows.Controls.Primitives.ToolBarPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.ToolBarPanel())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ToolBarPanel as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TabPanel(setProps: TabPanel -> unit) as this =
  inherit Panel()


  do setProps this

  new() = TabPanel(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.TabPanel voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.TabPanel voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.TabPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.TabPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TabPanel, v: System.Windows.Controls.Primitives.TabPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.TabPanel())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TabPanel as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ToolBarOverflowPanel(setProps: ToolBarOverflowPanel -> unit) as this =
  inherit Panel()

  static let _DefWrapWidth = System.Windows.Controls.Primitives.ToolBarOverflowPanel.WrapWidthProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = ToolBarOverflowPanel(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.ToolBarOverflowPanel voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.ToolBarOverflowPanel voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _WrapWidth: float voption
  member this.WrapWidth with set x = this._WrapWidth <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.ToolBarOverflowPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.ToolBarOverflowPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._WrapWidth |> ValueOption.iter (fun x -> v.WrapWidth <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ToolBarOverflowPanel, v: System.Windows.Controls.Primitives.ToolBarOverflowPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefWrapWidth prev._WrapWidth this._WrapWidth id (fun x -> v.WrapWidth <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.ToolBarOverflowPanel())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ToolBarOverflowPanel as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type UniformGrid(setProps: UniformGrid -> unit) as this =
  inherit Panel()

  static let _DefColumns = System.Windows.Controls.Primitives.UniformGrid.ColumnsProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefFirstColumn = System.Windows.Controls.Primitives.UniformGrid.FirstColumnProperty.DefaultMetadata.DefaultValue :?> int
  static let _DefRows = System.Windows.Controls.Primitives.UniformGrid.RowsProperty.DefaultMetadata.DefaultValue :?> int

  do setProps this

  new() = UniformGrid(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.UniformGrid voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.UniformGrid voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Columns: int voption
  member this.Columns with set x = this._Columns <- ValueSome x

  [<DefaultValue>] val mutable private _FirstColumn: int voption
  member this.FirstColumn with set x = this._FirstColumn <- ValueSome x

  [<DefaultValue>] val mutable private _Rows: int voption
  member this.Rows with set x = this._Rows <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.UniformGrid> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.UniformGrid) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Columns |> ValueOption.iter (fun x -> v.Columns <- x)
    this._FirstColumn |> ValueOption.iter (fun x -> v.FirstColumn <- x)
    this._Rows |> ValueOption.iter (fun x -> v.Rows <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: UniformGrid, v: System.Windows.Controls.Primitives.UniformGrid) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefColumns prev._Columns this._Columns id (fun x -> v.Columns <- x)
    updateValue _DefFirstColumn prev._FirstColumn this._FirstColumn id (fun x -> v.FirstColumn <- x)
    updateValue _DefRows prev._Rows this._Rows id (fun x -> v.Rows <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.UniformGrid())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? UniformGrid as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type VirtualizingPanel() =
  inherit Panel()


  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.VirtualizingPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.VirtualizingPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VirtualizingPanel, v: System.Windows.Controls.VirtualizingPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false


type VirtualizingStackPanel(setProps: VirtualizingStackPanel -> unit) as this =
  inherit VirtualizingPanel()

  static let _DefOrientation = System.Windows.Controls.VirtualizingStackPanel.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation

  do setProps this

  new() = VirtualizingStackPanel(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.VirtualizingStackPanel voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.VirtualizingStackPanel voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CanHorizontallyScroll: bool voption
  member this.CanHorizontallyScroll with set x = this._CanHorizontallyScroll <- ValueSome x

  [<DefaultValue>] val mutable private _CanVerticallyScroll: bool voption
  member this.CanVerticallyScroll with set x = this._CanVerticallyScroll <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable private _ScrollOwner: ScrollViewer voption
  member this.ScrollOwner with set x = this._ScrollOwner <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.VirtualizingStackPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.VirtualizingStackPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CanHorizontallyScroll |> ValueOption.iter (fun x -> v.CanHorizontallyScroll <- x)
    this._CanVerticallyScroll |> ValueOption.iter (fun x -> v.CanVerticallyScroll <- x)
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this._ScrollOwner |> ValueOption.iter (fun x -> v.ScrollOwner <- x.RenderNew () :?> System.Windows.Controls.ScrollViewer)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VirtualizingStackPanel, v: System.Windows.Controls.VirtualizingStackPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<bool> prev._CanHorizontallyScroll this._CanHorizontallyScroll id (fun x -> v.CanHorizontallyScroll <- x)
    updateValue Unchecked.defaultof<bool> prev._CanVerticallyScroll this._CanVerticallyScroll id (fun x -> v.CanVerticallyScroll <- x)
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    updateValue Unchecked.defaultof<System.Windows.Controls.ScrollViewer> prev._ScrollOwner this._ScrollOwner id (fun x -> v.ScrollOwner <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.VirtualizingStackPanel())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VirtualizingStackPanel as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type WrapPanel(setProps: WrapPanel -> unit) as this =
  inherit Panel()

  static let _DefItemHeight = System.Windows.Controls.WrapPanel.ItemHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefItemWidth = System.Windows.Controls.WrapPanel.ItemWidthProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOrientation = System.Windows.Controls.WrapPanel.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation

  do setProps this

  new() = WrapPanel(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.WrapPanel voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.WrapPanel voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _ItemHeight: float voption
  member this.ItemHeight with set x = this._ItemHeight <- ValueSome x

  [<DefaultValue>] val mutable private _ItemWidth: float voption
  member this.ItemWidth with set x = this._ItemWidth <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.WrapPanel> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.WrapPanel) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._ItemHeight |> ValueOption.iter (fun x -> v.ItemHeight <- x)
    this._ItemWidth |> ValueOption.iter (fun x -> v.ItemWidth <- x)
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: WrapPanel, v: System.Windows.Controls.WrapPanel) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefItemHeight prev._ItemHeight this._ItemHeight id (fun x -> v.ItemHeight <- x)
    updateValue _DefItemWidth prev._ItemWidth this._ItemWidth id (fun x -> v.ItemWidth <- x)
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.WrapPanel())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? WrapPanel as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Popup(setProps: Popup -> unit) as this =
  inherit FrameworkElement()

  static let _DefAllowsTransparency = System.Windows.Controls.Primitives.Popup.AllowsTransparencyProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefChild = System.Windows.Controls.Primitives.Popup.ChildProperty.DefaultMetadata.DefaultValue :?> System.Windows.UIElement
  static let _DefCustomPopupPlacementCallback = System.Windows.Controls.Primitives.Popup.CustomPopupPlacementCallbackProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.CustomPopupPlacementCallback
  static let _DefHorizontalOffset = System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefIsOpen = System.Windows.Controls.Primitives.Popup.IsOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefPlacement = System.Windows.Controls.Primitives.Popup.PlacementProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.PlacementMode
  static let _DefPlacementRectangle = System.Windows.Controls.Primitives.Popup.PlacementRectangleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect
  static let _DefPlacementTarget = System.Windows.Controls.Primitives.Popup.PlacementTargetProperty.DefaultMetadata.DefaultValue :?> System.Windows.UIElement
  static let _DefPopupAnimation = System.Windows.Controls.Primitives.Popup.PopupAnimationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.PopupAnimation
  static let _DefStaysOpen = System.Windows.Controls.Primitives.Popup.StaysOpenProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVerticalOffset = System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Popup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.Popup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.Popup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _AllowsTransparency: bool voption
  member this.AllowsTransparency with set x = this._AllowsTransparency <- ValueSome x

  [<DefaultValue>] val mutable private _Child: UIElement voption
  member this.Child with set x = this._Child <- ValueSome x

  [<DefaultValue>] val mutable private _CustomPopupPlacementCallback: System.Windows.Controls.Primitives.CustomPopupPlacementCallback voption
  member this.CustomPopupPlacementCallback with set x = this._CustomPopupPlacementCallback <- ValueSome x

  [<DefaultValue>] val mutable private _HorizontalOffset: float voption
  member this.HorizontalOffset with set x = this._HorizontalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _IsOpen: bool voption
  member this.IsOpen with set x = this._IsOpen <- ValueSome x

  [<DefaultValue>] val mutable private _Placement: System.Windows.Controls.Primitives.PlacementMode voption
  member this.Placement with set x = this._Placement <- ValueSome x

  [<DefaultValue>] val mutable private _PlacementRectangle: System.Windows.Rect voption
  member this.PlacementRectangle with set x = this._PlacementRectangle <- ValueSome x

  [<DefaultValue>] val mutable private _PlacementTarget: UIElement voption
  member this.PlacementTarget with set x = this._PlacementTarget <- ValueSome x

  [<DefaultValue>] val mutable private _PopupAnimation: System.Windows.Controls.Primitives.PopupAnimation voption
  member this.PopupAnimation with set x = this._PopupAnimation <- ValueSome x

  [<DefaultValue>] val mutable private _StaysOpen: bool voption
  member this.StaysOpen with set x = this._StaysOpen <- ValueSome x

  [<DefaultValue>] val mutable private _VerticalOffset: float voption
  member this.VerticalOffset with set x = this._VerticalOffset <- ValueSome x

  [<DefaultValue>] val mutable private _Closed: EventHandlerWrapper<System.EventArgs> voption
  member this.Closed with set x = this._Closed <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Opened: EventHandlerWrapper<System.EventArgs> voption
  member this.Opened with set x = this._Opened <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.Popup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.Popup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AllowsTransparency |> ValueOption.iter (fun x -> v.AllowsTransparency <- x)
    this._Child |> ValueOption.iter (fun x -> v.Child <- x.RenderNew () :?> System.Windows.UIElement)
    this._CustomPopupPlacementCallback |> ValueOption.iter (fun x -> v.CustomPopupPlacementCallback <- x)
    this._HorizontalOffset |> ValueOption.iter (fun x -> v.HorizontalOffset <- x)
    this._IsOpen |> ValueOption.iter (fun x -> v.IsOpen <- x)
    this._Placement |> ValueOption.iter (fun x -> v.Placement <- x)
    this._PlacementRectangle |> ValueOption.iter (fun x -> v.PlacementRectangle <- x)
    this._PlacementTarget |> ValueOption.iter (fun x -> v.PlacementTarget <- x.RenderNew () :?> System.Windows.UIElement)
    this._PopupAnimation |> ValueOption.iter (fun x -> v.PopupAnimation <- x)
    this._StaysOpen |> ValueOption.iter (fun x -> v.StaysOpen <- x)
    this._VerticalOffset |> ValueOption.iter (fun x -> v.VerticalOffset <- x)
    this._Closed |> ValueOption.iter (fun x -> x.Subscription <- v.Closed.Subscribe x.Fn)
    this._Opened |> ValueOption.iter (fun x -> x.Subscription <- v.Opened.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Popup, v: System.Windows.Controls.Primitives.Popup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAllowsTransparency prev._AllowsTransparency this._AllowsTransparency id (fun x -> v.AllowsTransparency <- x)
    updateValue _DefChild prev._Child this._Child id (fun x -> v.Child <- x)
    updateValue _DefCustomPopupPlacementCallback prev._CustomPopupPlacementCallback this._CustomPopupPlacementCallback id (fun x -> v.CustomPopupPlacementCallback <- x)
    updateValue _DefHorizontalOffset prev._HorizontalOffset this._HorizontalOffset id (fun x -> v.HorizontalOffset <- x)
    updateValue _DefIsOpen prev._IsOpen this._IsOpen id (fun x -> v.IsOpen <- x)
    updateValue _DefPlacement prev._Placement this._Placement id (fun x -> v.Placement <- x)
    updateValue _DefPlacementRectangle prev._PlacementRectangle this._PlacementRectangle id (fun x -> v.PlacementRectangle <- x)
    updateValue _DefPlacementTarget prev._PlacementTarget this._PlacementTarget id (fun x -> v.PlacementTarget <- x)
    updateValue _DefPopupAnimation prev._PopupAnimation this._PopupAnimation id (fun x -> v.PopupAnimation <- x)
    updateValue _DefStaysOpen prev._StaysOpen this._StaysOpen id (fun x -> v.StaysOpen <- x)
    updateValue _DefVerticalOffset prev._VerticalOffset this._VerticalOffset id (fun x -> v.VerticalOffset <- x)
    updateFn prev._Closed this._Closed v.Closed
    updateFn prev._Opened this._Opened v.Opened
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.Popup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Popup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Shape() =
  inherit FrameworkElement()

  static let _DefFill = System.Windows.Shapes.Shape.FillProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefStretch = System.Windows.Shapes.Shape.StretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Stretch
  static let _DefStroke = System.Windows.Shapes.Shape.StrokeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefStrokeDashArray = System.Windows.Shapes.Shape.StrokeDashArrayProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DoubleCollection
  static let _DefStrokeDashCap = System.Windows.Shapes.Shape.StrokeDashCapProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineCap
  static let _DefStrokeDashOffset = System.Windows.Shapes.Shape.StrokeDashOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefStrokeEndLineCap = System.Windows.Shapes.Shape.StrokeEndLineCapProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineCap
  static let _DefStrokeLineJoin = System.Windows.Shapes.Shape.StrokeLineJoinProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineJoin
  static let _DefStrokeMiterLimit = System.Windows.Shapes.Shape.StrokeMiterLimitProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefStrokeStartLineCap = System.Windows.Shapes.Shape.StrokeStartLineCapProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PenLineCap
  static let _DefStrokeThickness = System.Windows.Shapes.Shape.StrokeThicknessProperty.DefaultMetadata.DefaultValue :?> float

  [<DefaultValue>] val mutable private _Fill: Brush voption
  member this.Fill with set x = this._Fill <- ValueSome x

  [<DefaultValue>] val mutable private _Stretch: System.Windows.Media.Stretch voption
  member this.Stretch with set x = this._Stretch <- ValueSome x

  [<DefaultValue>] val mutable private _Stroke: Brush voption
  member this.Stroke with set x = this._Stroke <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeDashArray: DoubleCollection voption
  member this.StrokeDashArray with set x = this._StrokeDashArray <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeDashCap: System.Windows.Media.PenLineCap voption
  member this.StrokeDashCap with set x = this._StrokeDashCap <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeDashOffset: float voption
  member this.StrokeDashOffset with set x = this._StrokeDashOffset <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeEndLineCap: System.Windows.Media.PenLineCap voption
  member this.StrokeEndLineCap with set x = this._StrokeEndLineCap <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeLineJoin: System.Windows.Media.PenLineJoin voption
  member this.StrokeLineJoin with set x = this._StrokeLineJoin <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeMiterLimit: float voption
  member this.StrokeMiterLimit with set x = this._StrokeMiterLimit <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeStartLineCap: System.Windows.Media.PenLineCap voption
  member this.StrokeStartLineCap with set x = this._StrokeStartLineCap <- ValueSome x

  [<DefaultValue>] val mutable private _StrokeThickness: float voption
  member this.StrokeThickness with set x = this._StrokeThickness <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shapes.Shape> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shapes.Shape) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Fill |> ValueOption.iter (fun x -> v.Fill <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Stretch |> ValueOption.iter (fun x -> v.Stretch <- x)
    this._Stroke |> ValueOption.iter (fun x -> v.Stroke <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._StrokeDashArray |> ValueOption.iter (fun x -> v.StrokeDashArray <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this._StrokeDashCap |> ValueOption.iter (fun x -> v.StrokeDashCap <- x)
    this._StrokeDashOffset |> ValueOption.iter (fun x -> v.StrokeDashOffset <- x)
    this._StrokeEndLineCap |> ValueOption.iter (fun x -> v.StrokeEndLineCap <- x)
    this._StrokeLineJoin |> ValueOption.iter (fun x -> v.StrokeLineJoin <- x)
    this._StrokeMiterLimit |> ValueOption.iter (fun x -> v.StrokeMiterLimit <- x)
    this._StrokeStartLineCap |> ValueOption.iter (fun x -> v.StrokeStartLineCap <- x)
    this._StrokeThickness |> ValueOption.iter (fun x -> v.StrokeThickness <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Shape, v: System.Windows.Shapes.Shape) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFill prev._Fill this._Fill id (fun x -> v.Fill <- x)
    updateValue _DefStretch prev._Stretch this._Stretch id (fun x -> v.Stretch <- x)
    updateValue _DefStroke prev._Stroke this._Stroke id (fun x -> v.Stroke <- x)
    updateValue _DefStrokeDashArray prev._StrokeDashArray this._StrokeDashArray id (fun x -> v.StrokeDashArray <- x)
    updateValue _DefStrokeDashCap prev._StrokeDashCap this._StrokeDashCap id (fun x -> v.StrokeDashCap <- x)
    updateValue _DefStrokeDashOffset prev._StrokeDashOffset this._StrokeDashOffset id (fun x -> v.StrokeDashOffset <- x)
    updateValue _DefStrokeEndLineCap prev._StrokeEndLineCap this._StrokeEndLineCap id (fun x -> v.StrokeEndLineCap <- x)
    updateValue _DefStrokeLineJoin prev._StrokeLineJoin this._StrokeLineJoin id (fun x -> v.StrokeLineJoin <- x)
    updateValue _DefStrokeMiterLimit prev._StrokeMiterLimit this._StrokeMiterLimit id (fun x -> v.StrokeMiterLimit <- x)
    updateValue _DefStrokeStartLineCap prev._StrokeStartLineCap this._StrokeStartLineCap id (fun x -> v.StrokeStartLineCap <- x)
    updateValue _DefStrokeThickness prev._StrokeThickness this._StrokeThickness id (fun x -> v.StrokeThickness <- x)
    this.SilenceEvents <- false


type Ellipse(setProps: Ellipse -> unit) as this =
  inherit Shape()


  do setProps this

  new() = Ellipse(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shapes.Ellipse voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shapes.Ellipse voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shapes.Ellipse> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shapes.Ellipse) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Ellipse, v: System.Windows.Shapes.Ellipse) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shapes.Ellipse())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Ellipse as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Line(setProps: Line -> unit) as this =
  inherit Shape()

  static let _DefX1 = System.Windows.Shapes.Line.X1Property.DefaultMetadata.DefaultValue :?> float
  static let _DefX2 = System.Windows.Shapes.Line.X2Property.DefaultMetadata.DefaultValue :?> float
  static let _DefY1 = System.Windows.Shapes.Line.Y1Property.DefaultMetadata.DefaultValue :?> float
  static let _DefY2 = System.Windows.Shapes.Line.Y2Property.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Line(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shapes.Line voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shapes.Line voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _X1: float voption
  member this.X1 with set x = this._X1 <- ValueSome x

  [<DefaultValue>] val mutable private _X2: float voption
  member this.X2 with set x = this._X2 <- ValueSome x

  [<DefaultValue>] val mutable private _Y1: float voption
  member this.Y1 with set x = this._Y1 <- ValueSome x

  [<DefaultValue>] val mutable private _Y2: float voption
  member this.Y2 with set x = this._Y2 <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shapes.Line> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shapes.Line) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._X1 |> ValueOption.iter (fun x -> v.X1 <- x)
    this._X2 |> ValueOption.iter (fun x -> v.X2 <- x)
    this._Y1 |> ValueOption.iter (fun x -> v.Y1 <- x)
    this._Y2 |> ValueOption.iter (fun x -> v.Y2 <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Line, v: System.Windows.Shapes.Line) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefX1 prev._X1 this._X1 id (fun x -> v.X1 <- x)
    updateValue _DefX2 prev._X2 this._X2 id (fun x -> v.X2 <- x)
    updateValue _DefY1 prev._Y1 this._Y1 id (fun x -> v.Y1 <- x)
    updateValue _DefY2 prev._Y2 this._Y2 id (fun x -> v.Y2 <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shapes.Line())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Line as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Path(setProps: Path -> unit) as this =
  inherit Shape()

  static let _DefData = System.Windows.Shapes.Path.DataProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Geometry

  do setProps this

  new() = Path(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shapes.Path voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shapes.Path voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Data: Geometry voption
  member this.Data with set x = this._Data <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shapes.Path> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shapes.Path) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Data |> ValueOption.iter (fun x -> v.Data <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Path, v: System.Windows.Shapes.Path) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefData prev._Data this._Data id (fun x -> v.Data <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shapes.Path())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Path as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Polygon(setProps: Polygon -> unit) as this =
  inherit Shape()

  static let _DefFillRule = System.Windows.Shapes.Polygon.FillRuleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FillRule
  static let _DefPoints = System.Windows.Shapes.Polygon.PointsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PointCollection

  do setProps this

  new() = Polygon(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shapes.Polygon voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shapes.Polygon voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _FillRule: System.Windows.Media.FillRule voption
  member this.FillRule with set x = this._FillRule <- ValueSome x

  [<DefaultValue>] val mutable private _Points: PointCollection voption
  member this.Points with set x = this._Points <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shapes.Polygon> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shapes.Polygon) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._FillRule |> ValueOption.iter (fun x -> v.FillRule <- x)
    this._Points |> ValueOption.iter (fun x -> v.Points <- x.RenderNew () :?> System.Windows.Media.PointCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Polygon, v: System.Windows.Shapes.Polygon) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFillRule prev._FillRule this._FillRule id (fun x -> v.FillRule <- x)
    updateValue _DefPoints prev._Points this._Points id (fun x -> v.Points <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shapes.Polygon())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Polygon as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Polyline(setProps: Polyline -> unit) as this =
  inherit Shape()

  static let _DefFillRule = System.Windows.Shapes.Polyline.FillRuleProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FillRule
  static let _DefPoints = System.Windows.Shapes.Polyline.PointsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.PointCollection

  do setProps this

  new() = Polyline(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shapes.Polyline voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shapes.Polyline voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _FillRule: System.Windows.Media.FillRule voption
  member this.FillRule with set x = this._FillRule <- ValueSome x

  [<DefaultValue>] val mutable private _Points: PointCollection voption
  member this.Points with set x = this._Points <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shapes.Polyline> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shapes.Polyline) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._FillRule |> ValueOption.iter (fun x -> v.FillRule <- x)
    this._Points |> ValueOption.iter (fun x -> v.Points <- x.RenderNew () :?> System.Windows.Media.PointCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Polyline, v: System.Windows.Shapes.Polyline) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFillRule prev._FillRule this._FillRule id (fun x -> v.FillRule <- x)
    updateValue _DefPoints prev._Points this._Points id (fun x -> v.Points <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shapes.Polyline())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Polyline as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Rectangle(setProps: Rectangle -> unit) as this =
  inherit Shape()

  static let _DefRadiusX = System.Windows.Shapes.Rectangle.RadiusXProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefRadiusY = System.Windows.Shapes.Rectangle.RadiusYProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Rectangle(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Shapes.Rectangle voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Shapes.Rectangle voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusX: float voption
  member this.RadiusX with set x = this._RadiusX <- ValueSome x

  [<DefaultValue>] val mutable private _RadiusY: float voption
  member this.RadiusY with set x = this._RadiusY <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Shapes.Rectangle> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Shapes.Rectangle) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._RadiusX |> ValueOption.iter (fun x -> v.RadiusX <- x)
    this._RadiusY |> ValueOption.iter (fun x -> v.RadiusY <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Rectangle, v: System.Windows.Shapes.Rectangle) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefRadiusX prev._RadiusX this._RadiusX id (fun x -> v.RadiusX <- x)
    updateValue _DefRadiusY prev._RadiusY this._RadiusY id (fun x -> v.RadiusY <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Shapes.Rectangle())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Rectangle as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TextBlock(setProps: TextBlock -> unit) as this =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Controls.TextBlock.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefBaselineOffset = System.Windows.Controls.TextBlock.BaselineOffsetProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontFamily = System.Windows.Controls.TextBlock.FontFamilyProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.FontFamily
  static let _DefFontSize = System.Windows.Controls.TextBlock.FontSizeProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefFontStretch = System.Windows.Controls.TextBlock.FontStretchProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStretch
  static let _DefFontStyle = System.Windows.Controls.TextBlock.FontStyleProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontStyle
  static let _DefFontWeight = System.Windows.Controls.TextBlock.FontWeightProperty.DefaultMetadata.DefaultValue :?> System.Windows.FontWeight
  static let _DefForeground = System.Windows.Controls.TextBlock.ForegroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefIsHyphenationEnabled = System.Windows.Controls.TextBlock.IsHyphenationEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefLineHeight = System.Windows.Controls.TextBlock.LineHeightProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefLineStackingStrategy = System.Windows.Controls.TextBlock.LineStackingStrategyProperty.DefaultMetadata.DefaultValue :?> System.Windows.LineStackingStrategy
  static let _DefPadding = System.Windows.Controls.TextBlock.PaddingProperty.DefaultMetadata.DefaultValue :?> System.Windows.Thickness
  static let _DefText = System.Windows.Controls.TextBlock.TextProperty.DefaultMetadata.DefaultValue :?> string
  static let _DefTextAlignment = System.Windows.Controls.TextBlock.TextAlignmentProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextAlignment
  static let _DefTextDecorations = System.Windows.Controls.TextBlock.TextDecorationsProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextDecorationCollection
  static let _DefTextEffects = System.Windows.Controls.TextBlock.TextEffectsProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.TextEffectCollection
  static let _DefTextTrimming = System.Windows.Controls.TextBlock.TextTrimmingProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextTrimming
  static let _DefTextWrapping = System.Windows.Controls.TextBlock.TextWrappingProperty.DefaultMetadata.DefaultValue :?> System.Windows.TextWrapping

  do setProps this

  new() = TextBlock(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.TextBlock voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.TextBlock voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _BaselineOffset: float voption
  member this.BaselineOffset with set x = this._BaselineOffset <- ValueSome x

  [<DefaultValue>] val mutable private _FontFamily: System.Windows.Media.FontFamily voption
  member this.FontFamily with set x = this._FontFamily <- ValueSome x

  [<DefaultValue>] val mutable private _FontSize: float voption
  member this.FontSize with set x = this._FontSize <- ValueSome x

  [<DefaultValue>] val mutable private _FontStretch: System.Windows.FontStretch voption
  member this.FontStretch with set x = this._FontStretch <- ValueSome x

  [<DefaultValue>] val mutable private _FontStyle: System.Windows.FontStyle voption
  member this.FontStyle with set x = this._FontStyle <- ValueSome x

  [<DefaultValue>] val mutable private _FontWeight: System.Windows.FontWeight voption
  member this.FontWeight with set x = this._FontWeight <- ValueSome x

  [<DefaultValue>] val mutable private _Foreground: Brush voption
  member this.Foreground with set x = this._Foreground <- ValueSome x

  [<DefaultValue>] val mutable private _IsHyphenationEnabled: bool voption
  member this.IsHyphenationEnabled with set x = this._IsHyphenationEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _LineHeight: float voption
  member this.LineHeight with set x = this._LineHeight <- ValueSome x

  [<DefaultValue>] val mutable private _LineStackingStrategy: System.Windows.LineStackingStrategy voption
  member this.LineStackingStrategy with set x = this._LineStackingStrategy <- ValueSome x

  [<DefaultValue>] val mutable private _Padding: System.Windows.Thickness voption
  member this.Padding with set x = this._Padding <- ValueSome x

  [<DefaultValue>] val mutable private _Text: string voption
  member this.Text with set x = this._Text <- ValueSome x

  [<DefaultValue>] val mutable private _TextAlignment: System.Windows.TextAlignment voption
  member this.TextAlignment with set x = this._TextAlignment <- ValueSome x

  [<DefaultValue>] val mutable private _TextDecorations: TextDecorationCollection voption
  member this.TextDecorations with set x = this._TextDecorations <- ValueSome x

  [<DefaultValue>] val mutable private _TextEffects: TextEffectCollection voption
  member this.TextEffects with set x = this._TextEffects <- ValueSome x

  [<DefaultValue>] val mutable private _TextTrimming: System.Windows.TextTrimming voption
  member this.TextTrimming with set x = this._TextTrimming <- ValueSome x

  [<DefaultValue>] val mutable private _TextWrapping: System.Windows.TextWrapping voption
  member this.TextWrapping with set x = this._TextWrapping <- ValueSome x

  [<DefaultValue>] val mutable private _Inlines: Inline list voption
  member this.Inlines with set x = this._Inlines <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.TextBlock> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.TextBlock) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._BaselineOffset |> ValueOption.iter (fun x -> v.BaselineOffset <- x)
    this._FontFamily |> ValueOption.iter (fun x -> v.FontFamily <- x)
    this._FontSize |> ValueOption.iter (fun x -> v.FontSize <- x)
    this._FontStretch |> ValueOption.iter (fun x -> v.FontStretch <- x)
    this._FontStyle |> ValueOption.iter (fun x -> v.FontStyle <- x)
    this._FontWeight |> ValueOption.iter (fun x -> v.FontWeight <- x)
    this._Foreground |> ValueOption.iter (fun x -> v.Foreground <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._IsHyphenationEnabled |> ValueOption.iter (fun x -> v.IsHyphenationEnabled <- x)
    this._LineHeight |> ValueOption.iter (fun x -> v.LineHeight <- x)
    this._LineStackingStrategy |> ValueOption.iter (fun x -> v.LineStackingStrategy <- x)
    this._Padding |> ValueOption.iter (fun x -> v.Padding <- x)
    this._Text |> ValueOption.iter (fun x -> v.Text <- x)
    this._TextAlignment |> ValueOption.iter (fun x -> v.TextAlignment <- x)
    this._TextDecorations |> ValueOption.iter (fun x -> v.TextDecorations <- x.RenderNew () :?> System.Windows.TextDecorationCollection)
    this._TextEffects |> ValueOption.iter (fun x -> v.TextEffects <- x.RenderNew () :?> System.Windows.Media.TextEffectCollection)
    this._TextTrimming |> ValueOption.iter (fun x -> v.TextTrimming <- x)
    this._TextWrapping |> ValueOption.iter (fun x -> v.TextWrapping <- x)
    this._Inlines |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Documents.Inline |> v.Inlines.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TextBlock, v: System.Windows.Controls.TextBlock) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefBaselineOffset prev._BaselineOffset this._BaselineOffset id (fun x -> v.BaselineOffset <- x)
    updateValue _DefFontFamily prev._FontFamily this._FontFamily id (fun x -> v.FontFamily <- x)
    updateValue _DefFontSize prev._FontSize this._FontSize id (fun x -> v.FontSize <- x)
    updateValue _DefFontStretch prev._FontStretch this._FontStretch id (fun x -> v.FontStretch <- x)
    updateValue _DefFontStyle prev._FontStyle this._FontStyle id (fun x -> v.FontStyle <- x)
    updateValue _DefFontWeight prev._FontWeight this._FontWeight id (fun x -> v.FontWeight <- x)
    updateValue _DefForeground prev._Foreground this._Foreground id (fun x -> v.Foreground <- x)
    updateValue _DefIsHyphenationEnabled prev._IsHyphenationEnabled this._IsHyphenationEnabled id (fun x -> v.IsHyphenationEnabled <- x)
    updateValue _DefLineHeight prev._LineHeight this._LineHeight id (fun x -> v.LineHeight <- x)
    updateValue _DefLineStackingStrategy prev._LineStackingStrategy this._LineStackingStrategy id (fun x -> v.LineStackingStrategy <- x)
    updateValue _DefPadding prev._Padding this._Padding id (fun x -> v.Padding <- x)
    updateValue _DefText prev._Text this._Text id (fun x -> v.Text <- x)
    updateValue _DefTextAlignment prev._TextAlignment this._TextAlignment id (fun x -> v.TextAlignment <- x)
    updateValue _DefTextDecorations prev._TextDecorations this._TextDecorations id (fun x -> v.TextDecorations <- x)
    updateValue _DefTextEffects prev._TextEffects this._TextEffects id (fun x -> v.TextEffects <- x)
    updateValue _DefTextTrimming prev._TextTrimming this._TextTrimming id (fun x -> v.TextTrimming <- x)
    updateValue _DefTextWrapping prev._TextWrapping this._TextWrapping id (fun x -> v.TextWrapping <- x)
    updateChildren prev._Inlines this._Inlines v.Inlines
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.TextBlock())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TextBlock as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type TickBar(setProps: TickBar -> unit) as this =
  inherit FrameworkElement()

  static let _DefFill = System.Windows.Controls.Primitives.TickBar.FillProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefIsDirectionReversed = System.Windows.Controls.Primitives.TickBar.IsDirectionReversedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsSelectionRangeEnabled = System.Windows.Controls.Primitives.TickBar.IsSelectionRangeEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMaximum = System.Windows.Controls.Primitives.TickBar.MaximumProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinimum = System.Windows.Controls.Primitives.TickBar.MinimumProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefPlacement = System.Windows.Controls.Primitives.TickBar.PlacementProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Primitives.TickBarPlacement
  static let _DefReservedSpace = System.Windows.Controls.Primitives.TickBar.ReservedSpaceProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionEnd = System.Windows.Controls.Primitives.TickBar.SelectionEndProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefSelectionStart = System.Windows.Controls.Primitives.TickBar.SelectionStartProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefTickFrequency = System.Windows.Controls.Primitives.TickBar.TickFrequencyProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefTicks = System.Windows.Controls.Primitives.TickBar.TicksProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.DoubleCollection

  do setProps this

  new() = TickBar(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.TickBar voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.TickBar voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Fill: Brush voption
  member this.Fill with set x = this._Fill <- ValueSome x

  [<DefaultValue>] val mutable private _IsDirectionReversed: bool voption
  member this.IsDirectionReversed with set x = this._IsDirectionReversed <- ValueSome x

  [<DefaultValue>] val mutable private _IsSelectionRangeEnabled: bool voption
  member this.IsSelectionRangeEnabled with set x = this._IsSelectionRangeEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _Maximum: float voption
  member this.Maximum with set x = this._Maximum <- ValueSome x

  [<DefaultValue>] val mutable private _Minimum: float voption
  member this.Minimum with set x = this._Minimum <- ValueSome x

  [<DefaultValue>] val mutable private _Placement: System.Windows.Controls.Primitives.TickBarPlacement voption
  member this.Placement with set x = this._Placement <- ValueSome x

  [<DefaultValue>] val mutable private _ReservedSpace: float voption
  member this.ReservedSpace with set x = this._ReservedSpace <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionEnd: float voption
  member this.SelectionEnd with set x = this._SelectionEnd <- ValueSome x

  [<DefaultValue>] val mutable private _SelectionStart: float voption
  member this.SelectionStart with set x = this._SelectionStart <- ValueSome x

  [<DefaultValue>] val mutable private _TickFrequency: float voption
  member this.TickFrequency with set x = this._TickFrequency <- ValueSome x

  [<DefaultValue>] val mutable private _Ticks: DoubleCollection voption
  member this.Ticks with set x = this._Ticks <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.TickBar> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.TickBar) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Fill |> ValueOption.iter (fun x -> v.Fill <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._IsDirectionReversed |> ValueOption.iter (fun x -> v.IsDirectionReversed <- x)
    this._IsSelectionRangeEnabled |> ValueOption.iter (fun x -> v.IsSelectionRangeEnabled <- x)
    this._Maximum |> ValueOption.iter (fun x -> v.Maximum <- x)
    this._Minimum |> ValueOption.iter (fun x -> v.Minimum <- x)
    this._Placement |> ValueOption.iter (fun x -> v.Placement <- x)
    this._ReservedSpace |> ValueOption.iter (fun x -> v.ReservedSpace <- x)
    this._SelectionEnd |> ValueOption.iter (fun x -> v.SelectionEnd <- x)
    this._SelectionStart |> ValueOption.iter (fun x -> v.SelectionStart <- x)
    this._TickFrequency |> ValueOption.iter (fun x -> v.TickFrequency <- x)
    this._Ticks |> ValueOption.iter (fun x -> v.Ticks <- x.RenderNew () :?> System.Windows.Media.DoubleCollection)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: TickBar, v: System.Windows.Controls.Primitives.TickBar) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefFill prev._Fill this._Fill id (fun x -> v.Fill <- x)
    updateValue _DefIsDirectionReversed prev._IsDirectionReversed this._IsDirectionReversed id (fun x -> v.IsDirectionReversed <- x)
    updateValue _DefIsSelectionRangeEnabled prev._IsSelectionRangeEnabled this._IsSelectionRangeEnabled id (fun x -> v.IsSelectionRangeEnabled <- x)
    updateValue _DefMaximum prev._Maximum this._Maximum id (fun x -> v.Maximum <- x)
    updateValue _DefMinimum prev._Minimum this._Minimum id (fun x -> v.Minimum <- x)
    updateValue _DefPlacement prev._Placement this._Placement id (fun x -> v.Placement <- x)
    updateValue _DefReservedSpace prev._ReservedSpace this._ReservedSpace id (fun x -> v.ReservedSpace <- x)
    updateValue _DefSelectionEnd prev._SelectionEnd this._SelectionEnd id (fun x -> v.SelectionEnd <- x)
    updateValue _DefSelectionStart prev._SelectionStart this._SelectionStart id (fun x -> v.SelectionStart <- x)
    updateValue _DefTickFrequency prev._TickFrequency this._TickFrequency id (fun x -> v.TickFrequency <- x)
    updateValue _DefTicks prev._Ticks this._Ticks id (fun x -> v.Ticks <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.TickBar())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? TickBar as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ToolBarTray(setProps: ToolBarTray -> unit) as this =
  inherit FrameworkElement()

  static let _DefBackground = System.Windows.Controls.ToolBarTray.BackgroundProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Brush
  static let _DefIsLocked = System.Windows.Controls.ToolBarTray.IsLockedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefOrientation = System.Windows.Controls.ToolBarTray.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation

  do setProps this

  new() = ToolBarTray(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.ToolBarTray voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.ToolBarTray voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Background: Brush voption
  member this.Background with set x = this._Background <- ValueSome x

  [<DefaultValue>] val mutable private _IsLocked: bool voption
  member this.IsLocked with set x = this._IsLocked <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable private _ToolBars: ToolBar list voption
  member this.ToolBars with set x = this._ToolBars <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.ToolBarTray> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.ToolBarTray) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Background |> ValueOption.iter (fun x -> v.Background <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._IsLocked |> ValueOption.iter (fun x -> v.IsLocked <- x)
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this._ToolBars |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Controls.ToolBar |> v.ToolBars.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ToolBarTray, v: System.Windows.Controls.ToolBarTray) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefBackground prev._Background this._Background id (fun x -> v.Background <- x)
    updateValue _DefIsLocked prev._IsLocked this._IsLocked id (fun x -> v.IsLocked <- x)
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    updateChildren prev._ToolBars this._ToolBars v.ToolBars
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.ToolBarTray())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ToolBarTray as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Track(setProps: Track -> unit) as this =
  inherit FrameworkElement()

  static let _DefIsDirectionReversed = System.Windows.Controls.Primitives.Track.IsDirectionReversedProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefMaximum = System.Windows.Controls.Primitives.Track.MaximumProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefMinimum = System.Windows.Controls.Primitives.Track.MinimumProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefOrientation = System.Windows.Controls.Primitives.Track.OrientationProperty.DefaultMetadata.DefaultValue :?> System.Windows.Controls.Orientation
  static let _DefValue = System.Windows.Controls.Primitives.Track.ValueProperty.DefaultMetadata.DefaultValue :?> float
  static let _DefViewportSize = System.Windows.Controls.Primitives.Track.ViewportSizeProperty.DefaultMetadata.DefaultValue :?> float

  do setProps this

  new() = Track(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Primitives.Track voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Primitives.Track voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _DecreaseRepeatButton: RepeatButton voption
  member this.DecreaseRepeatButton with set x = this._DecreaseRepeatButton <- ValueSome x

  [<DefaultValue>] val mutable private _IncreaseRepeatButton: RepeatButton voption
  member this.IncreaseRepeatButton with set x = this._IncreaseRepeatButton <- ValueSome x

  [<DefaultValue>] val mutable private _IsDirectionReversed: bool voption
  member this.IsDirectionReversed with set x = this._IsDirectionReversed <- ValueSome x

  [<DefaultValue>] val mutable private _Maximum: float voption
  member this.Maximum with set x = this._Maximum <- ValueSome x

  [<DefaultValue>] val mutable private _Minimum: float voption
  member this.Minimum with set x = this._Minimum <- ValueSome x

  [<DefaultValue>] val mutable private _Orientation: System.Windows.Controls.Orientation voption
  member this.Orientation with set x = this._Orientation <- ValueSome x

  [<DefaultValue>] val mutable private _Thumb: Thumb voption
  member this.Thumb with set x = this._Thumb <- ValueSome x

  [<DefaultValue>] val mutable private _Value: float voption
  member this.Value with set x = this._Value <- ValueSome x

  [<DefaultValue>] val mutable private _ViewportSize: float voption
  member this.ViewportSize with set x = this._ViewportSize <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Primitives.Track> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Primitives.Track) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._DecreaseRepeatButton |> ValueOption.iter (fun x -> v.DecreaseRepeatButton <- x.RenderNew () :?> System.Windows.Controls.Primitives.RepeatButton)
    this._IncreaseRepeatButton |> ValueOption.iter (fun x -> v.IncreaseRepeatButton <- x.RenderNew () :?> System.Windows.Controls.Primitives.RepeatButton)
    this._IsDirectionReversed |> ValueOption.iter (fun x -> v.IsDirectionReversed <- x)
    this._Maximum |> ValueOption.iter (fun x -> v.Maximum <- x)
    this._Minimum |> ValueOption.iter (fun x -> v.Minimum <- x)
    this._Orientation |> ValueOption.iter (fun x -> v.Orientation <- x)
    this._Thumb |> ValueOption.iter (fun x -> v.Thumb <- x.RenderNew () :?> System.Windows.Controls.Primitives.Thumb)
    this._Value |> ValueOption.iter (fun x -> v.Value <- x)
    this._ViewportSize |> ValueOption.iter (fun x -> v.ViewportSize <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Track, v: System.Windows.Controls.Primitives.Track) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<System.Windows.Controls.Primitives.RepeatButton> prev._DecreaseRepeatButton this._DecreaseRepeatButton id (fun x -> v.DecreaseRepeatButton <- x)
    updateValue Unchecked.defaultof<System.Windows.Controls.Primitives.RepeatButton> prev._IncreaseRepeatButton this._IncreaseRepeatButton id (fun x -> v.IncreaseRepeatButton <- x)
    updateValue _DefIsDirectionReversed prev._IsDirectionReversed this._IsDirectionReversed id (fun x -> v.IsDirectionReversed <- x)
    updateValue _DefMaximum prev._Maximum this._Maximum id (fun x -> v.Maximum <- x)
    updateValue _DefMinimum prev._Minimum this._Minimum id (fun x -> v.Minimum <- x)
    updateValue _DefOrientation prev._Orientation this._Orientation id (fun x -> v.Orientation <- x)
    updateValue Unchecked.defaultof<System.Windows.Controls.Primitives.Thumb> prev._Thumb this._Thumb id (fun x -> v.Thumb <- x)
    updateValue _DefValue prev._Value this._Value id (fun x -> v.Value <- x)
    updateValue _DefViewportSize prev._ViewportSize this._ViewportSize id (fun x -> v.ViewportSize <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Primitives.Track())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Track as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Viewport3D(setProps: Viewport3D -> unit) as this =
  inherit FrameworkElement()

  static let _DefCamera = System.Windows.Controls.Viewport3D.CameraProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Camera

  do setProps this

  new() = Viewport3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Controls.Viewport3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Controls.Viewport3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Camera: Camera voption
  member this.Camera with set x = this._Camera <- ValueSome x

  [<DefaultValue>] val mutable private _Children: Visual3D list voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Controls.Viewport3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Controls.Viewport3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Camera |> ValueOption.iter (fun x -> v.Camera <- x.RenderNew () :?> System.Windows.Media.Media3D.Camera)
    this._Children |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.Visual3D |> v.Children.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Viewport3D, v: System.Windows.Controls.Viewport3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCamera prev._Camera this._Camera id (fun x -> v.Camera <- x)
    updateChildren prev._Children this._Children v.Children
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Controls.Viewport3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Viewport3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Viewport3DVisual(setProps: Viewport3DVisual -> unit) as this =
  inherit Visual()

  static let _DefCamera = System.Windows.Media.Media3D.Viewport3DVisual.CameraProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Camera
  static let _DefViewport = System.Windows.Media.Media3D.Viewport3DVisual.ViewportProperty.DefaultMetadata.DefaultValue :?> System.Windows.Rect

  do setProps this

  new() = Viewport3DVisual(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Viewport3DVisual voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Viewport3DVisual voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Camera: Camera voption
  member this.Camera with set x = this._Camera <- ValueSome x

  [<DefaultValue>] val mutable private _Clip: Geometry voption
  member this.Clip with set x = this._Clip <- ValueSome x

  [<DefaultValue>] val mutable private _Offset: System.Windows.Vector voption
  member this.Offset with set x = this._Offset <- ValueSome x

  [<DefaultValue>] val mutable private _Opacity: float voption
  member this.Opacity with set x = this._Opacity <- ValueSome x

  [<DefaultValue>] val mutable private _OpacityMask: Brush voption
  member this.OpacityMask with set x = this._OpacityMask <- ValueSome x

  [<DefaultValue>] val mutable private _Transform: Transform voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable private _Viewport: System.Windows.Rect voption
  member this.Viewport with set x = this._Viewport <- ValueSome x

  [<DefaultValue>] val mutable private _Children: Visual3D list voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Viewport3DVisual> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Viewport3DVisual) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Camera |> ValueOption.iter (fun x -> v.Camera <- x.RenderNew () :?> System.Windows.Media.Media3D.Camera)
    this._Clip |> ValueOption.iter (fun x -> v.Clip <- x.RenderNew () :?> System.Windows.Media.Geometry)
    this._Offset |> ValueOption.iter (fun x -> v.Offset <- x)
    this._Opacity |> ValueOption.iter (fun x -> v.Opacity <- x)
    this._OpacityMask |> ValueOption.iter (fun x -> v.OpacityMask <- x.RenderNew () :?> System.Windows.Media.Brush)
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Transform)
    this._Viewport |> ValueOption.iter (fun x -> v.Viewport <- x)
    this._Children |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.Visual3D |> v.Children.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Viewport3DVisual, v: System.Windows.Media.Media3D.Viewport3DVisual) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCamera prev._Camera this._Camera id (fun x -> v.Camera <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Geometry> prev._Clip this._Clip id (fun x -> v.Clip <- x)
    updateValue Unchecked.defaultof<System.Windows.Vector> prev._Offset this._Offset id (fun x -> v.Offset <- x)
    updateValue Unchecked.defaultof<float> prev._Opacity this._Opacity id (fun x -> v.Opacity <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Brush> prev._OpacityMask this._OpacityMask id (fun x -> v.OpacityMask <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Transform> prev._Transform this._Transform id (fun x -> v.Transform <- x)
    updateValue _DefViewport prev._Viewport this._Viewport id (fun x -> v.Viewport <- x)
    updateChildren prev._Children this._Children v.Children
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Viewport3DVisual())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Viewport3DVisual as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type Visual3D() =
  inherit DependencyObject()

  static let _DefTransform = System.Windows.Media.Media3D.Visual3D.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Transform3D

  [<DefaultValue>] val mutable private _Transform: Transform3D voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Visual3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Visual3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Media3D.Transform3D)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Visual3D, v: System.Windows.Media.Media3D.Visual3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    this.SilenceEvents <- false


type ModelVisual3D(setProps: ModelVisual3D -> unit) as this =
  inherit Visual3D()

  static let _DefContent = System.Windows.Media.Media3D.ModelVisual3D.ContentProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Model3D
  static let _DefTransform = System.Windows.Media.Media3D.ModelVisual3D.TransformProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Transform3D

  do setProps this

  new() = ModelVisual3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.ModelVisual3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.ModelVisual3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Content: Model3D voption
  member this.Content with set x = this._Content <- ValueSome x

  [<DefaultValue>] val mutable private _Transform: Transform3D voption
  member this.Transform with set x = this._Transform <- ValueSome x

  [<DefaultValue>] val mutable private _Children: Visual3D list voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.ModelVisual3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.ModelVisual3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Content |> ValueOption.iter (fun x -> v.Content <- x.RenderNew () :?> System.Windows.Media.Media3D.Model3D)
    this._Transform |> ValueOption.iter (fun x -> v.Transform <- x.RenderNew () :?> System.Windows.Media.Media3D.Transform3D)
    this._Children |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.Visual3D |> v.Children.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ModelVisual3D, v: System.Windows.Media.Media3D.ModelVisual3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefContent prev._Content this._Content id (fun x -> v.Content <- x)
    updateValue _DefTransform prev._Transform this._Transform id (fun x -> v.Transform <- x)
    updateChildren prev._Children this._Children v.Children
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.ModelVisual3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ModelVisual3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AbstractClass>]
type UIElement3D() =
  inherit Visual3D()

  static let _DefAllowDrop = System.Windows.UIElement3D.AllowDropProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefFocusable = System.Windows.UIElement3D.FocusableProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsEnabled = System.Windows.UIElement3D.IsEnabledProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefIsHitTestVisible = System.Windows.UIElement3D.IsHitTestVisibleProperty.DefaultMetadata.DefaultValue :?> bool
  static let _DefVisibility = System.Windows.UIElement3D.VisibilityProperty.DefaultMetadata.DefaultValue :?> System.Windows.Visibility

  [<DefaultValue>] val mutable private _AllowDrop: bool voption
  member this.AllowDrop with set x = this._AllowDrop <- ValueSome x

  [<DefaultValue>] val mutable private _Focusable: bool voption
  member this.Focusable with set x = this._Focusable <- ValueSome x

  [<DefaultValue>] val mutable private _IsEnabled: bool voption
  member this.IsEnabled with set x = this._IsEnabled <- ValueSome x

  [<DefaultValue>] val mutable private _IsHitTestVisible: bool voption
  member this.IsHitTestVisible with set x = this._IsHitTestVisible <- ValueSome x

  [<DefaultValue>] val mutable private _Visibility: System.Windows.Visibility voption
  member this.Visibility with set x = this._Visibility <- ValueSome x

  [<DefaultValue>] val mutable private _DragEnter: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragEnter with set x = this._DragEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragLeave: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragLeave with set x = this._DragLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _DragOver: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.DragOver with set x = this._DragOver <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _Drop: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.Drop with set x = this._Drop <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _FocusableChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.FocusableChanged with set x = this._FocusableChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GiveFeedback: EventHandlerWrapper<System.Windows.GiveFeedbackEventArgs> voption
  member this.GiveFeedback with set x = this._GiveFeedback <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotFocus: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.GotFocus with set x = this._GotFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.GotKeyboardFocus with set x = this._GotKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotMouseCapture: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.GotMouseCapture with set x = this._GotMouseCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotStylusCapture: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.GotStylusCapture with set x = this._GotStylusCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _GotTouchCapture: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.GotTouchCapture with set x = this._GotTouchCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsEnabledChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsEnabledChanged with set x = this._IsEnabledChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsHitTestVisibleChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsHitTestVisibleChanged with set x = this._IsHitTestVisibleChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsKeyboardFocusWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsKeyboardFocusWithinChanged with set x = this._IsKeyboardFocusWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsKeyboardFocusedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsKeyboardFocusedChanged with set x = this._IsKeyboardFocusedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseCaptureWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseCaptureWithinChanged with set x = this._IsMouseCaptureWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseCapturedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseCapturedChanged with set x = this._IsMouseCapturedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsMouseDirectlyOverChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsMouseDirectlyOverChanged with set x = this._IsMouseDirectlyOverChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusCaptureWithinChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusCaptureWithinChanged with set x = this._IsStylusCaptureWithinChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusCapturedChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusCapturedChanged with set x = this._IsStylusCapturedChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsStylusDirectlyOverChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsStylusDirectlyOverChanged with set x = this._IsStylusDirectlyOverChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _IsVisibleChanged: EventHandlerWrapper<System.Windows.DependencyPropertyChangedEventArgs> voption
  member this.IsVisibleChanged with set x = this._IsVisibleChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _KeyDown: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.KeyDown with set x = this._KeyDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _KeyUp: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.KeyUp with set x = this._KeyUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostFocus: EventHandlerWrapper<System.Windows.RoutedEventArgs> voption
  member this.LostFocus with set x = this._LostFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.LostKeyboardFocus with set x = this._LostKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostMouseCapture: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.LostMouseCapture with set x = this._LostMouseCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostStylusCapture: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.LostStylusCapture with set x = this._LostStylusCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _LostTouchCapture: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.LostTouchCapture with set x = this._LostTouchCapture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseDown with set x = this._MouseDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseEnter: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseEnter with set x = this._MouseEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeave: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseLeave with set x = this._MouseLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeftButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseLeftButtonDown with set x = this._MouseLeftButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseLeftButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseLeftButtonUp with set x = this._MouseLeftButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseMove: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.MouseMove with set x = this._MouseMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseRightButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseRightButtonDown with set x = this._MouseRightButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseRightButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseRightButtonUp with set x = this._MouseRightButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.MouseUp with set x = this._MouseUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _MouseWheel: EventHandlerWrapper<System.Windows.Input.MouseWheelEventArgs> voption
  member this.MouseWheel with set x = this._MouseWheel <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragEnter: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragEnter with set x = this._PreviewDragEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragLeave: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragLeave with set x = this._PreviewDragLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDragOver: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDragOver with set x = this._PreviewDragOver <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewDrop: EventHandlerWrapper<System.Windows.DragEventArgs> voption
  member this.PreviewDrop with set x = this._PreviewDrop <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewGiveFeedback: EventHandlerWrapper<System.Windows.GiveFeedbackEventArgs> voption
  member this.PreviewGiveFeedback with set x = this._PreviewGiveFeedback <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewGotKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.PreviewGotKeyboardFocus with set x = this._PreviewGotKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewKeyDown: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.PreviewKeyDown with set x = this._PreviewKeyDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewKeyUp: EventHandlerWrapper<System.Windows.Input.KeyEventArgs> voption
  member this.PreviewKeyUp with set x = this._PreviewKeyUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewLostKeyboardFocus: EventHandlerWrapper<System.Windows.Input.KeyboardFocusChangedEventArgs> voption
  member this.PreviewLostKeyboardFocus with set x = this._PreviewLostKeyboardFocus <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseDown with set x = this._PreviewMouseDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseLeftButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseLeftButtonDown with set x = this._PreviewMouseLeftButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseLeftButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseLeftButtonUp with set x = this._PreviewMouseLeftButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseMove: EventHandlerWrapper<System.Windows.Input.MouseEventArgs> voption
  member this.PreviewMouseMove with set x = this._PreviewMouseMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseRightButtonDown: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseRightButtonDown with set x = this._PreviewMouseRightButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseRightButtonUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseRightButtonUp with set x = this._PreviewMouseRightButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseUp: EventHandlerWrapper<System.Windows.Input.MouseButtonEventArgs> voption
  member this.PreviewMouseUp with set x = this._PreviewMouseUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewMouseWheel: EventHandlerWrapper<System.Windows.Input.MouseWheelEventArgs> voption
  member this.PreviewMouseWheel with set x = this._PreviewMouseWheel <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewQueryContinueDrag: EventHandlerWrapper<System.Windows.QueryContinueDragEventArgs> voption
  member this.PreviewQueryContinueDrag with set x = this._PreviewQueryContinueDrag <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusButtonDown: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.PreviewStylusButtonDown with set x = this._PreviewStylusButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusButtonUp: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.PreviewStylusButtonUp with set x = this._PreviewStylusButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusDown: EventHandlerWrapper<System.Windows.Input.StylusDownEventArgs> voption
  member this.PreviewStylusDown with set x = this._PreviewStylusDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusInAirMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusInAirMove with set x = this._PreviewStylusInAirMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusInRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusInRange with set x = this._PreviewStylusInRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusMove with set x = this._PreviewStylusMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusOutOfRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusOutOfRange with set x = this._PreviewStylusOutOfRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusSystemGesture: EventHandlerWrapper<System.Windows.Input.StylusSystemGestureEventArgs> voption
  member this.PreviewStylusSystemGesture with set x = this._PreviewStylusSystemGesture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewStylusUp: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.PreviewStylusUp with set x = this._PreviewStylusUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTextInput: EventHandlerWrapper<System.Windows.Input.TextCompositionEventArgs> voption
  member this.PreviewTextInput with set x = this._PreviewTextInput <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchDown: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchDown with set x = this._PreviewTouchDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchMove: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchMove with set x = this._PreviewTouchMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _PreviewTouchUp: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.PreviewTouchUp with set x = this._PreviewTouchUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _QueryContinueDrag: EventHandlerWrapper<System.Windows.QueryContinueDragEventArgs> voption
  member this.QueryContinueDrag with set x = this._QueryContinueDrag <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _QueryCursor: EventHandlerWrapper<System.Windows.Input.QueryCursorEventArgs> voption
  member this.QueryCursor with set x = this._QueryCursor <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusButtonDown: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.StylusButtonDown with set x = this._StylusButtonDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusButtonUp: EventHandlerWrapper<System.Windows.Input.StylusButtonEventArgs> voption
  member this.StylusButtonUp with set x = this._StylusButtonUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusDown: EventHandlerWrapper<System.Windows.Input.StylusDownEventArgs> voption
  member this.StylusDown with set x = this._StylusDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusEnter: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusEnter with set x = this._StylusEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusInAirMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusInAirMove with set x = this._StylusInAirMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusInRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusInRange with set x = this._StylusInRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusLeave: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusLeave with set x = this._StylusLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusMove: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusMove with set x = this._StylusMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusOutOfRange: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusOutOfRange with set x = this._StylusOutOfRange <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusSystemGesture: EventHandlerWrapper<System.Windows.Input.StylusSystemGestureEventArgs> voption
  member this.StylusSystemGesture with set x = this._StylusSystemGesture <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _StylusUp: EventHandlerWrapper<System.Windows.Input.StylusEventArgs> voption
  member this.StylusUp with set x = this._StylusUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TextInput: EventHandlerWrapper<System.Windows.Input.TextCompositionEventArgs> voption
  member this.TextInput with set x = this._TextInput <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchDown: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchDown with set x = this._TouchDown <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchEnter: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchEnter with set x = this._TouchEnter <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchLeave: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchLeave with set x = this._TouchLeave <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchMove: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchMove with set x = this._TouchMove <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _TouchUp: EventHandlerWrapper<System.Windows.Input.TouchEventArgs> voption
  member this.TouchUp with set x = this._TouchUp <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.UIElement3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.UIElement3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._AllowDrop |> ValueOption.iter (fun x -> v.AllowDrop <- x)
    this._Focusable |> ValueOption.iter (fun x -> v.Focusable <- x)
    this._IsEnabled |> ValueOption.iter (fun x -> v.IsEnabled <- x)
    this._IsHitTestVisible |> ValueOption.iter (fun x -> v.IsHitTestVisible <- x)
    this._Visibility |> ValueOption.iter (fun x -> v.Visibility <- x)
    this._DragEnter |> ValueOption.iter (fun x -> x.Subscription <- v.DragEnter.Subscribe x.Fn)
    this._DragLeave |> ValueOption.iter (fun x -> x.Subscription <- v.DragLeave.Subscribe x.Fn)
    this._DragOver |> ValueOption.iter (fun x -> x.Subscription <- v.DragOver.Subscribe x.Fn)
    this._Drop |> ValueOption.iter (fun x -> x.Subscription <- v.Drop.Subscribe x.Fn)
    this._FocusableChanged |> ValueOption.iter (fun x -> x.Subscription <- v.FocusableChanged.Subscribe x.Fn)
    this._GiveFeedback |> ValueOption.iter (fun x -> x.Subscription <- v.GiveFeedback.Subscribe x.Fn)
    this._GotFocus |> ValueOption.iter (fun x -> x.Subscription <- v.GotFocus.Subscribe x.Fn)
    this._GotKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.GotKeyboardFocus.Subscribe x.Fn)
    this._GotMouseCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotMouseCapture.Subscribe x.Fn)
    this._GotStylusCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotStylusCapture.Subscribe x.Fn)
    this._GotTouchCapture |> ValueOption.iter (fun x -> x.Subscription <- v.GotTouchCapture.Subscribe x.Fn)
    this._IsEnabledChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsEnabledChanged.Subscribe x.Fn)
    this._IsHitTestVisibleChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsHitTestVisibleChanged.Subscribe x.Fn)
    this._IsKeyboardFocusWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsKeyboardFocusWithinChanged.Subscribe x.Fn)
    this._IsKeyboardFocusedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsKeyboardFocusedChanged.Subscribe x.Fn)
    this._IsMouseCaptureWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseCaptureWithinChanged.Subscribe x.Fn)
    this._IsMouseCapturedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseCapturedChanged.Subscribe x.Fn)
    this._IsMouseDirectlyOverChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsMouseDirectlyOverChanged.Subscribe x.Fn)
    this._IsStylusCaptureWithinChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusCaptureWithinChanged.Subscribe x.Fn)
    this._IsStylusCapturedChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusCapturedChanged.Subscribe x.Fn)
    this._IsStylusDirectlyOverChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsStylusDirectlyOverChanged.Subscribe x.Fn)
    this._IsVisibleChanged |> ValueOption.iter (fun x -> x.Subscription <- v.IsVisibleChanged.Subscribe x.Fn)
    this._KeyDown |> ValueOption.iter (fun x -> x.Subscription <- v.KeyDown.Subscribe x.Fn)
    this._KeyUp |> ValueOption.iter (fun x -> x.Subscription <- v.KeyUp.Subscribe x.Fn)
    this._LostFocus |> ValueOption.iter (fun x -> x.Subscription <- v.LostFocus.Subscribe x.Fn)
    this._LostKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.LostKeyboardFocus.Subscribe x.Fn)
    this._LostMouseCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostMouseCapture.Subscribe x.Fn)
    this._LostStylusCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostStylusCapture.Subscribe x.Fn)
    this._LostTouchCapture |> ValueOption.iter (fun x -> x.Subscription <- v.LostTouchCapture.Subscribe x.Fn)
    this._MouseDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseDown.Subscribe x.Fn)
    this._MouseEnter |> ValueOption.iter (fun x -> x.Subscription <- v.MouseEnter.Subscribe x.Fn)
    this._MouseLeave |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeave.Subscribe x.Fn)
    this._MouseLeftButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeftButtonDown.Subscribe x.Fn)
    this._MouseLeftButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseLeftButtonUp.Subscribe x.Fn)
    this._MouseMove |> ValueOption.iter (fun x -> x.Subscription <- v.MouseMove.Subscribe x.Fn)
    this._MouseRightButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.MouseRightButtonDown.Subscribe x.Fn)
    this._MouseRightButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseRightButtonUp.Subscribe x.Fn)
    this._MouseUp |> ValueOption.iter (fun x -> x.Subscription <- v.MouseUp.Subscribe x.Fn)
    this._MouseWheel |> ValueOption.iter (fun x -> x.Subscription <- v.MouseWheel.Subscribe x.Fn)
    this._PreviewDragEnter |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragEnter.Subscribe x.Fn)
    this._PreviewDragLeave |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragLeave.Subscribe x.Fn)
    this._PreviewDragOver |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDragOver.Subscribe x.Fn)
    this._PreviewDrop |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewDrop.Subscribe x.Fn)
    this._PreviewGiveFeedback |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewGiveFeedback.Subscribe x.Fn)
    this._PreviewGotKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewGotKeyboardFocus.Subscribe x.Fn)
    this._PreviewKeyDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewKeyDown.Subscribe x.Fn)
    this._PreviewKeyUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewKeyUp.Subscribe x.Fn)
    this._PreviewLostKeyboardFocus |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewLostKeyboardFocus.Subscribe x.Fn)
    this._PreviewMouseDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseDown.Subscribe x.Fn)
    this._PreviewMouseLeftButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseLeftButtonDown.Subscribe x.Fn)
    this._PreviewMouseLeftButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseLeftButtonUp.Subscribe x.Fn)
    this._PreviewMouseMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseMove.Subscribe x.Fn)
    this._PreviewMouseRightButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseRightButtonDown.Subscribe x.Fn)
    this._PreviewMouseRightButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseRightButtonUp.Subscribe x.Fn)
    this._PreviewMouseUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseUp.Subscribe x.Fn)
    this._PreviewMouseWheel |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewMouseWheel.Subscribe x.Fn)
    this._PreviewQueryContinueDrag |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewQueryContinueDrag.Subscribe x.Fn)
    this._PreviewStylusButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusButtonDown.Subscribe x.Fn)
    this._PreviewStylusButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusButtonUp.Subscribe x.Fn)
    this._PreviewStylusDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusDown.Subscribe x.Fn)
    this._PreviewStylusInAirMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusInAirMove.Subscribe x.Fn)
    this._PreviewStylusInRange |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusInRange.Subscribe x.Fn)
    this._PreviewStylusMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusMove.Subscribe x.Fn)
    this._PreviewStylusOutOfRange |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusOutOfRange.Subscribe x.Fn)
    this._PreviewStylusSystemGesture |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusSystemGesture.Subscribe x.Fn)
    this._PreviewStylusUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewStylusUp.Subscribe x.Fn)
    this._PreviewTextInput |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTextInput.Subscribe x.Fn)
    this._PreviewTouchDown |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchDown.Subscribe x.Fn)
    this._PreviewTouchMove |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchMove.Subscribe x.Fn)
    this._PreviewTouchUp |> ValueOption.iter (fun x -> x.Subscription <- v.PreviewTouchUp.Subscribe x.Fn)
    this._QueryContinueDrag |> ValueOption.iter (fun x -> x.Subscription <- v.QueryContinueDrag.Subscribe x.Fn)
    this._QueryCursor |> ValueOption.iter (fun x -> x.Subscription <- v.QueryCursor.Subscribe x.Fn)
    this._StylusButtonDown |> ValueOption.iter (fun x -> x.Subscription <- v.StylusButtonDown.Subscribe x.Fn)
    this._StylusButtonUp |> ValueOption.iter (fun x -> x.Subscription <- v.StylusButtonUp.Subscribe x.Fn)
    this._StylusDown |> ValueOption.iter (fun x -> x.Subscription <- v.StylusDown.Subscribe x.Fn)
    this._StylusEnter |> ValueOption.iter (fun x -> x.Subscription <- v.StylusEnter.Subscribe x.Fn)
    this._StylusInAirMove |> ValueOption.iter (fun x -> x.Subscription <- v.StylusInAirMove.Subscribe x.Fn)
    this._StylusInRange |> ValueOption.iter (fun x -> x.Subscription <- v.StylusInRange.Subscribe x.Fn)
    this._StylusLeave |> ValueOption.iter (fun x -> x.Subscription <- v.StylusLeave.Subscribe x.Fn)
    this._StylusMove |> ValueOption.iter (fun x -> x.Subscription <- v.StylusMove.Subscribe x.Fn)
    this._StylusOutOfRange |> ValueOption.iter (fun x -> x.Subscription <- v.StylusOutOfRange.Subscribe x.Fn)
    this._StylusSystemGesture |> ValueOption.iter (fun x -> x.Subscription <- v.StylusSystemGesture.Subscribe x.Fn)
    this._StylusUp |> ValueOption.iter (fun x -> x.Subscription <- v.StylusUp.Subscribe x.Fn)
    this._TextInput |> ValueOption.iter (fun x -> x.Subscription <- v.TextInput.Subscribe x.Fn)
    this._TouchDown |> ValueOption.iter (fun x -> x.Subscription <- v.TouchDown.Subscribe x.Fn)
    this._TouchEnter |> ValueOption.iter (fun x -> x.Subscription <- v.TouchEnter.Subscribe x.Fn)
    this._TouchLeave |> ValueOption.iter (fun x -> x.Subscription <- v.TouchLeave.Subscribe x.Fn)
    this._TouchMove |> ValueOption.iter (fun x -> x.Subscription <- v.TouchMove.Subscribe x.Fn)
    this._TouchUp |> ValueOption.iter (fun x -> x.Subscription <- v.TouchUp.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: UIElement3D, v: System.Windows.UIElement3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefAllowDrop prev._AllowDrop this._AllowDrop id (fun x -> v.AllowDrop <- x)
    updateValue _DefFocusable prev._Focusable this._Focusable id (fun x -> v.Focusable <- x)
    updateValue _DefIsEnabled prev._IsEnabled this._IsEnabled id (fun x -> v.IsEnabled <- x)
    updateValue _DefIsHitTestVisible prev._IsHitTestVisible this._IsHitTestVisible id (fun x -> v.IsHitTestVisible <- x)
    updateValue _DefVisibility prev._Visibility this._Visibility id (fun x -> v.Visibility <- x)
    updateFn prev._DragEnter this._DragEnter v.DragEnter
    updateFn prev._DragLeave this._DragLeave v.DragLeave
    updateFn prev._DragOver this._DragOver v.DragOver
    updateFn prev._Drop this._Drop v.Drop
    updateFn prev._FocusableChanged this._FocusableChanged v.FocusableChanged
    updateFn prev._GiveFeedback this._GiveFeedback v.GiveFeedback
    updateFn prev._GotFocus this._GotFocus v.GotFocus
    updateFn prev._GotKeyboardFocus this._GotKeyboardFocus v.GotKeyboardFocus
    updateFn prev._GotMouseCapture this._GotMouseCapture v.GotMouseCapture
    updateFn prev._GotStylusCapture this._GotStylusCapture v.GotStylusCapture
    updateFn prev._GotTouchCapture this._GotTouchCapture v.GotTouchCapture
    updateFn prev._IsEnabledChanged this._IsEnabledChanged v.IsEnabledChanged
    updateFn prev._IsHitTestVisibleChanged this._IsHitTestVisibleChanged v.IsHitTestVisibleChanged
    updateFn prev._IsKeyboardFocusWithinChanged this._IsKeyboardFocusWithinChanged v.IsKeyboardFocusWithinChanged
    updateFn prev._IsKeyboardFocusedChanged this._IsKeyboardFocusedChanged v.IsKeyboardFocusedChanged
    updateFn prev._IsMouseCaptureWithinChanged this._IsMouseCaptureWithinChanged v.IsMouseCaptureWithinChanged
    updateFn prev._IsMouseCapturedChanged this._IsMouseCapturedChanged v.IsMouseCapturedChanged
    updateFn prev._IsMouseDirectlyOverChanged this._IsMouseDirectlyOverChanged v.IsMouseDirectlyOverChanged
    updateFn prev._IsStylusCaptureWithinChanged this._IsStylusCaptureWithinChanged v.IsStylusCaptureWithinChanged
    updateFn prev._IsStylusCapturedChanged this._IsStylusCapturedChanged v.IsStylusCapturedChanged
    updateFn prev._IsStylusDirectlyOverChanged this._IsStylusDirectlyOverChanged v.IsStylusDirectlyOverChanged
    updateFn prev._IsVisibleChanged this._IsVisibleChanged v.IsVisibleChanged
    updateFn prev._KeyDown this._KeyDown v.KeyDown
    updateFn prev._KeyUp this._KeyUp v.KeyUp
    updateFn prev._LostFocus this._LostFocus v.LostFocus
    updateFn prev._LostKeyboardFocus this._LostKeyboardFocus v.LostKeyboardFocus
    updateFn prev._LostMouseCapture this._LostMouseCapture v.LostMouseCapture
    updateFn prev._LostStylusCapture this._LostStylusCapture v.LostStylusCapture
    updateFn prev._LostTouchCapture this._LostTouchCapture v.LostTouchCapture
    updateFn prev._MouseDown this._MouseDown v.MouseDown
    updateFn prev._MouseEnter this._MouseEnter v.MouseEnter
    updateFn prev._MouseLeave this._MouseLeave v.MouseLeave
    updateFn prev._MouseLeftButtonDown this._MouseLeftButtonDown v.MouseLeftButtonDown
    updateFn prev._MouseLeftButtonUp this._MouseLeftButtonUp v.MouseLeftButtonUp
    updateFn prev._MouseMove this._MouseMove v.MouseMove
    updateFn prev._MouseRightButtonDown this._MouseRightButtonDown v.MouseRightButtonDown
    updateFn prev._MouseRightButtonUp this._MouseRightButtonUp v.MouseRightButtonUp
    updateFn prev._MouseUp this._MouseUp v.MouseUp
    updateFn prev._MouseWheel this._MouseWheel v.MouseWheel
    updateFn prev._PreviewDragEnter this._PreviewDragEnter v.PreviewDragEnter
    updateFn prev._PreviewDragLeave this._PreviewDragLeave v.PreviewDragLeave
    updateFn prev._PreviewDragOver this._PreviewDragOver v.PreviewDragOver
    updateFn prev._PreviewDrop this._PreviewDrop v.PreviewDrop
    updateFn prev._PreviewGiveFeedback this._PreviewGiveFeedback v.PreviewGiveFeedback
    updateFn prev._PreviewGotKeyboardFocus this._PreviewGotKeyboardFocus v.PreviewGotKeyboardFocus
    updateFn prev._PreviewKeyDown this._PreviewKeyDown v.PreviewKeyDown
    updateFn prev._PreviewKeyUp this._PreviewKeyUp v.PreviewKeyUp
    updateFn prev._PreviewLostKeyboardFocus this._PreviewLostKeyboardFocus v.PreviewLostKeyboardFocus
    updateFn prev._PreviewMouseDown this._PreviewMouseDown v.PreviewMouseDown
    updateFn prev._PreviewMouseLeftButtonDown this._PreviewMouseLeftButtonDown v.PreviewMouseLeftButtonDown
    updateFn prev._PreviewMouseLeftButtonUp this._PreviewMouseLeftButtonUp v.PreviewMouseLeftButtonUp
    updateFn prev._PreviewMouseMove this._PreviewMouseMove v.PreviewMouseMove
    updateFn prev._PreviewMouseRightButtonDown this._PreviewMouseRightButtonDown v.PreviewMouseRightButtonDown
    updateFn prev._PreviewMouseRightButtonUp this._PreviewMouseRightButtonUp v.PreviewMouseRightButtonUp
    updateFn prev._PreviewMouseUp this._PreviewMouseUp v.PreviewMouseUp
    updateFn prev._PreviewMouseWheel this._PreviewMouseWheel v.PreviewMouseWheel
    updateFn prev._PreviewQueryContinueDrag this._PreviewQueryContinueDrag v.PreviewQueryContinueDrag
    updateFn prev._PreviewStylusButtonDown this._PreviewStylusButtonDown v.PreviewStylusButtonDown
    updateFn prev._PreviewStylusButtonUp this._PreviewStylusButtonUp v.PreviewStylusButtonUp
    updateFn prev._PreviewStylusDown this._PreviewStylusDown v.PreviewStylusDown
    updateFn prev._PreviewStylusInAirMove this._PreviewStylusInAirMove v.PreviewStylusInAirMove
    updateFn prev._PreviewStylusInRange this._PreviewStylusInRange v.PreviewStylusInRange
    updateFn prev._PreviewStylusMove this._PreviewStylusMove v.PreviewStylusMove
    updateFn prev._PreviewStylusOutOfRange this._PreviewStylusOutOfRange v.PreviewStylusOutOfRange
    updateFn prev._PreviewStylusSystemGesture this._PreviewStylusSystemGesture v.PreviewStylusSystemGesture
    updateFn prev._PreviewStylusUp this._PreviewStylusUp v.PreviewStylusUp
    updateFn prev._PreviewTextInput this._PreviewTextInput v.PreviewTextInput
    updateFn prev._PreviewTouchDown this._PreviewTouchDown v.PreviewTouchDown
    updateFn prev._PreviewTouchMove this._PreviewTouchMove v.PreviewTouchMove
    updateFn prev._PreviewTouchUp this._PreviewTouchUp v.PreviewTouchUp
    updateFn prev._QueryContinueDrag this._QueryContinueDrag v.QueryContinueDrag
    updateFn prev._QueryCursor this._QueryCursor v.QueryCursor
    updateFn prev._StylusButtonDown this._StylusButtonDown v.StylusButtonDown
    updateFn prev._StylusButtonUp this._StylusButtonUp v.StylusButtonUp
    updateFn prev._StylusDown this._StylusDown v.StylusDown
    updateFn prev._StylusEnter this._StylusEnter v.StylusEnter
    updateFn prev._StylusInAirMove this._StylusInAirMove v.StylusInAirMove
    updateFn prev._StylusInRange this._StylusInRange v.StylusInRange
    updateFn prev._StylusLeave this._StylusLeave v.StylusLeave
    updateFn prev._StylusMove this._StylusMove v.StylusMove
    updateFn prev._StylusOutOfRange this._StylusOutOfRange v.StylusOutOfRange
    updateFn prev._StylusSystemGesture this._StylusSystemGesture v.StylusSystemGesture
    updateFn prev._StylusUp this._StylusUp v.StylusUp
    updateFn prev._TextInput this._TextInput v.TextInput
    updateFn prev._TouchDown this._TouchDown v.TouchDown
    updateFn prev._TouchEnter this._TouchEnter v.TouchEnter
    updateFn prev._TouchLeave this._TouchLeave v.TouchLeave
    updateFn prev._TouchMove this._TouchMove v.TouchMove
    updateFn prev._TouchUp this._TouchUp v.TouchUp
    this.SilenceEvents <- false


type ContainerUIElement3D(setProps: ContainerUIElement3D -> unit) as this =
  inherit UIElement3D()


  do setProps this

  new() = ContainerUIElement3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.ContainerUIElement3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.ContainerUIElement3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Children: Visual3D list voption
  member this.Children with set x = this._Children <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.ContainerUIElement3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.ContainerUIElement3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Children |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.Media.Media3D.Visual3D |> v.Children.Add |> ignore))
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ContainerUIElement3D, v: System.Windows.Media.Media3D.ContainerUIElement3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateChildren prev._Children this._Children v.Children
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.ContainerUIElement3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ContainerUIElement3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type ModelUIElement3D(setProps: ModelUIElement3D -> unit) as this =
  inherit UIElement3D()

  static let _DefModel = System.Windows.Media.Media3D.ModelUIElement3D.ModelProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Model3D

  do setProps this

  new() = ModelUIElement3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.ModelUIElement3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.ModelUIElement3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Model: Model3D voption
  member this.Model with set x = this._Model <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.ModelUIElement3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.ModelUIElement3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Model |> ValueOption.iter (fun x -> v.Model <- x.RenderNew () :?> System.Windows.Media.Media3D.Model3D)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: ModelUIElement3D, v: System.Windows.Media.Media3D.ModelUIElement3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefModel prev._Model this._Model id (fun x -> v.Model <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.ModelUIElement3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? ModelUIElement3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type Viewport2DVisual3D(setProps: Viewport2DVisual3D -> unit) as this =
  inherit Visual3D()

  static let _DefCacheMode = System.Windows.Media.Media3D.Viewport2DVisual3D.CacheModeProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.CacheMode
  static let _DefGeometry = System.Windows.Media.Media3D.Viewport2DVisual3D.GeometryProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Geometry3D
  static let _DefMaterial = System.Windows.Media.Media3D.Viewport2DVisual3D.MaterialProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Media3D.Material
  static let _DefVisual = System.Windows.Media.Media3D.Viewport2DVisual3D.VisualProperty.DefaultMetadata.DefaultValue :?> System.Windows.Media.Visual

  do setProps this

  new() = Viewport2DVisual3D(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.Media.Media3D.Viewport2DVisual3D voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.Media.Media3D.Viewport2DVisual3D voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _CacheMode: CacheMode voption
  member this.CacheMode with set x = this._CacheMode <- ValueSome x

  [<DefaultValue>] val mutable private _Geometry: Geometry3D voption
  member this.Geometry with set x = this._Geometry <- ValueSome x

  [<DefaultValue>] val mutable private _Material: Material voption
  member this.Material with set x = this._Material <- ValueSome x

  [<DefaultValue>] val mutable private _Visual: Visual voption
  member this.Visual with set x = this._Visual <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.Media.Media3D.Viewport2DVisual3D> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.Media.Media3D.Viewport2DVisual3D) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._CacheMode |> ValueOption.iter (fun x -> v.CacheMode <- x.RenderNew () :?> System.Windows.Media.CacheMode)
    this._Geometry |> ValueOption.iter (fun x -> v.Geometry <- x.RenderNew () :?> System.Windows.Media.Media3D.Geometry3D)
    this._Material |> ValueOption.iter (fun x -> v.Material <- x.RenderNew () :?> System.Windows.Media.Media3D.Material)
    this._Visual |> ValueOption.iter (fun x -> v.Visual <- x.RenderNew () :?> System.Windows.Media.Visual)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: Viewport2DVisual3D, v: System.Windows.Media.Media3D.Viewport2DVisual3D) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue _DefCacheMode prev._CacheMode this._CacheMode id (fun x -> v.CacheMode <- x)
    updateValue _DefGeometry prev._Geometry this._Geometry id (fun x -> v.Geometry <- x)
    updateValue _DefMaterial prev._Material this._Material id (fun x -> v.Material <- x)
    updateValue _DefVisual prev._Visual this._Visual id (fun x -> v.Visual <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.Media.Media3D.Viewport2DVisual3D())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? Viewport2DVisual3D as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VisualState(setProps: VisualState -> unit) as this =
  inherit DependencyObject()


  do setProps this

  new() = VisualState(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.VisualState voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.VisualState voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Name: string voption
  member this.Name with set x = this._Name <- ValueSome x

  [<DefaultValue>] val mutable private _Storyboard: Storyboard voption
  member this.Storyboard with set x = this._Storyboard <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.VisualState> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.VisualState) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Name |> ValueOption.iter (fun x -> v.Name <- x)
    this._Storyboard |> ValueOption.iter (fun x -> v.Storyboard <- x.RenderNew () :?> System.Windows.Media.Animation.Storyboard)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VisualState, v: System.Windows.VisualState) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<string> prev._Name this._Name id (fun x -> v.Name <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Storyboard> prev._Storyboard this._Storyboard id (fun x -> v.Storyboard <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.VisualState())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VisualState as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VisualStateGroup(setProps: VisualStateGroup -> unit) as this =
  inherit DependencyObject()


  do setProps this

  new() = VisualStateGroup(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.VisualStateGroup voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.VisualStateGroup voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _Name: string voption
  member this.Name with set x = this._Name <- ValueSome x

  [<DefaultValue>] val mutable private _States: VisualState list voption
  member this.States with set x = this._States <- ValueSome x

  [<DefaultValue>] val mutable private _Transitions: VisualTransition list voption
  member this.Transitions with set x = this._Transitions <- ValueSome x

  [<DefaultValue>] val mutable private _CurrentStateChanged: EventHandlerWrapper<System.Windows.VisualStateChangedEventArgs> voption
  member this.CurrentStateChanged with set x = this._CurrentStateChanged <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable private _CurrentStateChanging: EventHandlerWrapper<System.Windows.VisualStateChangedEventArgs> voption
  member this.CurrentStateChanging with set x = this._CurrentStateChanging <- EventHandlerWrapper(this, x) |> ValueSome

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.VisualStateGroup> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.VisualStateGroup) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._Name |> ValueOption.iter (fun x -> v.Name <- x)
    this._States |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.VisualState |> v.States.Add |> ignore))
    this._Transitions |> ValueOption.iter (fun xs -> xs |> List.iter (fun x -> x.RenderNew () :?> System.Windows.VisualTransition |> v.Transitions.Add |> ignore))
    this._CurrentStateChanged |> ValueOption.iter (fun x -> x.Subscription <- v.CurrentStateChanged.Subscribe x.Fn)
    this._CurrentStateChanging |> ValueOption.iter (fun x -> x.Subscription <- v.CurrentStateChanging.Subscribe x.Fn)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VisualStateGroup, v: System.Windows.VisualStateGroup) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<string> prev._Name this._Name id (fun x -> v.Name <- x)
    updateChildren prev._States this._States v.States
    updateChildren prev._Transitions this._Transitions v.Transitions
    updateFn prev._CurrentStateChanged this._CurrentStateChanged v.CurrentStateChanged
    updateFn prev._CurrentStateChanging this._CurrentStateChanging v.CurrentStateChanging
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.VisualStateGroup())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VisualStateGroup as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VisualStateManager(setProps: VisualStateManager -> unit) as this =
  inherit DependencyObject()


  do setProps this

  new() = VisualStateManager(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.VisualStateManager voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.VisualStateManager voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.VisualStateManager> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.VisualStateManager) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VisualStateManager, v: System.Windows.VisualStateManager) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.VisualStateManager())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VisualStateManager as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


type VisualTransition(setProps: VisualTransition -> unit) as this =
  inherit DependencyObject()


  do setProps this

  new() = VisualTransition(fun _ -> ())

  [<DefaultValue>] val mutable internal __View: System.Windows.VisualTransition voption

  [<DefaultValue>] val mutable private _InitialView: System.Windows.VisualTransition voption
  member this.InitialView with set x = this._InitialView <- ValueSome x

  [<DefaultValue>] val mutable private _From: string voption
  member this.From with set x = this._From <- ValueSome x

  [<DefaultValue>] val mutable private _GeneratedDuration: System.Windows.Duration voption
  member this.GeneratedDuration with set x = this._GeneratedDuration <- ValueSome x

  [<DefaultValue>] val mutable private _GeneratedEasingFunction: System.Windows.Media.Animation.IEasingFunction voption
  member this.GeneratedEasingFunction with set x = this._GeneratedEasingFunction <- ValueSome x

  [<DefaultValue>] val mutable private _Storyboard: Storyboard voption
  member this.Storyboard with set x = this._Storyboard <- ValueSome x

  [<DefaultValue>] val mutable private _To: string voption
  member this.To with set x = this._To <- ValueSome x

  [<DefaultValue>] val mutable _Ref: ViewRef<System.Windows.VisualTransition> voption
  member this.Ref with set x = this._Ref <- ValueSome x

  member internal this.SetInitialProps (v: System.Windows.VisualTransition) =
    base.SetInitialProps v
    this.SilenceEvents <- true
    this._From |> ValueOption.iter (fun x -> v.From <- x)
    this._GeneratedDuration |> ValueOption.iter (fun x -> v.GeneratedDuration <- x)
    this._GeneratedEasingFunction |> ValueOption.iter (fun x -> v.GeneratedEasingFunction <- x)
    this._Storyboard |> ValueOption.iter (fun x -> v.Storyboard <- x.RenderNew () :?> System.Windows.Media.Animation.Storyboard)
    this._To |> ValueOption.iter (fun x -> v.To <- x)
    this.SilenceEvents <- false

  member internal this.UpdateProps (prev: VisualTransition, v: System.Windows.VisualTransition) =
    base.UpdateProps (prev, v)
    this.SilenceEvents <- true
    updateValue Unchecked.defaultof<string> prev._From this._From id (fun x -> v.From <- x)
    updateValue Unchecked.defaultof<System.Windows.Duration> prev._GeneratedDuration this._GeneratedDuration id (fun x -> v.GeneratedDuration <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.IEasingFunction> prev._GeneratedEasingFunction this._GeneratedEasingFunction id (fun x -> v.GeneratedEasingFunction <- x)
    updateValue Unchecked.defaultof<System.Windows.Media.Animation.Storyboard> prev._Storyboard this._Storyboard id (fun x -> v.Storyboard <- x)
    updateValue Unchecked.defaultof<string> prev._To this._To id (fun x -> v.To <- x)
    this.SilenceEvents <- false

  override this.RenderNew () =
    let v = this._InitialView |> ValueOption.defaultValue (new System.Windows.VisualTransition())
    this.__View <- ValueSome v
    this._Ref |> ValueOption.iter (fun x -> x.Set v)
    this.SetInitialProps v
    upcast v

  override this.UpdateIncremental (prev: Node) =
    if System.Object.ReferenceEquals(this, prev) then ValueNone
    else
      match prev with
      | :? VisualTransition as prev ->
          match prev.__View with
          | ValueNone -> 
              this.RenderNew () |> ValueSome
          | ValueSome v ->
              this.__View <- ValueSome v
              this.UpdateProps (prev, v)
              ValueNone
      | _ -> this.RenderNew () |> ValueSome

  override this.UpdateIncrementalAndReturn (prev: Node) = 
    this.UpdateIncremental prev |> ignore
    upcast this.__View.Value


[<AutoOpen>]
module AttachedProps =

  module internal AutomationProperties =

    let _DefAutomationId = System.Windows.Automation.AutomationProperties.AutomationIdProperty.DefaultMetadata.DefaultValue
    let _DefName = System.Windows.Automation.AutomationProperties.NameProperty.DefaultMetadata.DefaultValue
    let _DefHelpText = System.Windows.Automation.AutomationProperties.HelpTextProperty.DefaultMetadata.DefaultValue
    let _DefAcceleratorKey = System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty.DefaultMetadata.DefaultValue
    let _DefAccessKey = System.Windows.Automation.AutomationProperties.AccessKeyProperty.DefaultMetadata.DefaultValue
    let _DefItemStatus = System.Windows.Automation.AutomationProperties.ItemStatusProperty.DefaultMetadata.DefaultValue
    let _DefItemType = System.Windows.Automation.AutomationProperties.ItemTypeProperty.DefaultMetadata.DefaultValue
    let _DefIsColumnHeader = System.Windows.Automation.AutomationProperties.IsColumnHeaderProperty.DefaultMetadata.DefaultValue
    let _DefIsRowHeader = System.Windows.Automation.AutomationProperties.IsRowHeaderProperty.DefaultMetadata.DefaultValue
    let _DefIsRequiredForForm = System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty.DefaultMetadata.DefaultValue
    let _DefLabeledBy = System.Windows.Automation.AutomationProperties.LabeledByProperty.DefaultMetadata.DefaultValue
    let _DefIsOffscreenBehavior = System.Windows.Automation.AutomationProperties.IsOffscreenBehaviorProperty.DefaultMetadata.DefaultValue
    let _DefLiveSetting = System.Windows.Automation.AutomationProperties.LiveSettingProperty.DefaultMetadata.DefaultValue
    let _DefPositionInSet = System.Windows.Automation.AutomationProperties.PositionInSetProperty.DefaultMetadata.DefaultValue
    let _DefSizeOfSet = System.Windows.Automation.AutomationProperties.SizeOfSetProperty.DefaultMetadata.DefaultValue

    let AutomationId = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetAutomationId(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let Name = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetName(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let HelpText = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetHelpText(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let AcceleratorKey = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetAcceleratorKey(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let AccessKey = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetAccessKey(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let ItemStatus = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetItemStatus(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let ItemType = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetItemType(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let IsColumnHeader = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetIsColumnHeader(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsRowHeader = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetIsRowHeader(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsRequiredForForm = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetIsRequiredForForm(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let LabeledBy = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetLabeledBy(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.UIElement> value))

    let IsOffscreenBehavior = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetIsOffscreenBehavior(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Automation.IsOffscreenBehavior> value))

    let LiveSetting = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetLiveSetting(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Automation.AutomationLiveSetting> value))

    let PositionInSet = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetPositionInSet(unbox<System.Windows.DependencyObject> target, unbox<int> value))

    let SizeOfSet = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Automation.AutomationProperties.SetSizeOfSet(unbox<System.Windows.DependencyObject> target, unbox<int> value))


  module internal Block =

    let _DefIsHyphenationEnabled = System.Windows.Documents.Block.IsHyphenationEnabledProperty.DefaultMetadata.DefaultValue
    let _DefTextAlignment = System.Windows.Documents.Block.TextAlignmentProperty.DefaultMetadata.DefaultValue
    let _DefLineHeight = System.Windows.Documents.Block.LineHeightProperty.DefaultMetadata.DefaultValue
    let _DefLineStackingStrategy = System.Windows.Documents.Block.LineStackingStrategyProperty.DefaultMetadata.DefaultValue

    let IsHyphenationEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Block.SetIsHyphenationEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let TextAlignment = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Block.SetTextAlignment(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.TextAlignment> value))

    let LineHeight = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Block.SetLineHeight(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let LineStackingStrategy = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Block.SetLineStackingStrategy(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.LineStackingStrategy> value))


  module internal Canvas =

    let _DefLeft = System.Windows.Controls.Canvas.LeftProperty.DefaultMetadata.DefaultValue
    let _DefTop = System.Windows.Controls.Canvas.TopProperty.DefaultMetadata.DefaultValue
    let _DefRight = System.Windows.Controls.Canvas.RightProperty.DefaultMetadata.DefaultValue
    let _DefBottom = System.Windows.Controls.Canvas.BottomProperty.DefaultMetadata.DefaultValue

    let Left = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Canvas.SetLeft(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Top = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Canvas.SetTop(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Right = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Canvas.SetRight(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Bottom = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Canvas.SetBottom(unbox<System.Windows.UIElement> target, unbox<float> value))


  module internal ContextMenuService =

    let _DefContextMenu = System.Windows.Controls.ContextMenuService.ContextMenuProperty.DefaultMetadata.DefaultValue
    let _DefHorizontalOffset = System.Windows.Controls.ContextMenuService.HorizontalOffsetProperty.DefaultMetadata.DefaultValue
    let _DefVerticalOffset = System.Windows.Controls.ContextMenuService.VerticalOffsetProperty.DefaultMetadata.DefaultValue
    let _DefHasDropShadow = System.Windows.Controls.ContextMenuService.HasDropShadowProperty.DefaultMetadata.DefaultValue
    let _DefPlacementTarget = System.Windows.Controls.ContextMenuService.PlacementTargetProperty.DefaultMetadata.DefaultValue
    let _DefPlacementRectangle = System.Windows.Controls.ContextMenuService.PlacementRectangleProperty.DefaultMetadata.DefaultValue
    let _DefPlacement = System.Windows.Controls.ContextMenuService.PlacementProperty.DefaultMetadata.DefaultValue
    let _DefShowOnDisabled = System.Windows.Controls.ContextMenuService.ShowOnDisabledProperty.DefaultMetadata.DefaultValue
    let _DefIsEnabled = System.Windows.Controls.ContextMenuService.IsEnabledProperty.DefaultMetadata.DefaultValue

    let ContextMenu = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetContextMenu(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.ContextMenu> value))

    let HorizontalOffset = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetHorizontalOffset(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let VerticalOffset = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetVerticalOffset(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let HasDropShadow = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetHasDropShadow(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let PlacementTarget = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetPlacementTarget(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.UIElement> value))

    let PlacementRectangle = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetPlacementRectangle(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Rect> value))

    let Placement = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetPlacement(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.Primitives.PlacementMode> value))

    let ShowOnDisabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetShowOnDisabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ContextMenuService.SetIsEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal DockPanel =

    let _DefDock = System.Windows.Controls.DockPanel.DockProperty.DefaultMetadata.DefaultValue

    let Dock = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.DockPanel.SetDock(unbox<System.Windows.UIElement> target, unbox<System.Windows.Controls.Dock> value))


  module internal DocumentViewerBase =

    let _DefIsMasterPage = System.Windows.Controls.Primitives.DocumentViewerBase.IsMasterPageProperty.DefaultMetadata.DefaultValue

    let IsMasterPage = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Primitives.DocumentViewerBase.SetIsMasterPage(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal FixedPage =

    let _DefLeft = System.Windows.Documents.FixedPage.LeftProperty.DefaultMetadata.DefaultValue
    let _DefTop = System.Windows.Documents.FixedPage.TopProperty.DefaultMetadata.DefaultValue
    let _DefRight = System.Windows.Documents.FixedPage.RightProperty.DefaultMetadata.DefaultValue
    let _DefBottom = System.Windows.Documents.FixedPage.BottomProperty.DefaultMetadata.DefaultValue
    let _DefNavigateUri = System.Windows.Documents.FixedPage.NavigateUriProperty.DefaultMetadata.DefaultValue

    let Left = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.FixedPage.SetLeft(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Top = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.FixedPage.SetTop(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Right = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.FixedPage.SetRight(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Bottom = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.FixedPage.SetBottom(unbox<System.Windows.UIElement> target, unbox<float> value))

    let NavigateUri = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.FixedPage.SetNavigateUri(unbox<System.Windows.UIElement> target, unbox<System.Uri> value))


  module internal FocusManager =

    let _DefFocusedElement = System.Windows.Input.FocusManager.FocusedElementProperty.DefaultMetadata.DefaultValue
    let _DefIsFocusScope = System.Windows.Input.FocusManager.IsFocusScopeProperty.DefaultMetadata.DefaultValue

    let FocusedElement = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.FocusManager.SetFocusedElement(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.IInputElement> value))

    let IsFocusScope = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.FocusManager.SetIsFocusScope(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal FrameworkElement =

    let _DefFlowDirection = System.Windows.FrameworkElement.FlowDirectionProperty.DefaultMetadata.DefaultValue

    let FlowDirection = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.FrameworkElement.SetFlowDirection(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FlowDirection> value))


  module internal Grid =

    let _DefColumn = System.Windows.Controls.Grid.ColumnProperty.DefaultMetadata.DefaultValue
    let _DefRow = System.Windows.Controls.Grid.RowProperty.DefaultMetadata.DefaultValue
    let _DefColumnSpan = System.Windows.Controls.Grid.ColumnSpanProperty.DefaultMetadata.DefaultValue
    let _DefRowSpan = System.Windows.Controls.Grid.RowSpanProperty.DefaultMetadata.DefaultValue
    let _DefIsSharedSizeScope = System.Windows.Controls.Grid.IsSharedSizeScopeProperty.DefaultMetadata.DefaultValue

    let Column = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Grid.SetColumn(unbox<System.Windows.UIElement> target, unbox<int> value))

    let Row = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Grid.SetRow(unbox<System.Windows.UIElement> target, unbox<int> value))

    let ColumnSpan = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Grid.SetColumnSpan(unbox<System.Windows.UIElement> target, unbox<int> value))

    let RowSpan = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Grid.SetRowSpan(unbox<System.Windows.UIElement> target, unbox<int> value))

    let IsSharedSizeScope = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Grid.SetIsSharedSizeScope(unbox<System.Windows.UIElement> target, unbox<bool> value))


  module internal InkCanvas =

    let _DefTop = System.Windows.Controls.InkCanvas.TopProperty.DefaultMetadata.DefaultValue
    let _DefBottom = System.Windows.Controls.InkCanvas.BottomProperty.DefaultMetadata.DefaultValue
    let _DefLeft = System.Windows.Controls.InkCanvas.LeftProperty.DefaultMetadata.DefaultValue
    let _DefRight = System.Windows.Controls.InkCanvas.RightProperty.DefaultMetadata.DefaultValue

    let Top = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.InkCanvas.SetTop(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Bottom = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.InkCanvas.SetBottom(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Left = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.InkCanvas.SetLeft(unbox<System.Windows.UIElement> target, unbox<float> value))

    let Right = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.InkCanvas.SetRight(unbox<System.Windows.UIElement> target, unbox<float> value))


  module internal InputLanguageManager =

    let _DefInputLanguage = System.Windows.Input.InputLanguageManager.InputLanguageProperty.DefaultMetadata.DefaultValue
    let _DefRestoreInputLanguage = System.Windows.Input.InputLanguageManager.RestoreInputLanguageProperty.DefaultMetadata.DefaultValue

    let InputLanguage = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputLanguageManager.SetInputLanguage(unbox<System.Windows.DependencyObject> target, unbox<System.Globalization.CultureInfo> value))

    let RestoreInputLanguage = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputLanguageManager.SetRestoreInputLanguage(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal InputMethod =

    let _DefIsInputMethodEnabled = System.Windows.Input.InputMethod.IsInputMethodEnabledProperty.DefaultMetadata.DefaultValue
    let _DefIsInputMethodSuspended = System.Windows.Input.InputMethod.IsInputMethodSuspendedProperty.DefaultMetadata.DefaultValue
    let _DefPreferredImeState = System.Windows.Input.InputMethod.PreferredImeStateProperty.DefaultMetadata.DefaultValue
    let _DefPreferredImeConversionMode = System.Windows.Input.InputMethod.PreferredImeConversionModeProperty.DefaultMetadata.DefaultValue
    let _DefPreferredImeSentenceMode = System.Windows.Input.InputMethod.PreferredImeSentenceModeProperty.DefaultMetadata.DefaultValue
    let _DefInputScope = System.Windows.Input.InputMethod.InputScopeProperty.DefaultMetadata.DefaultValue

    let IsInputMethodEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputMethod.SetIsInputMethodEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsInputMethodSuspended = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputMethod.SetIsInputMethodSuspended(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let PreferredImeState = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputMethod.SetPreferredImeState(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Input.InputMethodState> value))

    let PreferredImeConversionMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputMethod.SetPreferredImeConversionMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Input.ImeConversionModeValues> value))

    let PreferredImeSentenceMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputMethod.SetPreferredImeSentenceMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Input.ImeSentenceModeValues> value))

    let InputScope = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.InputMethod.SetInputScope(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Input.InputScope> value))


  module internal JournalEntry =

    let _DefName = System.Windows.Navigation.JournalEntry.NameProperty.DefaultMetadata.DefaultValue
    let _DefKeepAlive = System.Windows.Navigation.JournalEntry.KeepAliveProperty.DefaultMetadata.DefaultValue

    let Name = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Navigation.JournalEntry.SetName(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let KeepAlive = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Navigation.JournalEntry.SetKeepAlive(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal JournalEntryUnifiedViewConverter =

    let _DefJournalEntryPosition = System.Windows.Navigation.JournalEntryUnifiedViewConverter.JournalEntryPositionProperty.DefaultMetadata.DefaultValue

    let JournalEntryPosition = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Navigation.JournalEntryUnifiedViewConverter.SetJournalEntryPosition(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Navigation.JournalEntryPosition> value))


  module internal KeyboardNavigation =

    let _DefTabIndex = System.Windows.Input.KeyboardNavigation.TabIndexProperty.DefaultMetadata.DefaultValue
    let _DefIsTabStop = System.Windows.Input.KeyboardNavigation.IsTabStopProperty.DefaultMetadata.DefaultValue
    let _DefTabNavigation = System.Windows.Input.KeyboardNavigation.TabNavigationProperty.DefaultMetadata.DefaultValue
    let _DefControlTabNavigation = System.Windows.Input.KeyboardNavigation.ControlTabNavigationProperty.DefaultMetadata.DefaultValue
    let _DefDirectionalNavigation = System.Windows.Input.KeyboardNavigation.DirectionalNavigationProperty.DefaultMetadata.DefaultValue
    let _DefAcceptsReturn = System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty.DefaultMetadata.DefaultValue

    let TabIndex = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.KeyboardNavigation.SetTabIndex(unbox<System.Windows.DependencyObject> target, unbox<int> value))

    let IsTabStop = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.KeyboardNavigation.SetIsTabStop(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let TabNavigation = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.KeyboardNavigation.SetTabNavigation(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Input.KeyboardNavigationMode> value))

    let ControlTabNavigation = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.KeyboardNavigation.SetControlTabNavigation(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Input.KeyboardNavigationMode> value))

    let DirectionalNavigation = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.KeyboardNavigation.SetDirectionalNavigation(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Input.KeyboardNavigationMode> value))

    let AcceptsReturn = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.KeyboardNavigation.SetAcceptsReturn(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal NumberSubstitution =

    let _DefCultureSource = System.Windows.Media.NumberSubstitution.CultureSourceProperty.DefaultMetadata.DefaultValue
    let _DefCultureOverride = System.Windows.Media.NumberSubstitution.CultureOverrideProperty.DefaultMetadata.DefaultValue
    let _DefSubstitution = System.Windows.Media.NumberSubstitution.SubstitutionProperty.DefaultMetadata.DefaultValue

    let CultureSource = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.NumberSubstitution.SetCultureSource(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.NumberCultureSource> value))

    let CultureOverride = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.NumberSubstitution.SetCultureOverride(unbox<System.Windows.DependencyObject> target, unbox<System.Globalization.CultureInfo> value))

    let Substitution = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.NumberSubstitution.SetSubstitution(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.NumberSubstitutionMethod> value))


  module internal Panel =

    let _DefZIndex = System.Windows.Controls.Panel.ZIndexProperty.DefaultMetadata.DefaultValue

    let ZIndex = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Panel.SetZIndex(unbox<System.Windows.UIElement> target, unbox<int> value))


  module internal RenderOptions =

    let _DefEdgeMode = System.Windows.Media.RenderOptions.EdgeModeProperty.DefaultMetadata.DefaultValue
    let _DefBitmapScalingMode = System.Windows.Media.RenderOptions.BitmapScalingModeProperty.DefaultMetadata.DefaultValue
    let _DefClearTypeHint = System.Windows.Media.RenderOptions.ClearTypeHintProperty.DefaultMetadata.DefaultValue
    let _DefCachingHint = System.Windows.Media.RenderOptions.CachingHintProperty.DefaultMetadata.DefaultValue
    let _DefCacheInvalidationThresholdMinimum = System.Windows.Media.RenderOptions.CacheInvalidationThresholdMinimumProperty.DefaultMetadata.DefaultValue
    let _DefCacheInvalidationThresholdMaximum = System.Windows.Media.RenderOptions.CacheInvalidationThresholdMaximumProperty.DefaultMetadata.DefaultValue

    let EdgeMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.RenderOptions.SetEdgeMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.EdgeMode> value))

    let BitmapScalingMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.RenderOptions.SetBitmapScalingMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.BitmapScalingMode> value))

    let ClearTypeHint = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.RenderOptions.SetClearTypeHint(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.ClearTypeHint> value))

    let CachingHint = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.RenderOptions.SetCachingHint(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.CachingHint> value))

    let CacheInvalidationThresholdMinimum = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.RenderOptions.SetCacheInvalidationThresholdMinimum(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let CacheInvalidationThresholdMaximum = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.RenderOptions.SetCacheInvalidationThresholdMaximum(unbox<System.Windows.DependencyObject> target, unbox<float> value))


  module internal ScrollViewer =

    let _DefCanContentScroll = System.Windows.Controls.ScrollViewer.CanContentScrollProperty.DefaultMetadata.DefaultValue
    let _DefHorizontalScrollBarVisibility = System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue
    let _DefVerticalScrollBarVisibility = System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty.DefaultMetadata.DefaultValue
    let _DefIsDeferredScrollingEnabled = System.Windows.Controls.ScrollViewer.IsDeferredScrollingEnabledProperty.DefaultMetadata.DefaultValue
    let _DefPanningMode = System.Windows.Controls.ScrollViewer.PanningModeProperty.DefaultMetadata.DefaultValue
    let _DefPanningDeceleration = System.Windows.Controls.ScrollViewer.PanningDecelerationProperty.DefaultMetadata.DefaultValue
    let _DefPanningRatio = System.Windows.Controls.ScrollViewer.PanningRatioProperty.DefaultMetadata.DefaultValue

    let CanContentScroll = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ScrollViewer.SetCanContentScroll(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let HorizontalScrollBarVisibility = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ScrollViewer.SetHorizontalScrollBarVisibility(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.ScrollBarVisibility> value))

    let VerticalScrollBarVisibility = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ScrollViewer.SetVerticalScrollBarVisibility(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.ScrollBarVisibility> value))

    let IsDeferredScrollingEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ScrollViewer.SetIsDeferredScrollingEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let PanningMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ScrollViewer.SetPanningMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.PanningMode> value))

    let PanningDeceleration = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ScrollViewer.SetPanningDeceleration(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let PanningRatio = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ScrollViewer.SetPanningRatio(unbox<System.Windows.DependencyObject> target, unbox<float> value))


  module internal SelectiveScrollingGrid =

    let _DefSelectiveScrollingOrientation = System.Windows.Controls.Primitives.SelectiveScrollingGrid.SelectiveScrollingOrientationProperty.DefaultMetadata.DefaultValue

    let SelectiveScrollingOrientation = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Primitives.SelectiveScrollingGrid.SetSelectiveScrollingOrientation(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.SelectiveScrollingOrientation> value))


  module internal Selector =

    let _DefIsSelected = System.Windows.Controls.Primitives.Selector.IsSelectedProperty.DefaultMetadata.DefaultValue

    let IsSelected = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Primitives.Selector.SetIsSelected(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal SpellCheck =

    let _DefIsEnabled = System.Windows.Controls.SpellCheck.IsEnabledProperty.DefaultMetadata.DefaultValue
    let _DefSpellingReform = System.Windows.Controls.SpellCheck.SpellingReformProperty.DefaultMetadata.DefaultValue

    let IsEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.SpellCheck.SetIsEnabled(unbox<System.Windows.Controls.Primitives.TextBoxBase> target, unbox<bool> value))

    let SpellingReform = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.SpellCheck.SetSpellingReform(unbox<System.Windows.Controls.Primitives.TextBoxBase> target, unbox<System.Windows.Controls.SpellingReform> value))


  module internal Storyboard =

    let _DefTarget = System.Windows.Media.Animation.Storyboard.TargetProperty.DefaultMetadata.DefaultValue
    let _DefTargetName = System.Windows.Media.Animation.Storyboard.TargetNameProperty.DefaultMetadata.DefaultValue
    let _DefTargetProperty = System.Windows.Media.Animation.Storyboard.TargetPropertyProperty.DefaultMetadata.DefaultValue

    let Target = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.Animation.Storyboard.SetTarget(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.DependencyObject> value))

    let TargetName = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.Animation.Storyboard.SetTargetName(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let TargetProperty = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.Animation.Storyboard.SetTargetProperty(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.PropertyPath> value))


  module internal Stylus =

    let _DefIsPressAndHoldEnabled = System.Windows.Input.Stylus.IsPressAndHoldEnabledProperty.DefaultMetadata.DefaultValue
    let _DefIsFlicksEnabled = System.Windows.Input.Stylus.IsFlicksEnabledProperty.DefaultMetadata.DefaultValue
    let _DefIsTapFeedbackEnabled = System.Windows.Input.Stylus.IsTapFeedbackEnabledProperty.DefaultMetadata.DefaultValue
    let _DefIsTouchFeedbackEnabled = System.Windows.Input.Stylus.IsTouchFeedbackEnabledProperty.DefaultMetadata.DefaultValue

    let IsPressAndHoldEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsFlicksEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.Stylus.SetIsFlicksEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsTapFeedbackEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.Stylus.SetIsTapFeedbackEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsTouchFeedbackEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Input.Stylus.SetIsTouchFeedbackEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal TextBlock =

    let _DefBaselineOffset = System.Windows.Controls.TextBlock.BaselineOffsetProperty.DefaultMetadata.DefaultValue
    let _DefFontFamily = System.Windows.Controls.TextBlock.FontFamilyProperty.DefaultMetadata.DefaultValue
    let _DefFontStyle = System.Windows.Controls.TextBlock.FontStyleProperty.DefaultMetadata.DefaultValue
    let _DefFontWeight = System.Windows.Controls.TextBlock.FontWeightProperty.DefaultMetadata.DefaultValue
    let _DefFontStretch = System.Windows.Controls.TextBlock.FontStretchProperty.DefaultMetadata.DefaultValue
    let _DefFontSize = System.Windows.Controls.TextBlock.FontSizeProperty.DefaultMetadata.DefaultValue
    let _DefForeground = System.Windows.Controls.TextBlock.ForegroundProperty.DefaultMetadata.DefaultValue
    let _DefLineHeight = System.Windows.Controls.TextBlock.LineHeightProperty.DefaultMetadata.DefaultValue
    let _DefLineStackingStrategy = System.Windows.Controls.TextBlock.LineStackingStrategyProperty.DefaultMetadata.DefaultValue
    let _DefTextAlignment = System.Windows.Controls.TextBlock.TextAlignmentProperty.DefaultMetadata.DefaultValue

    let BaselineOffset = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetBaselineOffset(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let FontFamily = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetFontFamily(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.FontFamily> value))

    let FontStyle = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetFontStyle(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontStyle> value))

    let FontWeight = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetFontWeight(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontWeight> value))

    let FontStretch = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetFontStretch(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontStretch> value))

    let FontSize = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetFontSize(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let Foreground = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetForeground(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.Brush> value))

    let LineHeight = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetLineHeight(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let LineStackingStrategy = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetLineStackingStrategy(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.LineStackingStrategy> value))

    let TextAlignment = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextBlock.SetTextAlignment(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.TextAlignment> value))


  module internal TextElement =

    let _DefFontFamily = System.Windows.Documents.TextElement.FontFamilyProperty.DefaultMetadata.DefaultValue
    let _DefFontStyle = System.Windows.Documents.TextElement.FontStyleProperty.DefaultMetadata.DefaultValue
    let _DefFontWeight = System.Windows.Documents.TextElement.FontWeightProperty.DefaultMetadata.DefaultValue
    let _DefFontStretch = System.Windows.Documents.TextElement.FontStretchProperty.DefaultMetadata.DefaultValue
    let _DefFontSize = System.Windows.Documents.TextElement.FontSizeProperty.DefaultMetadata.DefaultValue
    let _DefForeground = System.Windows.Documents.TextElement.ForegroundProperty.DefaultMetadata.DefaultValue

    let FontFamily = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.TextElement.SetFontFamily(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.FontFamily> value))

    let FontStyle = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.TextElement.SetFontStyle(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontStyle> value))

    let FontWeight = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.TextElement.SetFontWeight(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontWeight> value))

    let FontStretch = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.TextElement.SetFontStretch(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontStretch> value))

    let FontSize = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.TextElement.SetFontSize(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let Foreground = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.TextElement.SetForeground(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.Brush> value))


  module internal TextOptions =

    let _DefTextFormattingMode = System.Windows.Media.TextOptions.TextFormattingModeProperty.DefaultMetadata.DefaultValue
    let _DefTextRenderingMode = System.Windows.Media.TextOptions.TextRenderingModeProperty.DefaultMetadata.DefaultValue
    let _DefTextHintingMode = System.Windows.Media.TextOptions.TextHintingModeProperty.DefaultMetadata.DefaultValue

    let TextFormattingMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.TextOptions.SetTextFormattingMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.TextFormattingMode> value))

    let TextRenderingMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.TextOptions.SetTextRenderingMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.TextRenderingMode> value))

    let TextHintingMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.TextOptions.SetTextHintingMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Media.TextHintingMode> value))


  module internal TextSearch =

    let _DefTextPath = System.Windows.Controls.TextSearch.TextPathProperty.DefaultMetadata.DefaultValue
    let _DefText = System.Windows.Controls.TextSearch.TextProperty.DefaultMetadata.DefaultValue

    let TextPath = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextSearch.SetTextPath(unbox<System.Windows.DependencyObject> target, unbox<string> value))

    let Text = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.TextSearch.SetText(unbox<System.Windows.DependencyObject> target, unbox<string> value))


  module internal Timeline =

    let _DefDesiredFrameRate = System.Windows.Media.Animation.Timeline.DesiredFrameRateProperty.DefaultMetadata.DefaultValue

    let DesiredFrameRate = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.Animation.Timeline.SetDesiredFrameRate(unbox<System.Windows.Media.Animation.Timeline> target, unbox<System.Nullable<int>> value))


  module internal ToolBar =

    let _DefOverflowMode = System.Windows.Controls.ToolBar.OverflowModeProperty.DefaultMetadata.DefaultValue

    let OverflowMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolBar.SetOverflowMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.OverflowMode> value))


  module internal ToolBarTray =

    let _DefIsLocked = System.Windows.Controls.ToolBarTray.IsLockedProperty.DefaultMetadata.DefaultValue

    let IsLocked = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolBarTray.SetIsLocked(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal ToolTipService =

    let _DefToolTip = System.Windows.Controls.ToolTipService.ToolTipProperty.DefaultMetadata.DefaultValue
    let _DefHorizontalOffset = System.Windows.Controls.ToolTipService.HorizontalOffsetProperty.DefaultMetadata.DefaultValue
    let _DefVerticalOffset = System.Windows.Controls.ToolTipService.VerticalOffsetProperty.DefaultMetadata.DefaultValue
    let _DefHasDropShadow = System.Windows.Controls.ToolTipService.HasDropShadowProperty.DefaultMetadata.DefaultValue
    let _DefPlacementTarget = System.Windows.Controls.ToolTipService.PlacementTargetProperty.DefaultMetadata.DefaultValue
    let _DefPlacementRectangle = System.Windows.Controls.ToolTipService.PlacementRectangleProperty.DefaultMetadata.DefaultValue
    let _DefPlacement = System.Windows.Controls.ToolTipService.PlacementProperty.DefaultMetadata.DefaultValue
    let _DefShowOnDisabled = System.Windows.Controls.ToolTipService.ShowOnDisabledProperty.DefaultMetadata.DefaultValue
    let _DefIsEnabled = System.Windows.Controls.ToolTipService.IsEnabledProperty.DefaultMetadata.DefaultValue
    let _DefShowDuration = System.Windows.Controls.ToolTipService.ShowDurationProperty.DefaultMetadata.DefaultValue
    let _DefInitialShowDelay = System.Windows.Controls.ToolTipService.InitialShowDelayProperty.DefaultMetadata.DefaultValue
    let _DefBetweenShowDelay = System.Windows.Controls.ToolTipService.BetweenShowDelayProperty.DefaultMetadata.DefaultValue

    let ToolTip = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetToolTip(unbox<System.Windows.DependencyObject> target, unbox<obj> value))

    let HorizontalOffset = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetHorizontalOffset(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let VerticalOffset = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetVerticalOffset(unbox<System.Windows.DependencyObject> target, unbox<float> value))

    let HasDropShadow = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetHasDropShadow(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let PlacementTarget = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetPlacementTarget(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.UIElement> value))

    let PlacementRectangle = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetPlacementRectangle(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Rect> value))

    let Placement = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetPlacement(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.Primitives.PlacementMode> value))

    let ShowOnDisabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetShowOnDisabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let IsEnabled = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetIsEnabled(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let ShowDuration = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetShowDuration(unbox<System.Windows.DependencyObject> target, unbox<int> value))

    let InitialShowDelay = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetInitialShowDelay(unbox<System.Windows.DependencyObject> target, unbox<int> value))

    let BetweenShowDelay = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.ToolTipService.SetBetweenShowDelay(unbox<System.Windows.DependencyObject> target, unbox<int> value))


  module internal Typography =

    let _DefContextualSwashes = System.Windows.Documents.Typography.ContextualSwashesProperty.DefaultMetadata.DefaultValue
    let _DefStylisticAlternates = System.Windows.Documents.Typography.StylisticAlternatesProperty.DefaultMetadata.DefaultValue
    let _DefStandardLigatures = System.Windows.Documents.Typography.StandardLigaturesProperty.DefaultMetadata.DefaultValue
    let _DefContextualLigatures = System.Windows.Documents.Typography.ContextualLigaturesProperty.DefaultMetadata.DefaultValue
    let _DefDiscretionaryLigatures = System.Windows.Documents.Typography.DiscretionaryLigaturesProperty.DefaultMetadata.DefaultValue
    let _DefHistoricalLigatures = System.Windows.Documents.Typography.HistoricalLigaturesProperty.DefaultMetadata.DefaultValue
    let _DefAnnotationAlternates = System.Windows.Documents.Typography.AnnotationAlternatesProperty.DefaultMetadata.DefaultValue
    let _DefContextualAlternates = System.Windows.Documents.Typography.ContextualAlternatesProperty.DefaultMetadata.DefaultValue
    let _DefHistoricalForms = System.Windows.Documents.Typography.HistoricalFormsProperty.DefaultMetadata.DefaultValue
    let _DefKerning = System.Windows.Documents.Typography.KerningProperty.DefaultMetadata.DefaultValue
    let _DefCapitalSpacing = System.Windows.Documents.Typography.CapitalSpacingProperty.DefaultMetadata.DefaultValue
    let _DefCaseSensitiveForms = System.Windows.Documents.Typography.CaseSensitiveFormsProperty.DefaultMetadata.DefaultValue
    let _DefStylisticSet1 = System.Windows.Documents.Typography.StylisticSet1Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet2 = System.Windows.Documents.Typography.StylisticSet2Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet3 = System.Windows.Documents.Typography.StylisticSet3Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet4 = System.Windows.Documents.Typography.StylisticSet4Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet5 = System.Windows.Documents.Typography.StylisticSet5Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet6 = System.Windows.Documents.Typography.StylisticSet6Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet7 = System.Windows.Documents.Typography.StylisticSet7Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet8 = System.Windows.Documents.Typography.StylisticSet8Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet9 = System.Windows.Documents.Typography.StylisticSet9Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet10 = System.Windows.Documents.Typography.StylisticSet10Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet11 = System.Windows.Documents.Typography.StylisticSet11Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet12 = System.Windows.Documents.Typography.StylisticSet12Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet13 = System.Windows.Documents.Typography.StylisticSet13Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet14 = System.Windows.Documents.Typography.StylisticSet14Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet15 = System.Windows.Documents.Typography.StylisticSet15Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet16 = System.Windows.Documents.Typography.StylisticSet16Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet17 = System.Windows.Documents.Typography.StylisticSet17Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet18 = System.Windows.Documents.Typography.StylisticSet18Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet19 = System.Windows.Documents.Typography.StylisticSet19Property.DefaultMetadata.DefaultValue
    let _DefStylisticSet20 = System.Windows.Documents.Typography.StylisticSet20Property.DefaultMetadata.DefaultValue
    let _DefFraction = System.Windows.Documents.Typography.FractionProperty.DefaultMetadata.DefaultValue
    let _DefSlashedZero = System.Windows.Documents.Typography.SlashedZeroProperty.DefaultMetadata.DefaultValue
    let _DefMathematicalGreek = System.Windows.Documents.Typography.MathematicalGreekProperty.DefaultMetadata.DefaultValue
    let _DefEastAsianExpertForms = System.Windows.Documents.Typography.EastAsianExpertFormsProperty.DefaultMetadata.DefaultValue
    let _DefVariants = System.Windows.Documents.Typography.VariantsProperty.DefaultMetadata.DefaultValue
    let _DefCapitals = System.Windows.Documents.Typography.CapitalsProperty.DefaultMetadata.DefaultValue
    let _DefNumeralStyle = System.Windows.Documents.Typography.NumeralStyleProperty.DefaultMetadata.DefaultValue
    let _DefNumeralAlignment = System.Windows.Documents.Typography.NumeralAlignmentProperty.DefaultMetadata.DefaultValue
    let _DefEastAsianWidths = System.Windows.Documents.Typography.EastAsianWidthsProperty.DefaultMetadata.DefaultValue
    let _DefEastAsianLanguage = System.Windows.Documents.Typography.EastAsianLanguageProperty.DefaultMetadata.DefaultValue
    let _DefStandardSwashes = System.Windows.Documents.Typography.StandardSwashesProperty.DefaultMetadata.DefaultValue

    let ContextualSwashes = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetContextualSwashes(unbox<System.Windows.DependencyObject> target, unbox<int> value))

    let StylisticAlternates = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticAlternates(unbox<System.Windows.DependencyObject> target, unbox<int> value))

    let StandardLigatures = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStandardLigatures(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let ContextualLigatures = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetContextualLigatures(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let DiscretionaryLigatures = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetDiscretionaryLigatures(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let HistoricalLigatures = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetHistoricalLigatures(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let AnnotationAlternates = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetAnnotationAlternates(unbox<System.Windows.DependencyObject> target, unbox<int> value))

    let ContextualAlternates = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetContextualAlternates(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let HistoricalForms = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetHistoricalForms(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let Kerning = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetKerning(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let CapitalSpacing = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetCapitalSpacing(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let CaseSensitiveForms = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetCaseSensitiveForms(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet1 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet1(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet2 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet2(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet3 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet3(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet4 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet4(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet5 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet5(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet6 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet6(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet7 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet7(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet8 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet8(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet9 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet9(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet10 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet10(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet11 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet11(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet12 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet12(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet13 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet13(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet14 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet14(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet15 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet15(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet16 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet16(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet17 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet17(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet18 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet18(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet19 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet19(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let StylisticSet20 = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStylisticSet20(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let Fraction = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetFraction(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontFraction> value))

    let SlashedZero = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetSlashedZero(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let MathematicalGreek = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetMathematicalGreek(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let EastAsianExpertForms = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetEastAsianExpertForms(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let Variants = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetVariants(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontVariants> value))

    let Capitals = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetCapitals(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontCapitals> value))

    let NumeralStyle = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetNumeralStyle(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontNumeralStyle> value))

    let NumeralAlignment = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetNumeralAlignment(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontNumeralAlignment> value))

    let EastAsianWidths = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetEastAsianWidths(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontEastAsianWidths> value))

    let EastAsianLanguage = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetEastAsianLanguage(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.FontEastAsianLanguage> value))

    let StandardSwashes = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Documents.Typography.SetStandardSwashes(unbox<System.Windows.DependencyObject> target, unbox<int> value))


  module internal Validation =

    let _DefValidationAdornerSite = System.Windows.Controls.Validation.ValidationAdornerSiteProperty.DefaultMetadata.DefaultValue
    let _DefValidationAdornerSiteFor = System.Windows.Controls.Validation.ValidationAdornerSiteForProperty.DefaultMetadata.DefaultValue

    let ValidationAdornerSite = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Validation.SetValidationAdornerSite(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.DependencyObject> value))

    let ValidationAdornerSiteFor = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.Validation.SetValidationAdornerSiteFor(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.DependencyObject> value))


  module internal Viewport2DVisual3D =

    let _DefIsVisualHostMaterial = System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterialProperty.DefaultMetadata.DefaultValue

    let IsVisualHostMaterial = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Media.Media3D.Viewport2DVisual3D.SetIsVisualHostMaterial(unbox<System.Windows.Media.Media3D.Material> target, unbox<bool> value))


  module internal VirtualizingPanel =

    let _DefIsVirtualizing = System.Windows.Controls.VirtualizingPanel.IsVirtualizingProperty.DefaultMetadata.DefaultValue
    let _DefVirtualizationMode = System.Windows.Controls.VirtualizingPanel.VirtualizationModeProperty.DefaultMetadata.DefaultValue
    let _DefIsVirtualizingWhenGrouping = System.Windows.Controls.VirtualizingPanel.IsVirtualizingWhenGroupingProperty.DefaultMetadata.DefaultValue
    let _DefScrollUnit = System.Windows.Controls.VirtualizingPanel.ScrollUnitProperty.DefaultMetadata.DefaultValue
    let _DefCacheLength = System.Windows.Controls.VirtualizingPanel.CacheLengthProperty.DefaultMetadata.DefaultValue
    let _DefCacheLengthUnit = System.Windows.Controls.VirtualizingPanel.CacheLengthUnitProperty.DefaultMetadata.DefaultValue
    let _DefIsContainerVirtualizable = System.Windows.Controls.VirtualizingPanel.IsContainerVirtualizableProperty.DefaultMetadata.DefaultValue

    let IsVirtualizing = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.VirtualizingPanel.SetIsVirtualizing(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let VirtualizationMode = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.VirtualizingPanel.SetVirtualizationMode(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.VirtualizationMode> value))

    let IsVirtualizingWhenGrouping = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.VirtualizingPanel.SetIsVirtualizingWhenGrouping(unbox<System.Windows.DependencyObject> target, unbox<bool> value))

    let ScrollUnit = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.VirtualizingPanel.SetScrollUnit(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.ScrollUnit> value))

    let CacheLength = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.VirtualizingPanel.SetCacheLength(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.VirtualizationCacheLength> value))

    let CacheLengthUnit = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.VirtualizingPanel.SetCacheLengthUnit(unbox<System.Windows.DependencyObject> target, unbox<System.Windows.Controls.VirtualizationCacheLengthUnit> value))

    let IsContainerVirtualizable = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Controls.VirtualizingPanel.SetIsContainerVirtualizable(unbox<System.Windows.DependencyObject> target, unbox<bool> value))


  module internal VisualStateManager =

    let _DefCustomVisualStateManager = System.Windows.VisualStateManager.CustomVisualStateManagerProperty.DefaultMetadata.DefaultValue

    let CustomVisualStateManager = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.VisualStateManager.SetCustomVisualStateManager(unbox<System.Windows.FrameworkElement> target, unbox<System.Windows.VisualStateManager> value))


  module internal WindowChrome =

    let _DefWindowChrome = System.Windows.Shell.WindowChrome.WindowChromeProperty.DefaultMetadata.DefaultValue

    let WindowChrome = RefEqWrapper (fun (target: obj) (value: obj) -> 
      System.Windows.Shell.WindowChrome.SetWindowChrome(unbox<System.Windows.Window> target, unbox<System.Windows.Shell.WindowChrome> value))



  type Elmish.WPF.Dynamic.DependencyObject with

    member this.AutomationProperties_AcceleratorKey
      with set (value: string) = this.__AttachedProps.Add(AutomationProperties.AcceleratorKey, (value |> box, AutomationProperties._DefAcceleratorKey))

    member this.AutomationProperties_AccessKey
      with set (value: string) = this.__AttachedProps.Add(AutomationProperties.AccessKey, (value |> box, AutomationProperties._DefAccessKey))

    member this.AutomationProperties_AutomationId
      with set (value: string) = this.__AttachedProps.Add(AutomationProperties.AutomationId, (value |> box, AutomationProperties._DefAutomationId))

    member this.AutomationProperties_HelpText
      with set (value: string) = this.__AttachedProps.Add(AutomationProperties.HelpText, (value |> box, AutomationProperties._DefHelpText))

    member this.AutomationProperties_IsColumnHeader
      with set (value: bool) = this.__AttachedProps.Add(AutomationProperties.IsColumnHeader, (value |> box, AutomationProperties._DefIsColumnHeader))

    member this.AutomationProperties_IsOffscreenBehavior
      with set (value: System.Windows.Automation.IsOffscreenBehavior) = this.__AttachedProps.Add(AutomationProperties.IsOffscreenBehavior, (value |> box, AutomationProperties._DefIsOffscreenBehavior))

    member this.AutomationProperties_IsRequiredForForm
      with set (value: bool) = this.__AttachedProps.Add(AutomationProperties.IsRequiredForForm, (value |> box, AutomationProperties._DefIsRequiredForForm))

    member this.AutomationProperties_IsRowHeader
      with set (value: bool) = this.__AttachedProps.Add(AutomationProperties.IsRowHeader, (value |> box, AutomationProperties._DefIsRowHeader))

    member this.AutomationProperties_ItemStatus
      with set (value: string) = this.__AttachedProps.Add(AutomationProperties.ItemStatus, (value |> box, AutomationProperties._DefItemStatus))

    member this.AutomationProperties_ItemType
      with set (value: string) = this.__AttachedProps.Add(AutomationProperties.ItemType, (value |> box, AutomationProperties._DefItemType))

    member this.AutomationProperties_LabeledBy
      with set (value: UIElement) = this.__AttachedProps.Add(AutomationProperties.LabeledBy, (value |> box, AutomationProperties._DefLabeledBy))

    member this.AutomationProperties_LiveSetting
      with set (value: System.Windows.Automation.AutomationLiveSetting) = this.__AttachedProps.Add(AutomationProperties.LiveSetting, (value |> box, AutomationProperties._DefLiveSetting))

    member this.AutomationProperties_Name
      with set (value: string) = this.__AttachedProps.Add(AutomationProperties.Name, (value |> box, AutomationProperties._DefName))

    member this.AutomationProperties_PositionInSet
      with set (value: int) = this.__AttachedProps.Add(AutomationProperties.PositionInSet, (value |> box, AutomationProperties._DefPositionInSet))

    member this.AutomationProperties_SizeOfSet
      with set (value: int) = this.__AttachedProps.Add(AutomationProperties.SizeOfSet, (value |> box, AutomationProperties._DefSizeOfSet))

    member this.Block_IsHyphenationEnabled
      with set (value: bool) = this.__AttachedProps.Add(Block.IsHyphenationEnabled, (value |> box, Block._DefIsHyphenationEnabled))

    member this.Block_LineHeight
      with set (value: float) = this.__AttachedProps.Add(Block.LineHeight, (value |> box, Block._DefLineHeight))

    member this.Block_LineStackingStrategy
      with set (value: System.Windows.LineStackingStrategy) = this.__AttachedProps.Add(Block.LineStackingStrategy, (value |> box, Block._DefLineStackingStrategy))

    member this.Block_TextAlignment
      with set (value: System.Windows.TextAlignment) = this.__AttachedProps.Add(Block.TextAlignment, (value |> box, Block._DefTextAlignment))

    member this.ContextMenuService_ContextMenu
      with set (value: ContextMenu) = this.__AttachedProps.Add(ContextMenuService.ContextMenu, (value |> box, ContextMenuService._DefContextMenu))

    member this.ContextMenuService_HasDropShadow
      with set (value: bool) = this.__AttachedProps.Add(ContextMenuService.HasDropShadow, (value |> box, ContextMenuService._DefHasDropShadow))

    member this.ContextMenuService_HorizontalOffset
      with set (value: float) = this.__AttachedProps.Add(ContextMenuService.HorizontalOffset, (value |> box, ContextMenuService._DefHorizontalOffset))

    member this.ContextMenuService_IsEnabled
      with set (value: bool) = this.__AttachedProps.Add(ContextMenuService.IsEnabled, (value |> box, ContextMenuService._DefIsEnabled))

    member this.ContextMenuService_Placement
      with set (value: System.Windows.Controls.Primitives.PlacementMode) = this.__AttachedProps.Add(ContextMenuService.Placement, (value |> box, ContextMenuService._DefPlacement))

    member this.ContextMenuService_PlacementRectangle
      with set (value: System.Windows.Rect) = this.__AttachedProps.Add(ContextMenuService.PlacementRectangle, (value |> box, ContextMenuService._DefPlacementRectangle))

    member this.ContextMenuService_PlacementTarget
      with set (value: UIElement) = this.__AttachedProps.Add(ContextMenuService.PlacementTarget, (value |> box, ContextMenuService._DefPlacementTarget))

    member this.ContextMenuService_ShowOnDisabled
      with set (value: bool) = this.__AttachedProps.Add(ContextMenuService.ShowOnDisabled, (value |> box, ContextMenuService._DefShowOnDisabled))

    member this.ContextMenuService_VerticalOffset
      with set (value: float) = this.__AttachedProps.Add(ContextMenuService.VerticalOffset, (value |> box, ContextMenuService._DefVerticalOffset))

    member this.DocumentViewerBase_IsMasterPage
      with set (value: bool) = this.__AttachedProps.Add(DocumentViewerBase.IsMasterPage, (value |> box, DocumentViewerBase._DefIsMasterPage))

    member this.FocusManager_FocusedElement
      with set (value: System.Windows.IInputElement) = this.__AttachedProps.Add(FocusManager.FocusedElement, (value |> box, FocusManager._DefFocusedElement))

    member this.FocusManager_IsFocusScope
      with set (value: bool) = this.__AttachedProps.Add(FocusManager.IsFocusScope, (value |> box, FocusManager._DefIsFocusScope))

    member this.FrameworkElement_FlowDirection
      with set (value: System.Windows.FlowDirection) = this.__AttachedProps.Add(FrameworkElement.FlowDirection, (value |> box, FrameworkElement._DefFlowDirection))

    member this.InputLanguageManager_InputLanguage
      with set (value: System.Globalization.CultureInfo) = this.__AttachedProps.Add(InputLanguageManager.InputLanguage, (value |> box, InputLanguageManager._DefInputLanguage))

    member this.InputLanguageManager_RestoreInputLanguage
      with set (value: bool) = this.__AttachedProps.Add(InputLanguageManager.RestoreInputLanguage, (value |> box, InputLanguageManager._DefRestoreInputLanguage))

    member this.InputMethod_InputScope
      with set (value: System.Windows.Input.InputScope) = this.__AttachedProps.Add(InputMethod.InputScope, (value |> box, InputMethod._DefInputScope))

    member this.InputMethod_IsInputMethodEnabled
      with set (value: bool) = this.__AttachedProps.Add(InputMethod.IsInputMethodEnabled, (value |> box, InputMethod._DefIsInputMethodEnabled))

    member this.InputMethod_IsInputMethodSuspended
      with set (value: bool) = this.__AttachedProps.Add(InputMethod.IsInputMethodSuspended, (value |> box, InputMethod._DefIsInputMethodSuspended))

    member this.InputMethod_PreferredImeConversionMode
      with set (value: System.Windows.Input.ImeConversionModeValues) = this.__AttachedProps.Add(InputMethod.PreferredImeConversionMode, (value |> box, InputMethod._DefPreferredImeConversionMode))

    member this.InputMethod_PreferredImeSentenceMode
      with set (value: System.Windows.Input.ImeSentenceModeValues) = this.__AttachedProps.Add(InputMethod.PreferredImeSentenceMode, (value |> box, InputMethod._DefPreferredImeSentenceMode))

    member this.InputMethod_PreferredImeState
      with set (value: System.Windows.Input.InputMethodState) = this.__AttachedProps.Add(InputMethod.PreferredImeState, (value |> box, InputMethod._DefPreferredImeState))

    member this.JournalEntry_KeepAlive
      with set (value: bool) = this.__AttachedProps.Add(JournalEntry.KeepAlive, (value |> box, JournalEntry._DefKeepAlive))

    member this.JournalEntry_Name
      with set (value: string) = this.__AttachedProps.Add(JournalEntry.Name, (value |> box, JournalEntry._DefName))

    member this.JournalEntryUnifiedViewConverter_JournalEntryPosition
      with set (value: System.Windows.Navigation.JournalEntryPosition) = this.__AttachedProps.Add(JournalEntryUnifiedViewConverter.JournalEntryPosition, (value |> box, JournalEntryUnifiedViewConverter._DefJournalEntryPosition))

    member this.KeyboardNavigation_AcceptsReturn
      with set (value: bool) = this.__AttachedProps.Add(KeyboardNavigation.AcceptsReturn, (value |> box, KeyboardNavigation._DefAcceptsReturn))

    member this.KeyboardNavigation_ControlTabNavigation
      with set (value: System.Windows.Input.KeyboardNavigationMode) = this.__AttachedProps.Add(KeyboardNavigation.ControlTabNavigation, (value |> box, KeyboardNavigation._DefControlTabNavigation))

    member this.KeyboardNavigation_DirectionalNavigation
      with set (value: System.Windows.Input.KeyboardNavigationMode) = this.__AttachedProps.Add(KeyboardNavigation.DirectionalNavigation, (value |> box, KeyboardNavigation._DefDirectionalNavigation))

    member this.KeyboardNavigation_IsTabStop
      with set (value: bool) = this.__AttachedProps.Add(KeyboardNavigation.IsTabStop, (value |> box, KeyboardNavigation._DefIsTabStop))

    member this.KeyboardNavigation_TabIndex
      with set (value: int) = this.__AttachedProps.Add(KeyboardNavigation.TabIndex, (value |> box, KeyboardNavigation._DefTabIndex))

    member this.KeyboardNavigation_TabNavigation
      with set (value: System.Windows.Input.KeyboardNavigationMode) = this.__AttachedProps.Add(KeyboardNavigation.TabNavigation, (value |> box, KeyboardNavigation._DefTabNavigation))

    member this.NumberSubstitution_CultureOverride
      with set (value: System.Globalization.CultureInfo) = this.__AttachedProps.Add(NumberSubstitution.CultureOverride, (value |> box, NumberSubstitution._DefCultureOverride))

    member this.NumberSubstitution_CultureSource
      with set (value: System.Windows.Media.NumberCultureSource) = this.__AttachedProps.Add(NumberSubstitution.CultureSource, (value |> box, NumberSubstitution._DefCultureSource))

    member this.NumberSubstitution_Substitution
      with set (value: System.Windows.Media.NumberSubstitutionMethod) = this.__AttachedProps.Add(NumberSubstitution.Substitution, (value |> box, NumberSubstitution._DefSubstitution))

    member this.RenderOptions_BitmapScalingMode
      with set (value: System.Windows.Media.BitmapScalingMode) = this.__AttachedProps.Add(RenderOptions.BitmapScalingMode, (value |> box, RenderOptions._DefBitmapScalingMode))

    member this.RenderOptions_CacheInvalidationThresholdMaximum
      with set (value: float) = this.__AttachedProps.Add(RenderOptions.CacheInvalidationThresholdMaximum, (value |> box, RenderOptions._DefCacheInvalidationThresholdMaximum))

    member this.RenderOptions_CacheInvalidationThresholdMinimum
      with set (value: float) = this.__AttachedProps.Add(RenderOptions.CacheInvalidationThresholdMinimum, (value |> box, RenderOptions._DefCacheInvalidationThresholdMinimum))

    member this.RenderOptions_CachingHint
      with set (value: System.Windows.Media.CachingHint) = this.__AttachedProps.Add(RenderOptions.CachingHint, (value |> box, RenderOptions._DefCachingHint))

    member this.RenderOptions_ClearTypeHint
      with set (value: System.Windows.Media.ClearTypeHint) = this.__AttachedProps.Add(RenderOptions.ClearTypeHint, (value |> box, RenderOptions._DefClearTypeHint))

    member this.RenderOptions_EdgeMode
      with set (value: System.Windows.Media.EdgeMode) = this.__AttachedProps.Add(RenderOptions.EdgeMode, (value |> box, RenderOptions._DefEdgeMode))

    member this.ScrollViewer_CanContentScroll
      with set (value: bool) = this.__AttachedProps.Add(ScrollViewer.CanContentScroll, (value |> box, ScrollViewer._DefCanContentScroll))

    member this.ScrollViewer_HorizontalScrollBarVisibility
      with set (value: System.Windows.Controls.ScrollBarVisibility) = this.__AttachedProps.Add(ScrollViewer.HorizontalScrollBarVisibility, (value |> box, ScrollViewer._DefHorizontalScrollBarVisibility))

    member this.ScrollViewer_IsDeferredScrollingEnabled
      with set (value: bool) = this.__AttachedProps.Add(ScrollViewer.IsDeferredScrollingEnabled, (value |> box, ScrollViewer._DefIsDeferredScrollingEnabled))

    member this.ScrollViewer_PanningDeceleration
      with set (value: float) = this.__AttachedProps.Add(ScrollViewer.PanningDeceleration, (value |> box, ScrollViewer._DefPanningDeceleration))

    member this.ScrollViewer_PanningMode
      with set (value: System.Windows.Controls.PanningMode) = this.__AttachedProps.Add(ScrollViewer.PanningMode, (value |> box, ScrollViewer._DefPanningMode))

    member this.ScrollViewer_PanningRatio
      with set (value: float) = this.__AttachedProps.Add(ScrollViewer.PanningRatio, (value |> box, ScrollViewer._DefPanningRatio))

    member this.ScrollViewer_VerticalScrollBarVisibility
      with set (value: System.Windows.Controls.ScrollBarVisibility) = this.__AttachedProps.Add(ScrollViewer.VerticalScrollBarVisibility, (value |> box, ScrollViewer._DefVerticalScrollBarVisibility))

    member this.SelectiveScrollingGrid_SelectiveScrollingOrientation
      with set (value: System.Windows.Controls.SelectiveScrollingOrientation) = this.__AttachedProps.Add(SelectiveScrollingGrid.SelectiveScrollingOrientation, (value |> box, SelectiveScrollingGrid._DefSelectiveScrollingOrientation))

    member this.Selector_IsSelected
      with set (value: bool) = this.__AttachedProps.Add(Selector.IsSelected, (value |> box, Selector._DefIsSelected))

    member this.Storyboard_Target
      with set (value: DependencyObject) = this.__AttachedProps.Add(Storyboard.Target, (value |> box, Storyboard._DefTarget))

    member this.Storyboard_TargetName
      with set (value: string) = this.__AttachedProps.Add(Storyboard.TargetName, (value |> box, Storyboard._DefTargetName))

    member this.Storyboard_TargetProperty
      with set (value: System.Windows.PropertyPath) = this.__AttachedProps.Add(Storyboard.TargetProperty, (value |> box, Storyboard._DefTargetProperty))

    member this.Stylus_IsFlicksEnabled
      with set (value: bool) = this.__AttachedProps.Add(Stylus.IsFlicksEnabled, (value |> box, Stylus._DefIsFlicksEnabled))

    member this.Stylus_IsPressAndHoldEnabled
      with set (value: bool) = this.__AttachedProps.Add(Stylus.IsPressAndHoldEnabled, (value |> box, Stylus._DefIsPressAndHoldEnabled))

    member this.Stylus_IsTapFeedbackEnabled
      with set (value: bool) = this.__AttachedProps.Add(Stylus.IsTapFeedbackEnabled, (value |> box, Stylus._DefIsTapFeedbackEnabled))

    member this.Stylus_IsTouchFeedbackEnabled
      with set (value: bool) = this.__AttachedProps.Add(Stylus.IsTouchFeedbackEnabled, (value |> box, Stylus._DefIsTouchFeedbackEnabled))

    member this.TextBlock_BaselineOffset
      with set (value: float) = this.__AttachedProps.Add(TextBlock.BaselineOffset, (value |> box, TextBlock._DefBaselineOffset))

    member this.TextBlock_FontFamily
      with set (value: System.Windows.Media.FontFamily) = this.__AttachedProps.Add(TextBlock.FontFamily, (value |> box, TextBlock._DefFontFamily))

    member this.TextBlock_FontSize
      with set (value: float) = this.__AttachedProps.Add(TextBlock.FontSize, (value |> box, TextBlock._DefFontSize))

    member this.TextBlock_FontStretch
      with set (value: System.Windows.FontStretch) = this.__AttachedProps.Add(TextBlock.FontStretch, (value |> box, TextBlock._DefFontStretch))

    member this.TextBlock_FontStyle
      with set (value: System.Windows.FontStyle) = this.__AttachedProps.Add(TextBlock.FontStyle, (value |> box, TextBlock._DefFontStyle))

    member this.TextBlock_FontWeight
      with set (value: System.Windows.FontWeight) = this.__AttachedProps.Add(TextBlock.FontWeight, (value |> box, TextBlock._DefFontWeight))

    member this.TextBlock_Foreground
      with set (value: Brush) = this.__AttachedProps.Add(TextBlock.Foreground, (value |> box, TextBlock._DefForeground))

    member this.TextBlock_LineHeight
      with set (value: float) = this.__AttachedProps.Add(TextBlock.LineHeight, (value |> box, TextBlock._DefLineHeight))

    member this.TextBlock_LineStackingStrategy
      with set (value: System.Windows.LineStackingStrategy) = this.__AttachedProps.Add(TextBlock.LineStackingStrategy, (value |> box, TextBlock._DefLineStackingStrategy))

    member this.TextBlock_TextAlignment
      with set (value: System.Windows.TextAlignment) = this.__AttachedProps.Add(TextBlock.TextAlignment, (value |> box, TextBlock._DefTextAlignment))

    member this.TextElement_FontFamily
      with set (value: System.Windows.Media.FontFamily) = this.__AttachedProps.Add(TextElement.FontFamily, (value |> box, TextElement._DefFontFamily))

    member this.TextElement_FontSize
      with set (value: float) = this.__AttachedProps.Add(TextElement.FontSize, (value |> box, TextElement._DefFontSize))

    member this.TextElement_FontStretch
      with set (value: System.Windows.FontStretch) = this.__AttachedProps.Add(TextElement.FontStretch, (value |> box, TextElement._DefFontStretch))

    member this.TextElement_FontStyle
      with set (value: System.Windows.FontStyle) = this.__AttachedProps.Add(TextElement.FontStyle, (value |> box, TextElement._DefFontStyle))

    member this.TextElement_FontWeight
      with set (value: System.Windows.FontWeight) = this.__AttachedProps.Add(TextElement.FontWeight, (value |> box, TextElement._DefFontWeight))

    member this.TextElement_Foreground
      with set (value: Brush) = this.__AttachedProps.Add(TextElement.Foreground, (value |> box, TextElement._DefForeground))

    member this.TextOptions_TextFormattingMode
      with set (value: System.Windows.Media.TextFormattingMode) = this.__AttachedProps.Add(TextOptions.TextFormattingMode, (value |> box, TextOptions._DefTextFormattingMode))

    member this.TextOptions_TextHintingMode
      with set (value: System.Windows.Media.TextHintingMode) = this.__AttachedProps.Add(TextOptions.TextHintingMode, (value |> box, TextOptions._DefTextHintingMode))

    member this.TextOptions_TextRenderingMode
      with set (value: System.Windows.Media.TextRenderingMode) = this.__AttachedProps.Add(TextOptions.TextRenderingMode, (value |> box, TextOptions._DefTextRenderingMode))

    member this.TextSearch_Text
      with set (value: string) = this.__AttachedProps.Add(TextSearch.Text, (value |> box, TextSearch._DefText))

    member this.TextSearch_TextPath
      with set (value: string) = this.__AttachedProps.Add(TextSearch.TextPath, (value |> box, TextSearch._DefTextPath))

    member this.ToolBar_OverflowMode
      with set (value: System.Windows.Controls.OverflowMode) = this.__AttachedProps.Add(ToolBar.OverflowMode, (value |> box, ToolBar._DefOverflowMode))

    member this.ToolBarTray_IsLocked
      with set (value: bool) = this.__AttachedProps.Add(ToolBarTray.IsLocked, (value |> box, ToolBarTray._DefIsLocked))

    member this.ToolTipService_BetweenShowDelay
      with set (value: int) = this.__AttachedProps.Add(ToolTipService.BetweenShowDelay, (value |> box, ToolTipService._DefBetweenShowDelay))

    member this.ToolTipService_HasDropShadow
      with set (value: bool) = this.__AttachedProps.Add(ToolTipService.HasDropShadow, (value |> box, ToolTipService._DefHasDropShadow))

    member this.ToolTipService_HorizontalOffset
      with set (value: float) = this.__AttachedProps.Add(ToolTipService.HorizontalOffset, (value |> box, ToolTipService._DefHorizontalOffset))

    member this.ToolTipService_InitialShowDelay
      with set (value: int) = this.__AttachedProps.Add(ToolTipService.InitialShowDelay, (value |> box, ToolTipService._DefInitialShowDelay))

    member this.ToolTipService_IsEnabled
      with set (value: bool) = this.__AttachedProps.Add(ToolTipService.IsEnabled, (value |> box, ToolTipService._DefIsEnabled))

    member this.ToolTipService_Placement
      with set (value: System.Windows.Controls.Primitives.PlacementMode) = this.__AttachedProps.Add(ToolTipService.Placement, (value |> box, ToolTipService._DefPlacement))

    member this.ToolTipService_PlacementRectangle
      with set (value: System.Windows.Rect) = this.__AttachedProps.Add(ToolTipService.PlacementRectangle, (value |> box, ToolTipService._DefPlacementRectangle))

    member this.ToolTipService_PlacementTarget
      with set (value: UIElement) = this.__AttachedProps.Add(ToolTipService.PlacementTarget, (value |> box, ToolTipService._DefPlacementTarget))

    member this.ToolTipService_ShowDuration
      with set (value: int) = this.__AttachedProps.Add(ToolTipService.ShowDuration, (value |> box, ToolTipService._DefShowDuration))

    member this.ToolTipService_ShowOnDisabled
      with set (value: bool) = this.__AttachedProps.Add(ToolTipService.ShowOnDisabled, (value |> box, ToolTipService._DefShowOnDisabled))

    member this.ToolTipService_ToolTip
      with set (value: obj) = this.__AttachedProps.Add(ToolTipService.ToolTip, (value |> box, ToolTipService._DefToolTip))

    member this.ToolTipService_VerticalOffset
      with set (value: float) = this.__AttachedProps.Add(ToolTipService.VerticalOffset, (value |> box, ToolTipService._DefVerticalOffset))

    member this.Typography_AnnotationAlternates
      with set (value: int) = this.__AttachedProps.Add(Typography.AnnotationAlternates, (value |> box, Typography._DefAnnotationAlternates))

    member this.Typography_CapitalSpacing
      with set (value: bool) = this.__AttachedProps.Add(Typography.CapitalSpacing, (value |> box, Typography._DefCapitalSpacing))

    member this.Typography_Capitals
      with set (value: System.Windows.FontCapitals) = this.__AttachedProps.Add(Typography.Capitals, (value |> box, Typography._DefCapitals))

    member this.Typography_CaseSensitiveForms
      with set (value: bool) = this.__AttachedProps.Add(Typography.CaseSensitiveForms, (value |> box, Typography._DefCaseSensitiveForms))

    member this.Typography_ContextualAlternates
      with set (value: bool) = this.__AttachedProps.Add(Typography.ContextualAlternates, (value |> box, Typography._DefContextualAlternates))

    member this.Typography_ContextualLigatures
      with set (value: bool) = this.__AttachedProps.Add(Typography.ContextualLigatures, (value |> box, Typography._DefContextualLigatures))

    member this.Typography_ContextualSwashes
      with set (value: int) = this.__AttachedProps.Add(Typography.ContextualSwashes, (value |> box, Typography._DefContextualSwashes))

    member this.Typography_DiscretionaryLigatures
      with set (value: bool) = this.__AttachedProps.Add(Typography.DiscretionaryLigatures, (value |> box, Typography._DefDiscretionaryLigatures))

    member this.Typography_EastAsianExpertForms
      with set (value: bool) = this.__AttachedProps.Add(Typography.EastAsianExpertForms, (value |> box, Typography._DefEastAsianExpertForms))

    member this.Typography_EastAsianLanguage
      with set (value: System.Windows.FontEastAsianLanguage) = this.__AttachedProps.Add(Typography.EastAsianLanguage, (value |> box, Typography._DefEastAsianLanguage))

    member this.Typography_EastAsianWidths
      with set (value: System.Windows.FontEastAsianWidths) = this.__AttachedProps.Add(Typography.EastAsianWidths, (value |> box, Typography._DefEastAsianWidths))

    member this.Typography_Fraction
      with set (value: System.Windows.FontFraction) = this.__AttachedProps.Add(Typography.Fraction, (value |> box, Typography._DefFraction))

    member this.Typography_HistoricalForms
      with set (value: bool) = this.__AttachedProps.Add(Typography.HistoricalForms, (value |> box, Typography._DefHistoricalForms))

    member this.Typography_HistoricalLigatures
      with set (value: bool) = this.__AttachedProps.Add(Typography.HistoricalLigatures, (value |> box, Typography._DefHistoricalLigatures))

    member this.Typography_Kerning
      with set (value: bool) = this.__AttachedProps.Add(Typography.Kerning, (value |> box, Typography._DefKerning))

    member this.Typography_MathematicalGreek
      with set (value: bool) = this.__AttachedProps.Add(Typography.MathematicalGreek, (value |> box, Typography._DefMathematicalGreek))

    member this.Typography_NumeralAlignment
      with set (value: System.Windows.FontNumeralAlignment) = this.__AttachedProps.Add(Typography.NumeralAlignment, (value |> box, Typography._DefNumeralAlignment))

    member this.Typography_NumeralStyle
      with set (value: System.Windows.FontNumeralStyle) = this.__AttachedProps.Add(Typography.NumeralStyle, (value |> box, Typography._DefNumeralStyle))

    member this.Typography_SlashedZero
      with set (value: bool) = this.__AttachedProps.Add(Typography.SlashedZero, (value |> box, Typography._DefSlashedZero))

    member this.Typography_StandardLigatures
      with set (value: bool) = this.__AttachedProps.Add(Typography.StandardLigatures, (value |> box, Typography._DefStandardLigatures))

    member this.Typography_StandardSwashes
      with set (value: int) = this.__AttachedProps.Add(Typography.StandardSwashes, (value |> box, Typography._DefStandardSwashes))

    member this.Typography_StylisticAlternates
      with set (value: int) = this.__AttachedProps.Add(Typography.StylisticAlternates, (value |> box, Typography._DefStylisticAlternates))

    member this.Typography_StylisticSet1
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet1, (value |> box, Typography._DefStylisticSet1))

    member this.Typography_StylisticSet10
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet10, (value |> box, Typography._DefStylisticSet10))

    member this.Typography_StylisticSet11
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet11, (value |> box, Typography._DefStylisticSet11))

    member this.Typography_StylisticSet12
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet12, (value |> box, Typography._DefStylisticSet12))

    member this.Typography_StylisticSet13
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet13, (value |> box, Typography._DefStylisticSet13))

    member this.Typography_StylisticSet14
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet14, (value |> box, Typography._DefStylisticSet14))

    member this.Typography_StylisticSet15
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet15, (value |> box, Typography._DefStylisticSet15))

    member this.Typography_StylisticSet16
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet16, (value |> box, Typography._DefStylisticSet16))

    member this.Typography_StylisticSet17
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet17, (value |> box, Typography._DefStylisticSet17))

    member this.Typography_StylisticSet18
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet18, (value |> box, Typography._DefStylisticSet18))

    member this.Typography_StylisticSet19
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet19, (value |> box, Typography._DefStylisticSet19))

    member this.Typography_StylisticSet2
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet2, (value |> box, Typography._DefStylisticSet2))

    member this.Typography_StylisticSet20
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet20, (value |> box, Typography._DefStylisticSet20))

    member this.Typography_StylisticSet3
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet3, (value |> box, Typography._DefStylisticSet3))

    member this.Typography_StylisticSet4
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet4, (value |> box, Typography._DefStylisticSet4))

    member this.Typography_StylisticSet5
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet5, (value |> box, Typography._DefStylisticSet5))

    member this.Typography_StylisticSet6
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet6, (value |> box, Typography._DefStylisticSet6))

    member this.Typography_StylisticSet7
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet7, (value |> box, Typography._DefStylisticSet7))

    member this.Typography_StylisticSet8
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet8, (value |> box, Typography._DefStylisticSet8))

    member this.Typography_StylisticSet9
      with set (value: bool) = this.__AttachedProps.Add(Typography.StylisticSet9, (value |> box, Typography._DefStylisticSet9))

    member this.Typography_Variants
      with set (value: System.Windows.FontVariants) = this.__AttachedProps.Add(Typography.Variants, (value |> box, Typography._DefVariants))

    member this.Validation_ValidationAdornerSite
      with set (value: DependencyObject) = this.__AttachedProps.Add(Validation.ValidationAdornerSite, (value |> box, Validation._DefValidationAdornerSite))

    member this.Validation_ValidationAdornerSiteFor
      with set (value: DependencyObject) = this.__AttachedProps.Add(Validation.ValidationAdornerSiteFor, (value |> box, Validation._DefValidationAdornerSiteFor))

    member this.VirtualizingPanel_CacheLength
      with set (value: System.Windows.Controls.VirtualizationCacheLength) = this.__AttachedProps.Add(VirtualizingPanel.CacheLength, (value |> box, VirtualizingPanel._DefCacheLength))

    member this.VirtualizingPanel_CacheLengthUnit
      with set (value: System.Windows.Controls.VirtualizationCacheLengthUnit) = this.__AttachedProps.Add(VirtualizingPanel.CacheLengthUnit, (value |> box, VirtualizingPanel._DefCacheLengthUnit))

    member this.VirtualizingPanel_IsContainerVirtualizable
      with set (value: bool) = this.__AttachedProps.Add(VirtualizingPanel.IsContainerVirtualizable, (value |> box, VirtualizingPanel._DefIsContainerVirtualizable))

    member this.VirtualizingPanel_IsVirtualizing
      with set (value: bool) = this.__AttachedProps.Add(VirtualizingPanel.IsVirtualizing, (value |> box, VirtualizingPanel._DefIsVirtualizing))

    member this.VirtualizingPanel_IsVirtualizingWhenGrouping
      with set (value: bool) = this.__AttachedProps.Add(VirtualizingPanel.IsVirtualizingWhenGrouping, (value |> box, VirtualizingPanel._DefIsVirtualizingWhenGrouping))

    member this.VirtualizingPanel_ScrollUnit
      with set (value: System.Windows.Controls.ScrollUnit) = this.__AttachedProps.Add(VirtualizingPanel.ScrollUnit, (value |> box, VirtualizingPanel._DefScrollUnit))

    member this.VirtualizingPanel_VirtualizationMode
      with set (value: System.Windows.Controls.VirtualizationMode) = this.__AttachedProps.Add(VirtualizingPanel.VirtualizationMode, (value |> box, VirtualizingPanel._DefVirtualizationMode))


  type Elmish.WPF.Dynamic.FrameworkElement with

    member this.VisualStateManager_CustomVisualStateManager
      with set (value: VisualStateManager) = this.__AttachedProps.Add(VisualStateManager.CustomVisualStateManager, (value |> box, VisualStateManager._DefCustomVisualStateManager))


  type Elmish.WPF.Dynamic.Material with

    member this.Viewport2DVisual3D_IsVisualHostMaterial
      with set (value: bool) = this.__AttachedProps.Add(Viewport2DVisual3D.IsVisualHostMaterial, (value |> box, Viewport2DVisual3D._DefIsVisualHostMaterial))


  type Elmish.WPF.Dynamic.TextBoxBase with

    member this.SpellCheck_IsEnabled
      with set (value: bool) = this.__AttachedProps.Add(SpellCheck.IsEnabled, (value |> box, SpellCheck._DefIsEnabled))

    member this.SpellCheck_SpellingReform
      with set (value: System.Windows.Controls.SpellingReform) = this.__AttachedProps.Add(SpellCheck.SpellingReform, (value |> box, SpellCheck._DefSpellingReform))


  type Elmish.WPF.Dynamic.Timeline with

    member this.Timeline_DesiredFrameRate
      with set (value: int option) = this.__AttachedProps.Add(Timeline.DesiredFrameRate, (value |> Option.toNullable |> box, Timeline._DefDesiredFrameRate))


  type Elmish.WPF.Dynamic.UIElement with

    member this.Canvas_Bottom
      with set (value: float) = this.__AttachedProps.Add(Canvas.Bottom, (value |> box, Canvas._DefBottom))

    member this.Canvas_Left
      with set (value: float) = this.__AttachedProps.Add(Canvas.Left, (value |> box, Canvas._DefLeft))

    member this.Canvas_Right
      with set (value: float) = this.__AttachedProps.Add(Canvas.Right, (value |> box, Canvas._DefRight))

    member this.Canvas_Top
      with set (value: float) = this.__AttachedProps.Add(Canvas.Top, (value |> box, Canvas._DefTop))

    member this.DockPanel_Dock
      with set (value: System.Windows.Controls.Dock) = this.__AttachedProps.Add(DockPanel.Dock, (value |> box, DockPanel._DefDock))

    member this.FixedPage_Bottom
      with set (value: float) = this.__AttachedProps.Add(FixedPage.Bottom, (value |> box, FixedPage._DefBottom))

    member this.FixedPage_Left
      with set (value: float) = this.__AttachedProps.Add(FixedPage.Left, (value |> box, FixedPage._DefLeft))

    member this.FixedPage_NavigateUri
      with set (value: System.Uri) = this.__AttachedProps.Add(FixedPage.NavigateUri, (value |> box, FixedPage._DefNavigateUri))

    member this.FixedPage_Right
      with set (value: float) = this.__AttachedProps.Add(FixedPage.Right, (value |> box, FixedPage._DefRight))

    member this.FixedPage_Top
      with set (value: float) = this.__AttachedProps.Add(FixedPage.Top, (value |> box, FixedPage._DefTop))

    member this.Grid_Column
      with set (value: int) = this.__AttachedProps.Add(Grid.Column, (value |> box, Grid._DefColumn))

    member this.Grid_ColumnSpan
      with set (value: int) = this.__AttachedProps.Add(Grid.ColumnSpan, (value |> box, Grid._DefColumnSpan))

    member this.Grid_IsSharedSizeScope
      with set (value: bool) = this.__AttachedProps.Add(Grid.IsSharedSizeScope, (value |> box, Grid._DefIsSharedSizeScope))

    member this.Grid_Row
      with set (value: int) = this.__AttachedProps.Add(Grid.Row, (value |> box, Grid._DefRow))

    member this.Grid_RowSpan
      with set (value: int) = this.__AttachedProps.Add(Grid.RowSpan, (value |> box, Grid._DefRowSpan))

    member this.InkCanvas_Bottom
      with set (value: float) = this.__AttachedProps.Add(InkCanvas.Bottom, (value |> box, InkCanvas._DefBottom))

    member this.InkCanvas_Left
      with set (value: float) = this.__AttachedProps.Add(InkCanvas.Left, (value |> box, InkCanvas._DefLeft))

    member this.InkCanvas_Right
      with set (value: float) = this.__AttachedProps.Add(InkCanvas.Right, (value |> box, InkCanvas._DefRight))

    member this.InkCanvas_Top
      with set (value: float) = this.__AttachedProps.Add(InkCanvas.Top, (value |> box, InkCanvas._DefTop))

    member this.Panel_ZIndex
      with set (value: int) = this.__AttachedProps.Add(Panel.ZIndex, (value |> box, Panel._DefZIndex))


  type Elmish.WPF.Dynamic.Window with

    member this.WindowChrome_WindowChrome
      with set (value: WindowChrome) = this.__AttachedProps.Add(WindowChrome.WindowChrome, (value |> box, WindowChrome._DefWindowChrome))


